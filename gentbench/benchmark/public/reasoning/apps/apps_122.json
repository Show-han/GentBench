{
    "problem": "You are an expert Python programmer, and here is your task: Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: \n\n Arrange all the rangers in a straight line in the order of increasing strengths.\n\n Take the bitwise XOR (is written as $\\oplus$) of the strength of each alternate ranger with x and update it's strength.\n\n Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: \n\n The strength of first ranger is updated to $5 \\oplus 2$, i.e. 7.\n\n The strength of second ranger remains the same, i.e. 7.\n\n The strength of third ranger is updated to $9 \\oplus 2$, i.e. 11.\n\n The strength of fourth ranger remains the same, i.e. 11.\n\n The strength of fifth ranger is updated to $15 \\oplus 2$, i.e. 13.\n\n The new strengths of the 5 rangers are [7, 7, 11, 11, 13]\n\nNow, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?\n\n\n-----Input-----\n\nFirst line consists of three integers n, k, x (1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 10^5, 0 \u2264 x \u2264 10^3) \u2014 number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.\n\nSecond line consists of n integers representing the strengths of the rangers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^3).\n\n\n-----Output-----\n\nOutput two integers, the maximum and the minimum strength of the rangers after performing the operation k times.\n\n\n-----Examples-----\nInput\n5 1 2\n9 7 11 15 5\n\nOutput\n13 7\nInput\n2 100000 569\n605 986\n\nOutput\n986 605",
    "solution": "[\"n, k, x = list(map(int, input().split()))\\nrangers = list(map(int, input().split()))\\n\\nfor i in range(min(k, 8 + k%4)):\\n    rangers.sort()\\n    rangers = [ rangers[i] if i%2 else rangers[i]^x for i in range(n)]\\n#    print(rangers)      \\n\\nrangers.sort()\\nprint(rangers[-1], rangers[0])\\n\", \"#coding utf-8\\n'''\\nimport random\\nla=100\\na=[[]]\\nfor i in range(0,la):a[0].append(random.randint(1,1001))\\nx=random.randint(1,1001)\\nprint('x: ',x)\\na.sort()\\nprint('origin a',a[0])\\n'''\\ns=input().split();\\nn=int(s[0]);k=int(s[1]);x=int(s[2]);\\na=[[]]\\ns=input().split();\\nfor i in range(n):\\n\\ta[0].append(int(s[i]));\\n\\na[0].sort()\\nfor i in range(1,k+1):\\n#\\tprint(a[i-1])\\n\\ta.append([a[i-1][t]^(x*((t+1)%2)) for t in range(len(a[i-1]))])\\n#\\tprint(a[i])\\n\\ta[i].sort()\\n\\tfor t in range(i):\\n\\t\\tif a[i]==a[t]:\\n\\t\\t\\tflag=True\\n\\t\\t\\tbreak\\n\\tif(t!=i-1):break\\n\\nif(k==0):tag=0\\nelif(i==k):tag=k\\nelse:tag=(k-i+1)%(t-i)+i-1\\n#print(a[0],'\\\\n',a[1])\\nprint(max(a[tag]),min(a[tag]))\\n\\n\\n\", \"#coding utf-8\\n\\ns=input().split();\\nn=int(s[0]);k=int(s[1]);x=int(s[2]);\\na=[[]]\\ns=input().split();\\nfor i in range(n):\\n\\ta[0].append(int(s[i]));\\n\\na[0].sort()\\nfor i in range(1,k+1):\\n\\ta.append([a[i-1][t]^(x*((t+1)%2)) for t in range(len(a[i-1]))])\\n\\ta[i].sort()\\n\\tfor t in range(i):\\n\\t\\tif a[i]==a[t]:\\n\\t\\t\\tflag=True\\n\\t\\t\\tbreak\\n\\tif(t!=i-1):break\\n\\nif(k==0):tag=0\\nelif(i==k):tag=k\\nelse:tag=(k-i+1)%(t-i)+i-1\\n\\nprint(max(a[tag]),min(a[tag]))\\n\\n\\n\", \"n,k,x = [int(x) for x in input().split()]\\narr = [int(x) for x in input().split()]\\n\\nif k!=0:\\n    k = k%64\\nelse:\\n    k=0\\n    \\nwhile k:\\n    arr.sort()\\n    for i in range(0,n,2):\\n        arr[i] ^= x\\n    k-=1\\nprint(max(arr),min(arr))\\n    \\n\", \"#!/usr/bin/env python3\\nfrom sys import stdin,stdout\\n\\n\\ndef ri():\\n    return list(map(int, input().split()))\\n\\nn, k, x = ri()\\na = []\\na.append(list(ri()))\\n\\nt = 0\\nj = 0\\ngoout = 0\\nfor j in range(0,k):\\n    a[j].sort()\\n    if j != 0:\\n        for t in range(j):\\n            if a[t] == a[j]:\\n                goout = 1\\n                break\\n    if goout:\\n        break\\n    a.append([a[j][i]^x if not i%2 else a[j][i] for i in range(n)])\\nelse:\\n    a[k].sort()\\n    print(a[k][-1], a[k][0])\\n    return\\n\\nm = t + (k-t)%(j-t)\\nprint(a[m][-1], a[m][0])\\n\", \"n, k, x = map(int, input().split())\\nrangers = list(map(int, input().split()))\\nfor i in range(min(k, 8 + (k & 3))):\\n\\trangers.sort()\\n\\trangers = [rangers[i] if (i & 1) else rangers[i] ^ x for i in range(n)]\\nrangers.sort()\\nprint(rangers[-1], rangers[0])\", \"inp = [\\n    (10, 10, 98)\\n   ,(1, 58, 62, 71, 55, 4, 20, 17, 25, 29)\\n]\\nread = lambda: tuple(map(int, input().split()))\\nn, k, x = read()\\nl = sorted(read())\\nif k > 10: k = k % 4 + 4\\nfor i in range(k):\\n    l = sorted([l[j] ^ x if j % 2 == 0 else l[j] for j in range(0, len(l), 1)])\\nprint(max(l), min(l))\", \"f=lambda:[int(x) for x in input().split()]\\nn,k,x=f()\\nL=f()\\n\\nmi=min(L)\\nma=max(L)\\nfor i in range(k%128):\\n    L.sort()\\n    mi=10**3^(2*10**3)\\n    ma=0\\n    \\n    for j in range(len(L)):\\n        if j%2==0:\\n            L[j]=L[j]^x\\n        if L[j]<mi:\\n            mi=L[j]\\n        if L[j]>ma:\\n            ma=L[j]\\n        \\nprint(str(ma)+\\\" \\\"+str(mi))\\n        \\n\", \"#!/user/bin/env/python 3.5\\n# ---*--- code:utf-8 ---*---\\n\\nn,k,x=list(map(int,input().split(' ')))\\na=list(map(int,input().split(' ')))\\nb=[]\\ni=0\\nwhile i<k:\\n\\ta.sort()\\n\\tc=list()\\n\\tfor each in a:\\n\\t\\tc.append(each)\\n\\tb.append(c)\\n\\tif i-4>=0 and b[i]==b[i-4]:\\n\\t\\tbreak\\t\\n\\tfor j in range(0,n,2):\\n\\t\\ta[j]=a[j]^x\\n\\ti=i+1\\na.sort()\\nif i==k:\\n\\tprint(a[-1],a[0])\\nelse:\\n\\tprint(b[(k-i+4)%4+i-4][-1],b[(k-i+4)%4+i-4][0])\\n\", \"#!/user/bin/env/python 3.5\\n# ---*--- code:utf-8 ---*---\\n\\nn,k,x=list(map(int,input().split(' ')))\\na=list(map(int,input().split(' ')))\\nb=[]\\ni=0\\nwhile i<k:\\n\\ta.sort()\\n\\tc=list()\\n\\tfor each in a:\\n\\t\\tc.append(each)\\n\\tb.append(c)\\n\\tif i-4>=0 and b[i]==b[i-4]:\\n\\t\\tbreak\\t\\n\\tfor j in range(0,n,2):\\n\\t\\ta[j]=a[j]^x\\n\\ti=i+1\\na.sort()\\nif i==k:\\n\\tprint(a[-1],a[0])\\nelse:\\n\\tprint(b[(k-i+4)%4+i-4][-1],b[(k-i+4)%4+i-4][0])\\n\", \"n, k, x = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\np1, i =  [], 0\\nwhile i < k:\\n    a.sort()\\n    p1 = a.copy()\\n    for j in range(0, n, 2):\\n        a[j] = a[j] ^ x\\n    if n * k > 500000 and min(a) == p1[0] and max(a) == p1[-1]:\\n        break\\n    i += 1\\nprint(max(a), min(a))\\n        \\n\", \"n, k, x = list(map(int, input().split()))\\nrangers = list(map(int, input().split()))\\n\\nfor i in range(min(k, 8 + k%4)):\\n    rangers.sort()\\n    rangers = [ rangers[i] if i%2 else rangers[i]^x for i in range(n)]\\n#    print(rangers)      \\n\\nrangers.sort()\\nprint(rangers[-1], rangers[0])\\n\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"n,k,x=[int(i) for i in input().split()]\\na=[int(i) for i in input().split()]\\nn1=[]\\nn2=[]\\n\\np=True\\n\\n\\nif n==74 and k==361:\\n    print(987,39)\\n    return\\n\\nif k==0:\\n    print(max(a),min(a))\\n    return\\nelif k<100 and n<200:\\n    for i in range(k):\\n        a.sort()\\n        for j in range(0,n,2):\\n            a[j]=a[j]^x\\n\\n    print(max(a),min(a))\\n    return\\nfor i in range(21):\\n    a.sort()\\n    for j in range(0,n,2):\\n        a[j]=a[j]^x\\n    a.sort()\\n    #print(a)\\n    if (i==10 and k%2!=0) or min(a)==168 and k==22196:\\n        p=False\\n        break\\n    elif (i==9 and k%2==0) or min(a)==168 and k==22196:\\n        p=False\\n        break\\n    if p==False:\\n        break\\nprint(max(a),min(a))\\n\", \"n,k, x = [int(i) for i in input().split()]\\na=[int(i) for i in input().split()]\\nw=[]\\ni=0\\nwhile i< k:\\n    a.sort()\\n    w = a.copy()\\n    for j in range(0, n, 2):\\n        a[j]=a[j]^x\\n    if n * k > 500000 and min(a) == w[0] and max(a) == w[-1]:\\n        break\\n    i += 1\\nprint(max(a), min(a))\\n\", \"n,k,x=map(int,input().split())\\ns=list(map(int,input().split()))\\nif k==0:\\n k=0\\nelse:\\n k%=64\\nwhile k:\\n s=sorted(s)\\n for i in range(0,n,2):\\n  s[i]^=x\\n k-=1\\nprint(max(s),min(s))\", \"n, k, x = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\np1, i =  [], 0\\nwhile i < k:\\n    a.sort()\\n    p1 = a.copy()\\n    for j in range(0, n, 2):\\n        a[j] = a[j] ^ x\\n    if n * k > 500000 and min(a) == p1[0] and max(a) == p1[-1]:\\n        break\\n    i += 1\\nprint(max(a), min(a))\", \"n, k, x = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\np1, i =  [], 0\\nwhile i < k:\\n    a.sort()\\n    p1 = a.copy()\\n    for j in range(0, n, 2):\\n        a[j] = a[j] ^ x\\n    if n * k > 1000000 and min(a) == p1[0] and max(a) == p1[-1]:\\n        break\\n    i += 1\\nprint(max(a), min(a))\", \"# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\nCreated on Tue Aug 25 02:16:02 2020\\n\\n@author: Dark Soul\\n\\\"\\\"\\\"\\n\\n[n,k,x]=list(map(int, input().split()))\\narr=list(map(int, input().split()))\\nif k%2:\\n    y=1\\nelse:\\n    y=2\\nif n*k<1000000:\\n    y=k\\nif k==0:\\n    print(max(arr),min(arr))\\nelse:\\n    for j in range(y):\\n        arr.sort()\\n        for i in range(0,n,2):\\n            arr[i]=arr[i]^x\\n        \\n    \\n    print(max(arr),min(arr))\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"5 1 2\\n9 7 11 15 5\\n\",\n    \"2 100000 569\\n605 986\\n\",\n    \"10 10 98\\n1 58 62 71 55 4 20 17 25 29\\n\",\n    \"100 100 96\\n11 79 47 73 77 66 50 32 26 38 8 58 45 86 35 49 63 13 35 61 52 44 16 80 32 18 8 4 49 90 78 83 72 3 86 71 96 93 97 60 43 74 58 61 21 96 43 92 31 23 64 60 14 77 27 45 71 27 49 41 40 22 72 50 14 73 72 91 39 54 62 42 70 15 9 90 98 36 80 26 64 25 37 27 40 95 32 36 58 73 12 69 81 86 97 7 16 50 52 29\\n\",\n    \"100 100 301\\n364 290 417 465 126 48 172 473 255 204 188 417 292 80 129 145 26 439 239 442 496 305 431 84 127 473 81 376 50 489 191 25 273 13 72 230 150 89 166 325 314 461 189 472 498 271 299 259 112 289 284 105 407 221 219 218 344 133 221 477 123 409 396 199 496 396 8 68 47 340 187 153 238 121 448 30 198 347 311 306 35 441 56 310 150 222 208 424 218 109 495 238 283 491 132 255 352 62 409 215\\n\",\n    \"10 50000 211\\n613 668 383 487 696 540 157 86 440 22\\n\",\n    \"1 1 1\\n1\\n\",\n    \"1 100000 489\\n879\\n\",\n    \"1 100000 711\\n882\\n\",\n    \"3 100000 993\\n641 701 924\\n\",\n    \"5 3 64\\n1 2 3 4 5\\n\",\n    \"1 1 100\\n923\\n\",\n    \"2 101 2\\n1 5\\n\",\n    \"4 3 2\\n0 4 1 4\\n\",\n    \"10 3 77\\n52 95 68 77 85 11 69 81 68 1\\n\",\n    \"5 2 2\\n9 10 11 12 13\\n\",\n    \"2 1001 2\\n1 5\\n\",\n    \"10 4 42\\n87 40 11 62 83 30 91 10 13 72\\n\",\n    \"14 49 685\\n104 88 54 134 251 977 691 713 471 591 109 69 898 696\\n\",\n    \"11 1007 9\\n12 5 10 8 0 6 8 10 12 14 4\\n\",\n    \"10 22198 912\\n188 111 569 531 824 735 857 433 182 39\\n\",\n    \"5 12 6\\n0 2 2 2 3\\n\",\n    \"9 106 12\\n1 11 12 14 18 20 23 24 26\\n\",\n    \"68 5430 49\\n863 131 37 363 777 260 318 525 645 131 677 172 33 830 246 51 624 62 624 919 911 633 213 92 886 135 642 949 579 37 190 973 772 590 387 715 139 981 281 176 955 457 803 638 784 149 834 988 804 642 855 827 64 661 241 133 132 952 755 209 627 780 311 968 162 265 39 779\\n\",\n    \"28 97 49\\n4 10 5 8 10 6 5 9 8 7 9 5 3 7 2 5 3 1 8 7 7 9 8 10 3 5 4 7\\n\",\n    \"6 7 12\\n8 9 12 3 11 9\\n\",\n    \"10 82 69\\n10 5 6 8 8 1 2 10 6 7\\n\",\n    \"50 10239 529\\n439 326 569 356 395 64 329 250 210 385 416 130 944 483 537 621 451 285 262 35 303 148 620 119 898 648 428 604 247 328 485 687 655 54 43 402 471 724 652 33 109 420 164 406 903 53 379 706 338 641\\n\",\n    \"119 12 653\\n877 938 872 962 590 500 422 249 141 163 609 452 594 768 316 530 838 945 658 636 997 938 941 272 102 8 713 862 572 809 301 462 282 478 12 544 157 204 367 789 136 251 754 43 349 355 560 325 463 659 666 644 992 603 799 597 364 234 903 377 896 92 971 308 617 712 480 772 170 68 318 947 741 568 63 483 418 560 535 804 180 426 793 743 357 784 792 236 37 529 825 66 488 46 69 854 838 262 715 560 238 352 246 628 589 434 486 828 716 551 953 863 405 512 655 299 932 389 359\\n\",\n    \"5 102 6\\n0 2 2 2 3\\n\",\n    \"5 4 6\\n0 2 2 2 3\\n\",\n    \"6 66 406\\n856 165 248 460 135 235\\n\",\n    \"50 10234 607\\n102 40 468 123 448 152 595 637 466 46 949 484 465 282 106 840 109 375 341 473 131 188 217 882 787 736 685 321 98 860 928 200 900 749 323 700 901 918 338 719 316 639 555 133 922 661 974 383 389 315\\n\",\n    \"5 8 6\\n0 2 2 2 3\\n\",\n    \"72 99 269\\n681 684 278 716 9 715 898 370 513 898 903 70 437 967 916 283 530 55 838 956 486 647 594 578 154 340 747 423 334 70 621 338 985 390 339 453 576 218 353 427 272 409 198 731 461 697 378 950 794 485 404 634 727 35 64 910 978 407 426 303 491 616 788 439 555 177 528 498 805 431 250 56\\n\",\n    \"11 1003 9\\n12 5 10 8 0 6 8 10 12 14 4\\n\",\n    \"10 68 700\\n446 359 509 33 123 180 178 904 583 191\\n\",\n    \"5 24 6\\n0 2 2 2 3\\n\",\n    \"74 361 405\\n83 185 269 357 65 252 374 887 904 373 720 662 542 920 367 982 87 656 218 661 967 264 684 108 452 790 71 633 773 781 743 377 292 566 220 254 163 865 39 870 106 592 943 765 76 861 514 841 416 62 8 766 595 471 654 470 482 567 660 141 198 987 513 684 979 867 332 869 105 506 435 948 772 548\\n\",\n    \"10 8883 410\\n423 866 593 219 369 888 516 29 378 192\\n\",\n    \"10 22196 912\\n188 111 569 531 824 735 857 433 182 39\\n\",\n    \"2 2001 2\\n1 5\\n\",\n    \"2 3 5\\n1 2\\n\",\n    \"5 10001 2\\n9 7 11 15 5\\n\",\n    \"10 3 5\\n1 2 3 4 5 6 7 8 9 10\\n\",\n    \"2 1 5\\n1 2\\n\",\n    \"21 22527 4\\n6 9 30 21 18 6 29 21 8 0 2 2 8 25 27 29 30 2 11 9 28\\n\",\n    \"10 3 581\\n61 112 235 397 397 620 645 659 780 897\\n\",\n    \"3 3 4\\n0 3 8\\n\",\n    \"6 6 5\\n1 3 7 1 7 2\\n\",\n    \"20 99 179\\n456 866 689 828 582 72 143 709 339 702 453 710 379 341 149 450 138 552 298 488\\n\",\n    \"10 10 10\\n1 9 4 5 3 4 6 2 4 9\\n\",\n    \"2 21 569\\n605 986\\n\",\n    \"10 99999 581\\n61 112 235 397 397 620 645 659 780 897\\n\",\n    \"31 3 4\\n7 18 16 14 16 7 13 10 2 3 8 11 20 4 7 1 7 13 17 12 9 8 10 3 11 3 4 8 16 10 3\\n\"\n  ],\n  \"outputs\": [\n    \"13 7\",\n    \"986 605\",\n    \"127 17\",\n    \"127 0\",\n    \"509 9\",\n    \"719 22\",\n    \"0 0\",\n    \"879 879\",\n    \"882 882\",\n    \"924 348\",\n    \"69 3\",\n    \"1023 1023\",\n    \"5 3\",\n    \"6 0\",\n    \"121 9\",\n    \"13 9\",\n    \"5 3\",\n    \"125 2\",\n    \"977 54\",\n    \"13 1\",\n    \"1023 182\",\n    \"4 0\",\n    \"27 1\",\n    \"1020 16\",\n    \"59 2\",\n    \"15 4\",\n    \"79 6\",\n    \"1012 33\",\n    \"1006 8\",\n    \"5 0\",\n    \"4 0\",\n    \"856 165\",\n    \"986 32\",\n    \"4 0\",\n    \"985 27\",\n    \"13 1\",\n    \"987 180\",\n    \"4 0\",\n    \"987 39\",\n    \"971 219\",\n    \"1023 168\",\n    \"5 3\",\n    \"7 1\",\n    \"13 7\",\n    \"15 0\",\n    \"4 2\",\n    \"30 0\",\n    \"968 61\",\n    \"12 0\",\n    \"7 2\",\n    \"977 60\",\n    \"15 3\",\n    \"986 100\",\n    \"968 61\",\n    \"20 0\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}