{
    "problem": "You are an expert Python programmer, and here is your task: There are $n$ points on the plane, the $i$-th of which is at $(x_i, y_i)$. Tokitsukaze wants to draw a strange rectangular area and pick all the points in the area.\n\nThe strange area is enclosed by three lines, $x = l$, $y = a$ and $x = r$, as its left side, its bottom side and its right side respectively, where $l$, $r$ and $a$ can be any real numbers satisfying that $l < r$. The upper side of the area is boundless, which you can regard as a line parallel to the $x$-axis at infinity. The following figure shows a strange rectangular area. [Image] \n\nA point $(x_i, y_i)$ is in the strange rectangular area if and only if $l < x_i < r$ and $y_i > a$. For example, in the above figure, $p_1$ is in the area while $p_2$ is not.\n\nTokitsukaze wants to know how many different non-empty sets she can obtain by picking all the points in a strange rectangular area, where we think two sets are different if there exists at least one point in one set of them but not in the other.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 2 \\times 10^5$)\u00a0\u2014 the number of points on the plane.\n\nThe $i$-th of the next $n$ lines contains two integers $x_i$, $y_i$ ($1 \\leq x_i, y_i \\leq 10^9$)\u00a0\u2014 the coordinates of the $i$-th point.\n\nAll points are distinct.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of different non-empty sets of points she can obtain.\n\n\n-----Examples-----\nInput\n3\n1 1\n1 2\n1 3\n\nOutput\n3\n\nInput\n3\n1 1\n2 1\n3 1\n\nOutput\n6\n\nInput\n4\n2 1\n2 2\n3 1\n3 2\n\nOutput\n6\n\n\n\n-----Note-----\n\nFor the first example, there is exactly one set having $k$ points for $k = 1, 2, 3$, so the total number is $3$.\n\nFor the second example, the numbers of sets having $k$ points for $k = 1, 2, 3$ are $3$, $2$, $1$ respectively, and their sum is $6$.\n\nFor the third example, as the following figure shows, there are  $2$ sets having one point;  $3$ sets having two points;  $1$ set having four points. \n\nTherefore, the number of different non-empty sets in this example is $2 + 3 + 0 + 1 = 6$. [Image]",
    "solution": "[\"import sys\\nimport copy\\ninput = sys.stdin.readline\\n\\nn=int(input())\\nP=[list(map(int,input().split())) for i in range(n)]\\n\\nSET_X=set()\\nSET_Y=set()\\n\\nfor x,y in P:\\n    SET_X.add(x)\\n    SET_Y.add(y)\\n\\nCX=sorted(SET_X)\\nCY=sorted(SET_Y)\\n\\nLEN=len(CX)\\nMAX=len(CX)-1\\n\\nDICT_X={x:i for i,x in enumerate(CX)}\\nDICT_Y={x:i for i,x in enumerate(CY)}\\n\\nfor i in range(n):\\n    P[i]=[DICT_X[P[i][0]],DICT_Y[P[i][1]]]\\n\\ncheck=[0]*len(CX)\\n\\n# BIT(BIT-indexed tree)\\n\\nBIT=[0]*(LEN+1)# 1-indexed\\u306atree\\n\\ndef update(v,w):# v\\u306bw\\u3092\\u52a0\\u3048\\u308b\\n    while v<=LEN:\\n        BIT[v]+=w\\n        v+=(v&(-v))# \\u81ea\\u5206\\u3092\\u542b\\u3080\\u5927\\u304d\\u306a\\u30ce\\u30fc\\u30c9\\u3078. \\u305f\\u3068\\u3048\\u3070v=3\\u2192v=4\\n\\ndef getvalue(v):# [1,v]\\u306e\\u533a\\u9593\\u306e\\u548c\\u3092\\u6c42\\u3081\\u308b\\n    ANS=0\\n    while v!=0:\\n        ANS+=BIT[v]\\n        v-=(v&(-v))# \\u81ea\\u5206\\u3088\\u308a\\u5c0f\\u3055\\u30442\\u30d9\\u30ad\\u306e\\u30ce\\u30fc\\u30c9\\u3078. \\u305f\\u3068\\u3048\\u3070v=3\\u2192v=2\\u3078\\n    return ANS\\n\\n\\nLIST_Y=[[] for i in range(len(CY))]\\nfor x,y in P:\\n    LIST_Y[y].append(x)\\n\\nfor i in range(len(CY)):\\n    LIST_Y[i].sort()\\n\\nANS=0\\nfor y in range(len(CY)-1,-1,-1):\\n    for x in LIST_Y[y]:\\n        #print(x,check)\\n        if check[x]==0:\\n            check[x]=1\\n            update(x+1,1)\\n\\n    ANS+=getvalue(LIST_Y[y][0]+1)*(getvalue(MAX+1)-getvalue(LIST_Y[y][0]+1)+1)\\n\\n    for i in range(1,len(LIST_Y[y])):\\n        #print(getvalue(LIST_Y[y][i]+1)-getvalue(LIST_Y[y][i-1]+1)),getvalue(MAX+1)\\n        ANS+=(getvalue(LIST_Y[y][i]+1)-getvalue(LIST_Y[y][i-1]+1))*(getvalue(MAX+1)-getvalue(LIST_Y[y][i]+1)+1)\\n\\n    #print(ANS)\\n\\nprint(ANS)\\n\\n        \\n        \\n        \\n\"]",
    "test": "{\n  \"inputs\": [\n    \"3\\n1 1\\n1 2\\n1 3\\n\",\n    \"3\\n1 1\\n2 1\\n3 1\\n\",\n    \"4\\n2 1\\n2 2\\n3 1\\n3 2\\n\",\n    \"5\\n3 6\\n5 10\\n4 3\\n2 1\\n1 3\\n\",\n    \"1\\n1000000000 1000000000\\n\",\n    \"4\\n1 1\\n1 1000000000\\n1000000000 1\\n1000000000 1000000000\\n\",\n    \"5\\n1 2\\n2 1\\n2 2\\n2 3\\n3 2\\n\",\n    \"7\\n1 1\\n1 4\\n1 5\\n2 1\\n3 3\\n4 2\\n5 2\\n\",\n    \"8\\n1 3\\n2 1\\n2 5\\n2 6\\n3 1\\n4 4\\n5 2\\n6 2\\n\",\n    \"35\\n4 2\\n9 6\\n3 10\\n2 5\\n7 9\\n6 9\\n10 7\\n6 6\\n5 4\\n4 10\\n5 9\\n8 1\\n2 4\\n9 9\\n5 7\\n6 5\\n10 4\\n8 9\\n5 8\\n1 3\\n5 1\\n8 4\\n7 5\\n9 5\\n9 10\\n9 4\\n6 10\\n8 5\\n6 7\\n3 4\\n8 7\\n7 1\\n4 7\\n3 6\\n3 3\\n\",\n    \"9\\n1 3\\n5 1\\n2 2\\n2 3\\n3 2\\n3 1\\n3 3\\n4 2\\n4 1\\n\",\n    \"2\\n100000 5\\n100000 6\\n\",\n    \"2\\n7 100000\\n5 100000\\n\",\n    \"1\\n481199252 167959139\\n\",\n    \"10\\n500000000 1\\n500000001 2\\n499999999 3\\n500000002 4\\n499999998 5\\n500000003 6\\n499999997 7\\n500000004 8\\n499999996 9\\n500000005 10\\n\",\n    \"28\\n4 4\\n9 2\\n8 6\\n10 2\\n5 8\\n3 2\\n2 3\\n3 7\\n7 2\\n5 7\\n3 9\\n1 10\\n3 3\\n2 1\\n5 1\\n10 8\\n10 3\\n8 1\\n9 3\\n5 9\\n2 2\\n2 4\\n4 2\\n6 7\\n7 3\\n2 9\\n8 2\\n2 6\\n\",\n    \"30\\n9 1\\n1 6\\n2 10\\n6 8\\n5 5\\n5 10\\n8 6\\n10 8\\n7 7\\n8 5\\n6 4\\n1 5\\n8 4\\n4 6\\n7 3\\n5 1\\n9 2\\n5 6\\n5 9\\n10 9\\n7 8\\n5 2\\n6 3\\n10 5\\n9 8\\n10 2\\n3 5\\n7 10\\n10 6\\n2 6\\n\",\n    \"27\\n4 3\\n10 8\\n1 6\\n6 9\\n2 10\\n2 2\\n9 1\\n5 4\\n3 8\\n4 7\\n6 6\\n1 10\\n9 2\\n4 4\\n7 10\\n10 2\\n3 4\\n4 5\\n2 5\\n1 2\\n2 1\\n1 7\\n10 5\\n5 2\\n1 3\\n8 6\\n6 10\\n\",\n    \"35\\n8 1\\n6 8\\n4 1\\n1 2\\n1 4\\n5 10\\n10 8\\n9 1\\n9 9\\n10 2\\n6 5\\n8 8\\n7 6\\n10 6\\n9 4\\n4 9\\n3 2\\n1 8\\n3 9\\n7 3\\n3 7\\n2 7\\n3 8\\n3 1\\n2 2\\n5 5\\n7 2\\n4 10\\n6 3\\n5 1\\n8 10\\n4 3\\n9 8\\n9 7\\n3 10\\n\",\n    \"28\\n2 2\\n2 7\\n10 7\\n7 8\\n10 2\\n5 2\\n8 2\\n10 4\\n3 5\\n3 3\\n3 10\\n4 8\\n9 7\\n3 9\\n5 7\\n6 4\\n6 1\\n9 8\\n4 3\\n8 6\\n1 1\\n9 5\\n1 10\\n2 1\\n7 4\\n5 10\\n3 1\\n9 3\\n\",\n    \"29\\n1 10\\n5 5\\n2 4\\n8 6\\n7 9\\n9 10\\n8 1\\n8 4\\n3 5\\n8 5\\n2 10\\n3 8\\n10 2\\n1 4\\n10 8\\n4 5\\n5 9\\n5 7\\n3 9\\n6 1\\n3 3\\n4 10\\n4 8\\n6 3\\n1 8\\n6 5\\n2 9\\n8 3\\n7 2\\n\",\n    \"33\\n10 5\\n2 8\\n4 3\\n8 4\\n4 2\\n8 9\\n4 9\\n5 1\\n5 6\\n6 2\\n1 3\\n5 4\\n2 2\\n5 7\\n3 9\\n8 7\\n3 5\\n10 2\\n3 6\\n9 8\\n8 3\\n9 2\\n8 1\\n9 10\\n1 8\\n4 6\\n2 4\\n7 1\\n6 10\\n2 5\\n3 7\\n1 4\\n6 4\\n\",\n    \"25\\n8 7\\n4 1\\n3 4\\n8 4\\n8 2\\n10 7\\n2 2\\n2 9\\n4 10\\n4 5\\n2 10\\n6 5\\n4 7\\n1 5\\n2 5\\n10 5\\n2 1\\n2 6\\n3 3\\n6 4\\n4 3\\n1 10\\n6 7\\n5 3\\n9 4\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"19\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"11\\n\",\n    \"20\\n\",\n    \"30\\n\",\n    \"286\\n\",\n    \"27\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"125\\n\",\n    \"223\\n\",\n    \"281\\n\",\n    \"243\\n\",\n    \"316\\n\",\n    \"277\\n\",\n    \"302\\n\",\n    \"277\\n\",\n    \"180\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}