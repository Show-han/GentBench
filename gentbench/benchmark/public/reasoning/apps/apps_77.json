{
    "problem": "You are an expert Python programmer, and here is your task: Kevin and Nicky Sun have invented a new game called Lieges of Legendre. In this game, two players take turns modifying the game state with Kevin moving first. Initially, the game is set up so that there are n piles of cows, with the i-th pile containing a_{i} cows. During each player's turn, that player calls upon the power of Sunlight, and uses it to either:\n\n  Remove a single cow from a chosen non-empty pile.  Choose a pile of cows with even size 2\u00b7x (x > 0), and replace it with k piles of x cows each. \n\nThe player who removes the last cow wins. Given n, k, and a sequence a_1, a_2, ..., a_{n}, help Kevin and Nicky find the winner, given that both sides play in optimal way.\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9).\n\nThe second line contains n integers, a_1, a_2, ... a_{n} (1 \u2264 a_{i} \u2264 10^9) describing the initial state of the game. \n\n\n-----Output-----\n\nOutput the name of the winning player, either \"Kevin\" or \"Nicky\" (without quotes).\n\n\n-----Examples-----\nInput\n2 1\n3 4\n\nOutput\nKevin\n\nInput\n1 2\n3\n\nOutput\nNicky\n\n\n\n-----Note-----\n\nIn the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.",
    "solution": "[\"def grundy(n, k):\\n    if k % 2 == 0:\\n        if n <= 2:\\n            return n\\n        else:\\n            return n % 2 == 0\\n    else:\\n        if n <= 4:\\n            return [0, 1, 0, 1, 2][n]\\n        elif n % 2 == 1:\\n            return 0\\n        else:\\n            return 2 if grundy(n // 2, k) == 1 else 1\\n\\n\\ndef __starting_point():\\n    n, k = list(map(int, input().split()))\\n    xList = list(map(int, input().split()))\\n    res = 0\\n    for x in xList:\\n        res ^= grundy(x, k)\\n    print(\\\"Kevin\\\" if res else \\\"Nicky\\\")\\n\\n\\n__starting_point()\", \"f = lambda: map(int, input().split())\\nn, k = f()\\ns = 0\\nfor a in f():\\n    d = 0\\n    while a % (2 << d) == 0: d += 1\\n    x = a & 1 if a < 4 else 0 if a & 1 else 1 if (a == 3 << d) ^ (d & 1) else 2\\n    y = a if a < 3 else a & 1 ^ 1\\n    s ^= x if k & 1 else y\\nprint('Kevin' if s else 'Nicky')\", \"f = lambda: map(int, input().split())\\nn, k = f()\\ns = 0\\nfor a in f():\\n    d = 0\\n    while a & 1 << d == 0: d += 1\\n    t = (a == 3 << d) ^ (d & 1)\\n    x = a & 1 if a < 4 else 0 if a & 1 else 2 - t\\n    y = a if a < 3 else a & 1 ^ 1\\n    s ^= x if k & 1 else y\\nprint('Kevin' if s else 'Nicky')\", \"f = lambda: list(map(int, input().split()))\\n\\nn, k = f()\\n\\ns = 0\\n\\nfor a in f():\\n\\n    d = 0\\n\\n    while a & 1 << d == 0: d += 1\\n\\n    t = (a == 3 << d) ^ (d & 1)\\n\\n    x = a & 1 if a < 4 else 0 if a & 1 else 2 - t\\n\\n    y = a if a < 3 else a & 1 ^ 1\\n\\n    s ^= x if k & 1 else y\\n\\nprint('Kevin' if s else 'Nicky')\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"2 1\\n3 4\\n\",\n    \"1 2\\n3\\n\",\n    \"4 5\\n20 21 22 25\\n\",\n    \"5 1\\n1 7 7 6 6\\n\",\n    \"7 1\\n8 6 10 10 1 5 8\\n\",\n    \"10 1\\n2 3 5 2 7 4 7 7 4 2\\n\",\n    \"10 1\\n5 6 3 10 6 6 1 1 5 3\\n\",\n    \"6 1\\n1 4 4 4 2 2\\n\",\n    \"10 2\\n3 10 10 8 6 10 9 9 5 7\\n\",\n    \"6 2\\n5 3 5 6 2 2\\n\",\n    \"9 2\\n8 2 9 4 7 5 2 4 9\\n\",\n    \"9 2\\n2 8 4 2 5 7 1 8 10\\n\",\n    \"7 2\\n9 1 7 6 10 3 5\\n\",\n    \"2 2\\n1 2\\n\",\n    \"2 2\\n2 2\\n\",\n    \"4 100\\n2 1 2 2\\n\",\n    \"2 2\\n2 3\\n\",\n    \"2 2\\n2 4\\n\",\n    \"2 2\\n2 5\\n\",\n    \"2 2\\n2 6\\n\",\n    \"2 1\\n24 1\\n\",\n    \"1 1\\n1000000000\\n\",\n    \"1 1\\n1\\n\",\n    \"2 3\\n12345678 23456789\\n\",\n    \"2 1\\n160 150\\n\",\n    \"2 3\\n1000000000 1000000000\\n\",\n    \"2 3\\n7 7\\n\",\n    \"1 1\\n111111112\\n\",\n    \"3 2\\n1 1 1\\n\",\n    \"1 2\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"Kevin\\n\",\n    \"Nicky\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Nicky\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Nicky\\n\",\n    \"Nicky\\n\",\n    \"Nicky\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\",\n    \"Kevin\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}