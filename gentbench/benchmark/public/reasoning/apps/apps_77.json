{
    "problem": "You are an expert Python programmer, and here is your task: Leha decided to move to a quiet town Vi\u010dkopolis, because he was tired by living in Bankopolis. Upon arrival he immediately began to expand his network of hacked computers. During the week Leha managed to get access to n computers throughout the town. Incidentally all the computers, which were hacked by Leha, lie on the same straight line, due to the reason that there is the only one straight street in Vi\u010dkopolis.\n\nLet's denote the coordinate system on this street. Besides let's number all the hacked computers with integers from 1 to n. So the i-th hacked computer is located at the point x_{i}. Moreover the coordinates of all computers are distinct. \n\nLeha is determined to have a little rest after a hard week. Therefore he is going to invite his friend Noora to a restaurant. However the girl agrees to go on a date with the only one condition: Leha have to solve a simple task.\n\nLeha should calculate a sum of F(a) for all a, where a is a non-empty subset of the set, that consists of all hacked computers. Formally, let's denote A the set of all integers from 1 to n. Noora asks the hacker to find value of the expression $\\sum_{a \\subseteq A, a \\neq \\varnothing} F(a)$. Here F(a) is calculated as the maximum among the distances between all pairs of computers from the set a. Formally, $F(a) = \\operatorname{max}_{i, j \\in a}|x_{i} - x_{j}|$. Since the required sum can be quite large Noora asks to find it modulo 10^9 + 7.\n\nThough, Leha is too tired. Consequently he is not able to solve this task. Help the hacker to attend a date.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b710^5) denoting the number of hacked computers.\n\nThe second line contains n integers x_1, x_2, ..., x_{n} (1 \u2264 x_{i} \u2264 10^9) denoting the coordinates of hacked computers. It is guaranteed that all x_{i} are distinct.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the required sum modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n2\n4 7\n\nOutput\n3\n\nInput\n3\n4 3 1\n\nOutput\n9\n\n\n\n-----Note-----\n\nThere are three non-empty subsets in the first sample test:$\\{4 \\}$, $\\{7 \\}$ and $\\{4,7 \\}$. The first and the second subset increase the sum by 0 and the third subset increases the sum by 7 - 4 = 3. In total the answer is 0 + 0 + 3 = 3.\n\nThere are seven non-empty subsets in the second sample test. Among them only the following subsets increase the answer: $\\{4,3 \\}$, $\\{4,1 \\}$, $\\{3,1 \\}$, $\\{4,3,1 \\}$. In total the sum is (4 - 3) + (4 - 1) + (3 - 1) + (4 - 1) = 9.",
    "solution": "[\"3\\n# Copyright (C) 2017 Sayutin Dmitry.\\n#\\n# This program is free software; you can redistribute it and/or\\n# modify it under the terms of the GNU General Public License as\\n# published by the Free Software Foundation; version 3\\n#\\n# This program is distributed in the hope that it will be useful,\\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n# GNU General Public License for more details.\\n#\\n# You should have received a copy of the GNU General Public License\\n# along with this program; If not, see <http://www.gnu.org/licenses/>.\\n\\ndef main():\\n    mod = 10 ** 9 + 7\\n    pws = [None for i in range(4 * (10 ** 5))]\\n    pws[0] = 1\\n    for i in range(1, (4 * (10 ** 5))):\\n        pws[i] = 2 * pws[i - 1] % mod\\n    \\n    n = int(input())\\n    seq = list(map(int, input().split()))\\n\\n    seq.sort()\\n    \\n    ans = 0\\n    for i in range(n):\\n        ans += seq[i] * (pws[i] - 1)\\n        ans -= seq[i] * (pws[n - i - 1] - 1)\\n        ans = ans % mod\\n    print(ans)\\n\\nmain()\\n\", \"n = int(input())\\nx = sorted(map(int, input().split()))\\nmod = 10 ** 9 + 7\\nans, deg = 0, 1\\ndp = [0] * n\\nfor i in range(1, n):\\n    deg = (deg << 1) % mod\\n    dp[i] = (2 * dp[i - 1] + (x[i] - x[i - 1]) * (deg - 1)) % mod\\n    ans = (ans + dp[i]) % mod\\nprint(ans)\", \"import sys\\nimport math\\n\\nMOD = int(1e9 + 7)\\nline = lambda: list(map(int, input().split()))\\n\\ndef solve():\\n    n = int(input())\\n    x = [x for x in line()]\\n    x.sort()\\n    p2 = []\\n    p2.append(1)\\n    for i in range(1, n):\\n        p2.append(p2[i - 1] * 2 % MOD)\\n    ans = 0\\n    for i in range(n):\\n        ans += x[i] * (p2[i] - p2[n - i - 1] + MOD)\\n        ans %= MOD\\n    print(ans)\\n\\ndef main():\\n    solve()\\n    return\\n\\nmain()\\n\", \"import sys\\n\\nmod = 10**9 + 7\\n\\ndef solve():\\n    n = int(input())\\n    x = [int(i) for i in input().split()]\\n    x.sort()\\n\\n    ans = 0\\n\\n    p2 = [1] * (n + 1)\\n    for i in range(n):\\n        p2[i + 1] = (p2[i] * 2) % mod\\n\\n    for i in range(n - 1):\\n        length = x[i + 1] - x[i]\\n\\n        ans = (ans + length * (p2[i + 1] - 1) * (p2[n - 1 - i] - 1)) % mod\\n\\n    print(ans)\\n\\ndef __starting_point():\\n    solve()\\n__starting_point()\", \"n = int(input())\\nans = 0\\nMOD = int(10**9 + 7)\\na = [int(x) for x in input().split()]\\na.sort()\\npo = [1]\\nfor i in range(1,n):\\n    po.append(po[i-1]*2%MOD)\\n\\nfor i in range(n):\\n    ans += a[i]*(po[i] - po[n-i-1] + MOD)\\n    ans %= MOD\\n\\nprint(ans)\\n    \\n\", \"def main():\\n    mod = 10 ** 9 + 7\\n    pws = [None for i in range(4 * (10 ** 5))]\\n    pws[0] = 1\\n    for i in range(1, (4 * (10 ** 5))):\\n        pws[i] = 2 * pws[i - 1] % mod\\n    \\n    n = int(input())\\n    seq = list(map(int, input().split()))\\n\\n    seq.sort()\\n    \\n    ans = 0\\n    for i in range(n):\\n        ans += seq[i] * (pws[i] - 1)\\n        ans -= seq[i] * (pws[n - i - 1] - 1)\\n        ans = ans % mod\\n    print(ans)\\n\\nmain()\", \"n = int(input())\\na = sorted(list(map(int, input().split())))\\nbase = 10**9 + 7\\nd = [1]\\nfor i in range(n):\\n    d.append((2*d[-1]) % base)\\nans = 0\\nfor i in range(1, len(a)):\\n    diff = a[i] - a[i-1]\\n    add = diff*(d[i]-1)*(d[n - i]-1) % base\\n    ans += add\\n    ans = ans % base\\nprint(ans)\", \"n = int(input())\\nl = list(map(int, input().strip().split(' ')))\\np =1\\nl.sort()\\nlength = len(l)\\nans  = 0\\nfor i in range(len(l)) :\\n  ans += p*(l[i]-l[length-i-1])\\n  p*=2\\n  p  %=1000000007\\n  ans%=1000000007\\n\\nprint(int(ans))\", \"#!/usr/bin/pypy3\\n\\nfrom sys import stdin,stderr\\nfrom random import shuffle\\n\\ndef readInts(): return map(int,stdin.readline().strip().split())\\ndef print_err(*args,**kwargs): print(*args,file=stderr,**kwargs)\\n    \\ndef solve(vs):\\n    modval = 10**9+7\\n    return all_f(vs)\\n\\ndef expnm(a,b,m):\\n    if b==0: return 1\\n    if b%2 == 0: return expnm(a*a%m,b//2,m)\\n    return (a*expnm(a,b-1,m)%m)\\n\\ndef expnm2(a,b,m):\\n    #print(a,b)\\n    out = 1\\n    mult = a\\n    while b > 0:\\n        if b%2 == 0:\\n            mult *= mult\\n            b //= 2\\n        else:\\n            out *= mult\\n            b -= 1\\n        out %= m\\n    return out\\n\\ndef all_f_naive(ns):\\n    n = len(ns)\\n    ns.sort()\\n    out = 0\\n    m = 10**9+7\\n    for x1ix in range(n-1):\\n        for x2ix in range(x1ix+1,n):\\n            c = x2ix-x1ix-1\\n            d = ns[x2ix]-ns[x1ix]\\n            out += d * (expnm(2,c,m))\\n            out %= m\\n    return out\\n\\ndef twos(n,m):\\n    v = 1\\n    out = []\\n    for _ in range(n+1):\\n        out.append(v)\\n        v <<= 1\\n        v %= m\\n    return out\\n\\ndef all_f(ns):\\n    n = len(ns)\\n    ns.sort()\\n    out = 0\\n    m = 10**9+7\\n    t = twos(n,m)\\n    for x1ix in range(n):\\n        v = ns[x1ix] * t[x1ix]\\n        v %= m\\n        out += v\\n        out %= m\\n        v = ns[x1ix] * t[n-x1ix-1]\\n        v %= m\\n        out -= v\\n        out %= m\\n    return out\\n\\ndef all_f3(ns):\\n    n = len(ns)\\n    ns.sort()\\n    out = 0\\n    m = 10**9+7\\n    for x1ix in range(n):\\n        v = ns[x1ix] * expnm(2,x1ix,m)\\n        v %= m\\n        out += v\\n        out %= m\\n        v = ns[x1ix] * expnm(2,n-x1ix-1,m)\\n        v %= m\\n        out -= v\\n        out %= m\\n    return out\\n\\ndef all_f2(ns):\\n    n = len(ns)\\n    ns.sort()\\n    out = 0\\n    m = 10**9+7\\n    for x1ix in range(n):\\n        v = ns[x1ix] * expnm2(2,x1ix,m)\\n        v %= m\\n        out += v\\n        out %= m\\n        v = ns[x1ix] * expnm2(2,n-x1ix-1,m)\\n        v %= m\\n        out -= v\\n        out %= m\\n    return out\\n\\ndef run():\\n    n, = readInts()    \\n    vs = list(readInts())\\n    print(solve(vs))\\n        \\nrun()\\n\", \"R, n, x, p, v = 10 ** 9 + 7, int(input()), sorted(map(int, input().split())), [1], 0\\nfor i in range(1, n):\\n    p.append(2 * p[-1] % R)\\nprint(sum((x[i] - x[i - 1]) * (p[i] - 1) * (p[n - i] - 1) for i in range(1, n)) % R)\", \"n=int(input())\\nR= lambda: map(int, input().split())\\nl= list(R())\\nl.sort()\\ns,m=0,1000000007\\nfor i in range(n):\\n    s= (s+l[i]*(pow(2,i,m)-pow(2,n-1-i,m)))%m\\nprint(s)\", \"n, x = int(input()), list(sorted(list(map(int, input().split()))))\\nkk = 1\\na = 0\\nfor i in range(len(x)):\\n    a += (x[i] - x[len(x) - i - 1]) * kk\\n    kk *= 2\\n    kk %= 1000000007\\n    a %= 1000000007\\nprint(a)\", \"n=int(input())\\nV=list(map (int,input().split()))\\nV.sort()\\nMod=int(1e9+7)\\nSum=0\\np=[1]\\nfor i in range(n):\\n    p.append(p[i]*2%Mod)\\nfor i in range(n-1):\\n    l=(p[i+1]+Mod-1)%Mod\\n    r=(p[n-i-1]-1+Mod)%Mod\\n    Sum=(Sum+(V[i+1]-V[i])*l*r)%Mod\\nprint(int(Sum))\\n\", \"n, x = int(input()), list(sorted(list(map(int, input().split()))))\\n\\nkk = 1\\n\\na = 0\\n\\nfor i in range(len(x)):\\n\\n    a += (x[i] - x[len(x) - i - 1]) * kk\\n\\n    kk *= 2\\n\\n    kk %= 1000000007\\n\\n    a %= 1000000007\\n\\nprint(a)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"n=int(input())\\nl=[int(i) for i in input().split()]\\nsm=0 \\nMOD=10**9+7 \\nadd=0 \\nsub=0 \\nl.sort()\\np=3*(10**5)+9 \\npow2=[0]*p \\npow2[0]=1 \\nfor i in range(1,p):\\n    pow2[i]=(pow2[i-1]*2)%MOD\\nfor i in range(n):\\n    add+=l[i]*(pow2[i])\\n    sub+=l[i]*(pow2[n-i-1])\\nprint((add-sub+MOD)%MOD)\", \"n, ans, m, s = int(input()), 0, 1000000007, [0]\\na = sorted(map(int, input().split()))\\nfor i in range(1, n):\\n    s.append((2 * s[i - 1] + a[i - 1]) % m)\\n    ans += ((pow(2, i, m) - 1) * a[i] - s[i]) % m\\nprint(ans % m)\", \"N = int(3e5+3)\\nMOD = int(1e9+7)\\npow2 = [1] * N\\nfor i in range(1, N):\\n    pow2[i] = pow2[i-1] * 2 % MOD\\n\\nn = int(input())\\narr = list(map(int, input().split()))\\narr.sort()\\n\\ndef add(x, y):\\n    return ((x % MOD + MOD) + (y % MOD + MOD) + MOD) % MOD\\ndef substract(x, y):\\n    return ((x % MOD + MOD) - (y % MOD + MOD) + MOD) % MOD\\ndef multiple(x, y):\\n    return ((x % MOD) * (y % MOD)) % MOD\\n\\nres = 0\\nfor i in range(1, n):\\n    diff = arr[i] - arr[i-1]\\n    cnt = multiple(substract(pow2[i], 1), substract(pow2[n-i], 1))\\n    res = add(res, multiple(cnt, diff))\\nprint(res)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nn = int(input())\\nx = list(map(int, input().split()))\\nx.sort()\\nans = 0\\nMOD = 10**9+7\\n\\nfor i in range(n-1):\\n    d = x[i+1]-x[i]\\n    l = pow(2, i+1, MOD)-1\\n    r = pow(2, n-i-1, MOD)-1\\n    ans += d*l*r\\n    ans %= MOD\\n\\nprint(ans)\", \"n = int(input())\\nar = list(map(int,input().split()))\\nar.sort()\\nMOD = 10**9 + 7\\nans = 0\\nfor i in range(n):\\n    bef = i  \\n    aft = n - i - 1\\n    if bef < aft:\\n        ans -= (ar[i]*(pow(2 , aft , MOD) - pow(2 , bef , MOD) + MOD) % MOD) \\n        ans %= MOD\\n    elif aft < bef:\\n        ans += (ar[i]*(pow(2 , bef , MOD) - pow(2 , aft , MOD) + MOD) % MOD)\\n        ans %= MOD    \\nprint(ans)\", \"n = int(input())\\narr = sorted(list(map(int, input().split())))\\nres = 0\\nmod = 1000000007\\nacc = 0\\narr = [arr[i+1] - arr[i] for i in range(n-1)]\\nn -= 1\\ns = sum(arr)\\nfor i in range((n+1)//2):\\n    acc += s\\n    res += acc * pow(2, n-i-1, mod) % mod\\n    if not i*2+1 == n:\\n        res += acc * pow(2, i, mod) % mod\\n    res %= mod\\n    s -= arr[i] + arr[n-i-1]\\nprint(res)\", \"n = int(input())\\nx = list(map(int, input().split()))\\n\\nx.sort()\\nans = 0\\nfor i in range(n):\\n    ans+=((pow(2,i,1000000007)-pow(2,n-i-1,1000000007))*x[i])%1000000007\\n    ans = ans%1000000007\\nprint(ans)\", \"n = int(input())\\narr = list(map(int,input().split()))\\narr.sort()\\nmod = 10**9 + 7\\n\\ns = 0\\nans = 0\\nm = 0\\nlAdd = 1\\n# print(arr)\\nfor i in range(n-2,-1,-1):\\n    # print('---------')\\n    # print(arr[i])\\n    m+=lAdd\\n    m%=mod\\n\\n    lAdd*=2\\n    lAdd%=mod\\n\\n    s *= 2\\n    s %= mod\\n    s += arr[i+1]\\n    s %= mod\\n\\n    # print(s,(((arr[i])*((1<<(n-i-1)) - 1))%mod))\\n    t = s-((m*arr[i])%mod)\\n    t+=mod\\n    t%=mod\\n    ans+=t\\n    ans%=mod\\nprint(ans%mod)\"]",
    "test": "{\n  \"inputs\": [\n    \"2\\n4 7\\n\",\n    \"3\\n4 3 1\\n\",\n    \"20\\n8 11 13 19 21 34 36 44 57 58 61 63 76 78 79 81 85 86 90 95\\n\",\n    \"20\\n1 8 9 12 15 17 18 24 30 33 36 41 53 54 59 62 64 66 72 73\\n\",\n    \"20\\n2 6 8 9 20 23 27 36 43 49 63 65 70 71 85 87 89 91 94 97\\n\",\n    \"1\\n78091781\\n\",\n    \"2\\n1000000000 1\\n\",\n    \"3\\n999999998 999999999 999999992\\n\",\n    \"3\\n465343471 465343474 465343473\\n\",\n    \"10\\n10 3 6 2 1 9 8 4 5 7\\n\",\n    \"10\\n756734546 756734524 756734550 756734529 756734553 756734538 756734541 756734536 756734579 756734537\\n\",\n    \"10\\n877105545 939360757 849826701 845946140 803128820 926787996 967305000 904694971 921301848 971203310\\n\",\n    \"5\\n4 7 13 17 18\\n\",\n    \"5\\n20 17 13 7 2\\n\",\n    \"5\\n3 17 2 5 4\\n\",\n    \"5\\n999999980 999999985 999999986 999999990 999999992\\n\",\n    \"5\\n1000000000 999999988 999999982 999999981 999999980\\n\",\n    \"5\\n999999984 999999997 999999994 999999991 999999982\\n\",\n    \"1\\n2\\n\",\n    \"5\\n9 10 7 4 5\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"9\\n\",\n    \"83396599\\n\",\n    \"68059140\\n\",\n    \"92743989\\n\",\n    \"0\\n\",\n    \"999999999\\n\",\n    \"21\\n\",\n    \"9\\n\",\n    \"7181\\n\",\n    \"36489\\n\",\n    \"861364152\\n\",\n    \"270\\n\",\n    \"330\\n\",\n    \"237\\n\",\n    \"210\\n\",\n    \"342\\n\",\n    \"285\\n\",\n    \"0\\n\",\n    \"114\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}