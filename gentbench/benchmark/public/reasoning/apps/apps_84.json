{
    "problem": "You are an expert Python programmer, and here is your task: Panic is rising in the committee for doggo standardization\u00a0\u2014 the puppies of the new brood have been born multi-colored! In total there are 26 possible colors of puppies in the nature and they are denoted by letters from 'a' to 'z' inclusive.\n\nThe committee rules strictly prohibit even the smallest diversity between doggos and hence all the puppies should be of the same color. Thus Slava, the committee employee, has been assigned the task to recolor some puppies into other colors in order to eliminate the difference and make all the puppies have one common color.\n\nUnfortunately, due to bureaucratic reasons and restricted budget, there's only one operation Slava can perform: he can choose a color $x$ such that there are currently at least two puppies of color $x$ and recolor all puppies of the color $x$ into some arbitrary color $y$. Luckily, this operation can be applied multiple times (including zero).\n\nFor example, if the number of puppies is $7$ and their colors are represented as the string \"abababc\", then in one operation Slava can get the results \"zbzbzbc\", \"bbbbbbc\", \"aaaaaac\", \"acacacc\" and others. However, if the current color sequence is \"abababc\", then he can't choose $x$='c' right now, because currently only one puppy has the color 'c'.\n\nHelp Slava and the committee determine whether it is possible to standardize all the puppies, i.e. after Slava's operations all the puppies should have the same color.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of puppies.\n\nThe second line contains a string $s$ of length $n$ consisting of lowercase Latin letters, where the $i$-th symbol denotes the $i$-th puppy's color.\n\n\n-----Output-----\n\nIf it's possible to recolor all puppies into one color, print \"Yes\".\n\nOtherwise print \"No\".\n\nOutput the answer without quotation signs.\n\n\n-----Examples-----\nInput\n6\naabddc\n\nOutput\nYes\n\nInput\n3\nabc\n\nOutput\nNo\n\nInput\n3\njjj\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first example Slava can perform the following steps:   take all puppies of color 'a' (a total of two) and recolor them into 'b';  take all puppies of color 'd' (a total of two) and recolor them into 'c';  take all puppies of color 'b' (three puppies for now) and recolor them into 'c'. \n\nIn the second example it's impossible to recolor any of the puppies.\n\nIn the third example all the puppies' colors are the same; thus there's no need to recolor anything.",
    "solution": "[\"import collections\\n\\nn = int(input())\\ns = collections.Counter(input())\\nprint('Yes' if n == 1 or max(s.values()) > 1 else 'No')\\n\", \"n = input()\\ns=  input()\\n\\n\\nif len(s) == 1:\\n    print(\\\"Yes\\\")\\nelse:\\n    if len(s) == len(set(s)):\\n        print(\\\"No\\\")\\n    else:\\n        print(\\\"Yes\\\")\", \"n = int(input())\\ns = input()\\na = [0] * 1000\\nfor c in s:\\n    a[ord(c)] += 1\\nif max(a) > 1 or n == 1:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\\n\\n\", \"#!/bin/python3\\nimport sys\\nn = input()\\na = input()\\n\\ncount = [0] * 26\\n\\ndiff = set(a)\\n\\nfor c in a:\\n\\tcount[ord(c) - ord('a')] += 1\\n\\nif len(diff) == 1:\\n\\tprint(\\\"Yes\\\")\\nelse:\\n\\tfor c in count:\\n\\t\\tif c >= 2:\\n\\t\\t\\tprint(\\\"Yes\\\")\\n\\t\\t\\treturn\\n\\tprint(\\\"No\\\")\\n\", \"n = int(input())\\np = input()\\nd = {}\\nfor c in p:\\n    if c in d:\\n        d[c] += 1\\n    else:\\n        d[c] = 1\\n\\nif len(d) == 1:\\n    print(\\\"Yes\\\")\\nelse:\\n    for v in d.values():\\n        if v >= 2:\\n            print(\\\"Yes\\\")\\n            return\\n    print(\\\"No\\\")\", \"n=int(input())\\ns=input()\\nif n==1:\\n    print(\\\"Yes\\\")\\n    return\\nelse:\\n    val=[0 for i in range(26)]\\n    for i in s:\\n        val[ord(i)-ord('a')]+=1\\n    k=max(val)\\n    if k>=2:\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\", \"n = int(input())\\n\\ncnt = [0] * 26\\n\\ns = input()\\nfor c in s:\\n    cnt[ord(c) - ord('a')] += 1\\n\\nfor u in cnt:\\n    if u > 1:\\n        print('Yes')\\n        return\\n\\nif cnt.count(0) == 25:\\n    print('Yes')\\nelse:\\n    print('No')\\n\", \"n = int(input())\\ns = input()\\nd = dict()\\nans = 0\\nfor i in s:\\n    if d.get(i) == None:\\n        d[i] = 1\\n    else:\\n        ans = 1\\nif ans == 1 or n == 1:\\n    print('Yes')\\nelse:\\n    print('No')\", \"def main():\\n    n = int(input())\\n    a = input()\\n    if n == 1:\\n        print('Yes')\\n        return\\n    c = [0]*300\\n    for i in a:\\n        if c[ord(i)] > 0:\\n            print('Yes')\\n            return\\n        c[ord(i)]+=1 \\n    print('No')\\nmain()\", \"from collections import Counter\\nn=int(input())\\nr=input()\\nif (n==1):\\n\\tprint (\\\"Yes\\\")\\n\\treturn\\nd=Counter(r)\\nfor i in d:\\n\\tif (d[i]>=2):\\n\\t\\tprint (\\\"Yes\\\")\\n\\t\\treturn\\nprint (\\\"No\\\")\\n\\n\\n\", \"3\\n\\nn = int(input())\\ns = input()\\n\\nif n == 1:\\n    print(\\\"Yes\\\")\\n    return\\n\\nwas = set()\\nfor c in s:\\n    if c in was:\\n        print(\\\"Yes\\\")\\n        return\\n    was.add(c)\\n\\n\\nprint(\\\"No\\\")\\n\", \"n = int(input())\\ns = input().strip()\\n\\nprint(['Yes', 'No'][n > 1 and len(set(s)) == n])\\n\", \"n = int(input())\\ns = list(input())\\nif n == 1:\\n    print(\\\"Yes\\\")\\n    return\\nfor el in set(s):\\n    if s.count(el) >= 2:\\n        print(\\\"Yes\\\")\\n        return\\nprint(\\\"No\\\")\", \"n = int(input())\\ns = input()\\nnum = [0] * 26\\nif n == 1:\\n    print('Yes')\\nelse:\\n    for i in range(len(s)):\\n        num[ord(s[i]) - 97] += 1\\n    fl = False\\n    for i in range(26):\\n        if num[i] > 1:\\n            fl = True\\n            break\\n    if fl:\\n        print('Yes')\\n    else:\\n        print('No')\", \"n = int(input())\\nif n == 1:\\n    print(\\\"Yes\\\")\\n    return\\narr = input()\\nwas = [0 for i in range(100)]\\nfor i in arr:\\n    j = ord(i) - ord('a')\\n    if was[j] == 1:\\n        print(\\\"Yes\\\")\\n        return\\n    was[j] = 1\\nprint('No')\", \"import math as ma\\nfrom decimal import Decimal as dec\\nfrom itertools import permutations\\n\\n\\ndef li():\\n\\treturn list(map(int , input().split()))\\n\\n\\n# https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/\\ndef modInverse(a , m):\\n\\tm0 = m\\n\\ty = 0\\n\\tx = 1\\n\\tif (m == 1):\\n\\t\\treturn 0\\n\\twhile (a > 1):\\n\\t\\tq = a // m\\n\\t\\tt = m\\n\\t\\tm = a % m\\n\\t\\ta = t\\n\\t\\tt = y\\n\\t\\ty = x - q * y\\n\\t\\tx = t\\n\\tif (x < 0):\\n\\t\\tx = x + m0\\n\\treturn x\\n\\n\\ndef num():\\n\\treturn map(int , input().split())\\n\\n\\ndef nu():\\n\\treturn int(input())\\n\\n\\ndef find_gcd(x , y):\\n\\twhile (y):\\n\\t\\tx , y = y , x % y\\n\\treturn x\\n\\nn=nu()\\ns=input()\\nf=[0]*26\\nfor i in range(n):\\n\\tx=ord(s[i])-97\\n\\tf[x]+=1\\nfl=False\\nfor i in range(26):\\n\\tif(f[i]>=2):\\n\\t\\tfl=True\\nif(n==1):\\n\\tfl=True\\nif(fl==True):\\n\\tprint(\\\"Yes\\\")\\nelse:\\n\\tprint(\\\"No\\\")\", \"from collections import Counter\\n\\nn = int(input())\\nc = Counter(input())\\n\\nflag = False\\nfor char in c:\\n    if c[char] >= 2: flag = True\\n\\nif n==1 or flag:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"n=int(input())\\ndict1={}\\ns=str(input())\\nflag=0\\nif(n==1):\\n    print(\\\"Yes\\\")\\nelse:\\n    for i in range(n):\\n        try:\\n            dict1[s[i]]+=1\\n            flag=1\\n        except:\\n            KeyError\\n            dict1[s[i]]=1\\n    if(flag==0):\\n        print(\\\"No\\\")\\n    else:\\n        print(\\\"Yes\\\")\", \"n = int(input())\\ns = input()\\nc = [0] * 26\\nfor i in s:\\n    c[ord(i) - ord('a')] += 1\\nc.sort(reverse = 1)\\ncur = 0\\nf = 1\\nfor i in c:\\n    if i == 1:\\n        if cur <= 1:\\n            f = 0\\n            break\\n    cur += i\\nif n == 1: f = 1\\nprint(\\\"Yes\\\" if f else \\\"No\\\")\", \"n = int(input())\\ns = input()\\ncnt = 0\\nfor i in set(s):\\n    if s.count(i) != 1:\\n        cnt +=1\\n\\nif cnt > 0 or len(s) == 1:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"n = int(input())\\ns = list(input())\\nif n == 1:\\n    print(\\\"Yes\\\")\\n    return\\nfor i in range(n):\\n    if s.count(s[i]) > 1:\\n        print(\\\"Yes\\\")\\n        return\\nprint(\\\"No\\\")\", \"3\\n\\ndef solve(N, S):\\n    cnt = [0] * 26\\n    for c in S:\\n        cnt[ord(c) - ord('a')] += 1\\n\\n    colors = len([c for c in cnt if c > 0])\\n\\n    if colors == 1:\\n        return True\\n\\n    return max(cnt) >= 2\\n\\n\\ndef main():\\n    N = int(input())\\n    S = input()\\n    print('Yes' if solve(N, S) else 'No')\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\"]",
    "test": "{\n  \"inputs\": [\n    \"6\\naabddc\\n\",\n    \"3\\nabc\\n\",\n    \"3\\njjj\\n\",\n    \"1\\nd\\n\",\n    \"26\\nadtopxgnculmhfkezrwsvqbiyj\\n\",\n    \"2\\naz\\n\",\n    \"5\\nfnfvn\\n\",\n    \"7\\nkssssss\\n\",\n    \"10\\nuyouuzyyrb\\n\",\n    \"3\\ngcw\\n\",\n    \"15\\nnrnuugruronnsur\\n\",\n    \"27\\nmnpsweykjdvaxyiqtgcuzhbfrlo\\n\",\n    \"2\\naa\\n\",\n    \"2\\nba\\n\",\n    \"3\\naba\\n\",\n    \"2\\nzz\\n\",\n    \"1\\ne\\n\",\n    \"4\\nabab\\n\",\n    \"4\\nabcc\\n\",\n    \"6\\naabcde\\n\",\n    \"3\\nzza\\n\",\n    \"27\\nabcdefghijklmnopqrstuvwxyza\\n\",\n    \"5\\naabcd\\n\",\n    \"3\\naaa\\n\",\n    \"9\\nabcdefghh\\n\",\n    \"6\\nabcdee\\n\",\n    \"4\\naabc\\n\",\n    \"4\\nabca\\n\",\n    \"10\\naabcdefghi\\n\",\n    \"5\\nabvca\\n\"\n  ],\n  \"outputs\": [\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}