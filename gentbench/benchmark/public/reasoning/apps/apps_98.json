{
    "problem": "You are an expert Python programmer, and here is your task: You are given $n$ integers. You need to choose a subset and put the chosen numbers in a beautiful rectangle (rectangular matrix). Each chosen number should occupy one of its rectangle cells, each cell must be filled with exactly one chosen number. Some of the $n$ numbers may not be chosen.\n\nA rectangle (rectangular matrix) is called beautiful if in each row and in each column all values are different.\n\nWhat is the largest (by the total number of cells) beautiful rectangle you can construct? Print the rectangle itself.\n\n\n-----Input-----\n\nThe first line contains $n$ ($1 \\le n \\le 4\\cdot10^5$). The second line contains $n$ integers ($1 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nIn the first line print $x$ ($1 \\le x \\le n$) \u2014 the total number of cells of the required maximum beautiful rectangle. In the second line print $p$ and $q$ ($p \\cdot q=x$): its sizes. In the next $p$ lines print the required rectangle itself. If there are several answers, print any.\n\n\n-----Examples-----\nInput\n12\n3 1 4 1 5 9 2 6 5 3 5 8\n\nOutput\n12\n3 4\n1 2 3 5\n3 1 5 4\n5 6 8 9\n\nInput\n5\n1 1 1 1 1\n\nOutput\n1\n1 1\n1",
    "solution": "[\"\\nfrom collections import Counter\\nfrom itertools import accumulate\\nfrom math import sqrt\\nfrom operator import itemgetter\\nimport sys\\n \\nn = int(input())\\ncnt = Counter(map(int, input().split()))\\nnums, counts = zip(*sorted(cnt.items(), key=itemgetter(1)))\\nacc = [0] + list(accumulate(counts))\\narea = 1\\nh, w = 1, 1\\ni = len(counts)\\n \\nfor y in range(int(sqrt(n)), 0, -1):\\n    while i and counts[i-1] > y:\\n        i -= 1\\n    total = acc[i] + (len(counts) - i) * y\\n    x = total // y\\n    if y <= x and area < x * y:\\n        h, w, area = y, x, x*y\\n \\nans = [[0]*w for _ in range(h)]\\ni = len(counts)-1\\nnum, count = nums[i], min(h, counts[i])\\n \\nfor x in range(w):\\n    for y in range(h):\\n        ans[y][(x + y) % w] = num\\n \\n        count -= 1\\n        if count == 0:\\n            i -= 1\\n            num, count = nums[i], h if h < counts[i] else counts[i]\\n \\nprint(area)\\nprint(h, w)\\nfor y in range(h):\\n    sys.stdout.write(' '.join(map(str, ans[y])) + '\\\\n')\", \"import sys\\ninput = sys.stdin.readline\\n \\nn=int(input())\\nA=list(map(int,input().split()))\\n\\nfrom collections import Counter\\n \\nC=Counter(A)\\n\\nimport math\\n\\nMAXV=max(max(C.values()),int(math.sqrt(n)))\\n \\nVCOUNT=[0]*(MAXV+1)\\n \\nfor v in list(C.values()):\\n    VCOUNT[v]+=1\\n    \\nSUM=n\\n \\nfrom itertools import accumulate\\n \\nACC=list(accumulate(VCOUNT[::-1]))[::-1]\\n \\n \\nANS=0\\n \\nfor i in range(MAXV,0,-1):\\n    if SUM//i>=i:\\n        if ANS<i*(SUM//i):\\n            ANS=i*(SUM//i)\\n            ANSX=i,(SUM//i)\\n \\n    SUM-=ACC[i]\\n \\nprint(ANS)\\n \\nX,Y=ANSX[0],ANSX[1]\\nprint(X,Y)\\n \\nA=[[0]*Y for i in range(X)]\\n \\ni=0\\nj=0\\nnowj=0\\ncolored=0\\nsame=0\\nLIST=list(C.most_common())\\nind=0\\n \\nwhile colored<ANS:\\n    A[i][j],MAX=LIST[ind]\\n    colored+=1\\n    i+=1\\n    j=(j+1)%Y\\n    if i==X:\\n        i=0\\n        nowj+=1\\n        j=nowj\\n    same+=1\\n \\n    if same==min(X,MAX):\\n        ind+=1\\n        same=0\\n \\nfor a in A:\\n    sys.stdout.write(\\\" \\\".join(map(str,a))+\\\"\\\\n\\\")\\n\", \"from collections import Counter\\nfrom itertools import accumulate\\nfrom math import sqrt\\nfrom operator import itemgetter\\nimport sys\\n \\nn = int(input())\\ncnt = Counter(map(int, input().split()))\\nnums, counts = zip(*sorted(cnt.items(), key=itemgetter(1)))\\nacc = [0] + list(accumulate(counts))\\narea = 1\\nh, w = 1, 1\\ni = len(counts)\\n \\nfor y in range(int(sqrt(n)), 0, -1):\\n    while i and counts[i-1] > y:\\n        i -= 1\\n    total = acc[i] + (len(counts) - i) * y\\n    x = total // y\\n    if y <= x and area < x * y:\\n        h, w, area = y, x, x*y\\n \\nans = [[0]*w for _ in range(h)]\\ni = len(counts)-1\\nnum, count = nums[i], min(h, counts[i])\\n \\nfor x in range(w):\\n    for y in range(h):\\n        ans[y][(x + y) % w] = num\\n \\n        count -= 1\\n        if count == 0:\\n            i -= 1\\n            num, count = nums[i], h if h < counts[i] else counts[i]\\n \\nprint(area)\\nprint(h, w)\\nfor y in range(h):\\n    sys.stdout.write(' '.join(map(str, ans[y])) + '\\\\n')\"]",
    "test": "{\n  \"inputs\": [\n    \"12\\n3 1 4 1 5 9 2 6 5 3 5 8\\n\",\n    \"5\\n1 1 1 1 1\\n\",\n    \"1\\n1000000000\\n\",\n    \"1\\n1\\n\",\n    \"2\\n1 2\\n\",\n    \"2\\n1000000000 1000000000\\n\",\n    \"3\\n1 2 3\\n\",\n    \"3\\n1 2 2\\n\",\n    \"3\\n1 1 1\\n\",\n    \"4\\n1 2 3 4\\n\",\n    \"4\\n1 2 3 3\\n\",\n    \"4\\n1 1 2 2\\n\",\n    \"4\\n1 1 1 4\\n\",\n    \"5\\n5 3 5 6 3\\n\",\n    \"5\\n1 2 1 1 1\\n\",\n    \"5\\n1 5 5 4 2\\n\",\n    \"6\\n3 3 3 3 3 3\\n\",\n    \"6\\n3 6 7 4 3 5\\n\",\n    \"6\\n7 8 6 8 9 8\\n\",\n    \"7\\n8 5 10 4 10 8 3\\n\",\n    \"7\\n2 1 3 3 2 3 3\\n\",\n    \"7\\n3 2 3 3 2 3 3\\n\",\n    \"8\\n2 1 2 4 3 4 2 2\\n\",\n    \"8\\n11 7 10 10 11 10 12 11\\n\",\n    \"8\\n6 12 9 9 6 12 9 10\\n\",\n    \"9\\n4 9 5 9 6 8 9 8 7\\n\",\n    \"9\\n2 7 2 2 7 1 6 1 9\\n\",\n    \"9\\n3 1 4 3 4 4 2 3 2\\n\",\n    \"10\\n15 9 9 13 13 15 10 15 12 5\\n\",\n    \"10\\n8 9 9 6 5 8 5 8 9 3\\n\",\n    \"10\\n7 3 7 8 4 8 10 7 5 10\\n\",\n    \"11\\n4 4 5 5 5 3 5 5 5 3 2\\n\",\n    \"11\\n18 16 21 21 12 17 16 21 20 21 20\\n\",\n    \"11\\n19 22 18 22 21 21 19 13 21 21 16\\n\",\n    \"12\\n10 15 17 14 14 15 17 17 13 13 16 18\\n\",\n    \"12\\n5 1 6 1 4 1 5 1 2 3 8 3\\n\",\n    \"12\\n1 2 5 1 1 5 1 3 4 5 2 3\\n\",\n    \"13\\n15 25 25 26 17 18 22 18 18 23 22 25 21\\n\",\n    \"13\\n16 18 5 17 11 12 4 11 3 16 17 2 3\\n\",\n    \"13\\n8 4 14 8 13 14 10 3 4 9 6 14 3\\n\",\n    \"14\\n1 1 4 8 10 4 6 1 4 8 4 2 14 12\\n\",\n    \"14\\n7 7 6 7 6 5 7 6 6 6 6 7 4 5\\n\",\n    \"14\\n1 1 1 1 1 2 2 1 3 1 2 1 2 1\\n\",\n    \"15\\n9 13 29 10 17 15 21 7 7 7 13 4 5 16 2\\n\",\n    \"15\\n17 5 20 11 14 9 5 12 5 11 5 14 1 12 18\\n\",\n    \"15\\n6 7 11 8 13 11 4 20 17 12 9 15 18 13 9\\n\",\n    \"4\\n1 1 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"12\\n3 4\\n5 1 3 6\\n8 5 1 3\\n4 9 5 2\\n\",\n    \"1\\n1 1\\n1\\n\",\n    \"1\\n1 1\\n1000000000\\n\",\n    \"1\\n1 1\\n1\\n\",\n    \"2\\n1 2\\n1 2\\n\",\n    \"1\\n1 1\\n1000000000\\n\",\n    \"3\\n1 3\\n1 2 3\\n\",\n    \"2\\n1 2\\n1 2\\n\",\n    \"1\\n1 1\\n1\\n\",\n    \"4\\n1 4\\n1 2 3 4\\n\",\n    \"4\\n2 2\\n3 1\\n2 3\\n\",\n    \"4\\n2 2\\n1 2\\n2 1\\n\",\n    \"2\\n1 2\\n1 4\\n\",\n    \"4\\n2 2\\n3 5\\n5 3\\n\",\n    \"2\\n1 2\\n1 2\\n\",\n    \"4\\n1 4\\n1 2 4 5\\n\",\n    \"1\\n1 1\\n3\\n\",\n    \"6\\n2 3\\n3 4 6\\n7 3 5\\n\",\n    \"4\\n1 4\\n6 7 8 9\\n\",\n    \"6\\n2 3\\n8 10 3\\n4 8 10\\n\",\n    \"4\\n2 2\\n2 3\\n3 2\\n\",\n    \"4\\n2 2\\n2 3\\n3 2\\n\",\n    \"6\\n2 3\\n2 4 1\\n3 2 4\\n\",\n    \"6\\n2 3\\n10 11 7\\n12 10 11\\n\",\n    \"6\\n2 3\\n6 9 12\\n12 6 9\\n\",\n    \"9\\n3 3\\n9 4 7\\n8 9 5\\n6 8 9\\n\",\n    \"9\\n3 3\\n2 1 7\\n7 2 1\\n6 9 2\\n\",\n    \"9\\n3 3\\n3 4 1\\n2 3 4\\n4 2 3\\n\",\n    \"9\\n3 3\\n15 5 10\\n12 15 9\\n9 13 15\\n\",\n    \"9\\n3 3\\n8 9 3\\n5 8 9\\n9 5 8\\n\",\n    \"9\\n3 3\\n7 3 8\\n8 7 4\\n5 10 7\\n\",\n    \"6\\n2 3\\n3 4 5\\n5 3 4\\n\",\n    \"9\\n3 3\\n21 12 17\\n18 21 16\\n16 20 21\\n\",\n    \"9\\n3 3\\n21 13 19\\n19 21 16\\n18 22 21\\n\",\n    \"12\\n3 4\\n17 10 14 15\\n16 17 13 14\\n15 18 17 13\\n\",\n    \"10\\n2 5\\n1 3 5 2 6\\n8 1 3 5 4\\n\",\n    \"9\\n3 3\\n1 5 2\\n2 1 5\\n5 3 1\\n\",\n    \"12\\n3 4\\n18 25 15 22\\n22 18 25 17\\n21 23 18 25\\n\",\n    \"12\\n2 6\\n3 11 16 17 2 5\\n12 3 11 16 17 4\\n\",\n    \"12\\n2 6\\n3 4 8 14 6 10\\n13 3 4 8 14 9\\n\",\n    \"12\\n3 4\\n1 4 2 8\\n10 1 4 6\\n8 12 1 4\\n\",\n    \"9\\n3 3\\n6 7 4\\n5 6 7\\n7 5 6\\n\",\n    \"4\\n2 2\\n1 2\\n2 1\\n\",\n    \"15\\n3 5\\n7 2 13 17 9\\n10 7 4 15 21\\n29 13 7 5 16\\n\",\n    \"12\\n2 6\\n5 11 12 14 1 17\\n18 5 11 12 14 9\\n\",\n    \"15\\n3 5\\n4 11 17 8 13\\n13 6 11 18 9\\n9 15 7 12 20\\n\",\n    \"1\\n1 1\\n1\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}