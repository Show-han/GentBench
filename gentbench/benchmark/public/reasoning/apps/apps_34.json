{
    "problem": "You are an expert Python programmer, and here is your task: It's that time of the year, Felicity is around the corner and you can see people celebrating all around the Himalayan region. The Himalayan region has n gyms. The i-th gym has g_{i} Pokemon in it. There are m distinct Pokemon types in the Himalayan region numbered from 1 to m. There is a special evolution camp set up in the fest which claims to evolve any Pokemon. The type of a Pokemon could change after evolving, subject to the constraint that if two Pokemon have the same type before evolving, they will have the same type after evolving. Also, if two Pokemon have different types before evolving, they will have different types after evolving. It is also possible that a Pokemon has the same type before and after evolving. \n\nFormally, an evolution plan is a permutation f of {1, 2, ..., m}, such that f(x) = y means that a Pokemon of type x evolves into a Pokemon of type y.\n\nThe gym leaders are intrigued by the special evolution camp and all of them plan to evolve their Pokemons. The protocol of the mountain states that in each gym, for every type of Pokemon, the number of Pokemon of that type before evolving any Pokemon should be equal the number of Pokemon of that type after evolving all the Pokemons according to the evolution plan. They now want to find out how many distinct evolution plans exist which satisfy the protocol.\n\nTwo evolution plans f_1 and f_2 are distinct, if they have at least one Pokemon type evolving into a different Pokemon type in the two plans, i. e. there exists an i such that f_1(i) \u2260 f_2(i).\n\nYour task is to find how many distinct evolution plans are possible such that if all Pokemon in all the gyms are evolved, the number of Pokemon of each type in each of the gyms remains the same. As the answer can be large, output it modulo 10^9 + 7.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^6)\u00a0\u2014 the number of gyms and the number of Pokemon types.\n\nThe next n lines contain the description of Pokemons in the gyms. The i-th of these lines begins with the integer g_{i} (1 \u2264 g_{i} \u2264 10^5)\u00a0\u2014 the number of Pokemon in the i-th gym. After that g_{i} integers follow, denoting types of the Pokemons in the i-th gym. Each of these integers is between 1 and m.\n\nThe total number of Pokemons (the sum of all g_{i}) does not exceed 5\u00b710^5.\n\n\n-----Output-----\n\nOutput the number of valid evolution plans modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n2 3\n2 1 2\n2 2 3\n\nOutput\n1\n\nInput\n1 3\n3 1 2 3\n\nOutput\n6\n\nInput\n2 4\n2 1 2\n3 2 3 4\n\nOutput\n2\n\nInput\n2 2\n3 2 2 1\n2 1 2\n\nOutput\n1\n\nInput\n3 7\n2 1 2\n2 3 4\n3 5 6 7\n\nOutput\n24\n\n\n\n-----Note-----\n\nIn the first case, the only possible evolution plan is: $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 3$\n\nIn the second case, any permutation of (1,  2,  3) is valid.\n\nIn the third case, there are two possible plans: $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 4,4 \\rightarrow 3$ $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 3,4 \\rightarrow 4$\n\nIn the fourth case, the only possible evolution plan is: $1 \\rightarrow 1,2 \\rightarrow 2$",
    "solution": "[\"import sys\\nfrom collections import defaultdict, Counter\\n\\nP = 10 ** 9 + 7\\n\\ndef factmod(n):\\n    res = 1\\n    for i in range(2, n+1):\\n        res *= i\\n        res %= P\\n\\n    return res\\n\\ndef solve():\\n    n, m = list(map(int, input().split()))\\n    colour = {i:0 for i in range(1, m+1)}\\n    colour_map = {}\\n    for i, line in enumerate(sys.stdin):\\n        A = [int(x) for x in line.split()]\\n        count = Counter(A)\\n\\n        if count[A[0]] == 1:\\n            count.pop(A[0])\\n        else:\\n            count[A[0]] -= 1\\n\\n        for c in count:\\n            p = (colour[c], i, count[c])\\n            if p in colour_map:\\n                colour[c] = colour_map[p]\\n            else:\\n                colour[c] = colour_map[p] = len(colour_map) + 1\\n\\n    count = Counter(list(colour.values()))\\n\\n    res = 1\\n    for c in count:\\n        res *= factmod(count[c])\\n        res %= P\\n\\n    return res\\n\\nprint(solve())\\n\", \"from collections import Counter\\nn, m = list(map(int, input().split()))\\nx = [[] for i in range(m)]\\nfor i in range(n):\\n    a = list(map(int, input().split()))\\n    k = a[0]\\n    for j in a[1:]:\\n        x[j - 1].append(i)\\n\\n\\nans = 1\\nMOD = 10 ** 9 + 7\\nfor e in list(Counter(list(map(str, x))).values()):\\n    for i in range(2, e + 1):\\n        ans = ans * i % MOD\\n\\nprint(ans)\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"2 3\\n2 1 2\\n2 2 3\\n\",\n    \"1 3\\n3 1 2 3\\n\",\n    \"2 4\\n2 1 2\\n3 2 3 4\\n\",\n    \"2 2\\n3 2 2 1\\n2 1 2\\n\",\n    \"3 7\\n2 1 2\\n2 3 4\\n3 5 6 7\\n\",\n    \"10 100\\n16 25 7 48 43 16 23 66 3 17 31 64 27 7 17 11 60\\n62 76 82 99 77 19 26 66 46 9 54 77 8 34 76 70 48 53 35 69 29 84 22 16 53 36 27 24 81 2 86 67 45 22 54 96 37 8 3 22 9 30 63 61 86 19 16 47 3 72 39 36 1 50 1 18 7 44 52 66 90 3 63\\n3 22 61 39\\n9 28 69 91 62 98 23 45 9 10\\n2 42 20\\n3 90 46 55\\n2 71 9\\n1 7\\n1 44\\n1 94\\n\",\n    \"10 100\\n26 69 60 30 8 89 7 54 66 100 75 4 17 48 40 20 78 56 94 23 48 55 40 9 23 55 30\\n3 94 78 64\\n50 57 81 62 43 95 4 22 29 9 67 17 82 13 69 13 30 85 3 44 5 85 70 4 50 9 30 85 67 64 7 59 98 78 68 61 63 35 35 94 87 37 18 12 83 26 77 48 67 72 82\\n7 59 52 92 41 37 11 17\\n1 65\\n2 75 82\\n4 28 66 33 70\\n1 81\\n2 4 31\\n1 12\\n\",\n    \"10 100\\n53 9 10 7 62 66 82 38 22 82 14 48 7 77 51 37 5 10 12 68 88 36 49 80 80 71 48 72 6 49 87 21 48 17 75 43 25 75 55 36 10 82 2 28 14 53 25 66 7 70 58 53 74 86\\n32 84 95 55 32 79 75 12 94 80 13 29 49 87 26 69 51 73 52 30 87 17 75 60 1 82 15 34 26 83 95 60 13\\n8 61 39 91 78 19 32 91 26\\n1 22\\n1 87\\n1 55\\n1 87\\n1 39\\n1 70\\n1 40\\n\",\n    \"10 100\\n46 62 64 81 19 35 65 30 81 64 54 95 98 18 78 54 19 68 34 16 37 22 55 63 41 87 65 33 22 15 5 99 35 49 79 47 54 50 97 54 3 100 86 91 3 24 36\\n36 25 29 71 1 64 18 92 22 86 76 91 87 79 29 33 61 36 87 22 10 25 7 96 56 67 38 66 43 35 55 54 90 65 83 56 11\\n4 36 73 34 11\\n2 28 94\\n2 97 100\\n5 52 69 13 11 78\\n1 78\\n2 71 8\\n1 33\\n1 11\\n\",\n    \"10 100\\n73 10 13 55 73 7 41 18 37 47 97 43 96 52 97 75 42 23 52 61 89 100 64 43 98 95 86 86 39 85 31 74 30 82 84 51 84 21 35 61 3 15 71 45 99 12 48 54 39 96 85 57 45 35 92 57 65 97 42 91 86 47 64 35 67 52 11 34 24 41 45 42 87 50\\n9 77 91 42 99 98 20 43 82 35\\n10 96 48 77 64 81 66 3 38 58 9\\n1 61\\n2 47 35\\n1 7\\n1 61\\n1 70\\n1 88\\n1 83\\n\",\n    \"100 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\",\n    \"100 2\\n1 1\\n1 2\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 2\\n1 1\\n1 1\\n1 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 1\\n1 2\\n1 1\\n1 1\\n1 2\\n1 1\\n1 1\\n1 1\\n1 2\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 2\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 2\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 2\\n1 2\\n1 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 1\\n1 2\\n1 2\\n1 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 1\\n1 2\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n\",\n    \"2 1000000\\n1 1\\n1 2\\n\",\n    \"5 262143\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n\",\n    \"65 3\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1 2\\n1 1\\n2 1 2\\n2 1 2\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n1 1\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n2 1 2\\n2 1 2\\n1 1\\n2 1 2\\n2 1 2\\n1 1\\n2 1 2\\n1 1\\n2 1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n1 1\\n1 1\\n1 1\\n2 1 2\\n1 1\\n2 1 2\\n2 1 2\\n1 1\\n2 1 2\\n2 1 2\\n1 1\\n2 1 2\\n1 1\\n2 1 2\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1 2\\n\",\n    \"1 1000000\\n1 1\\n\",\n    \"20 3\\n4 1 3 3 3\\n6 1 3 3 3 3 3\\n1 1\\n2 1 3\\n2 1 2\\n1 1\\n8 1 2 2 2 2 2 2 2\\n3 1 3 3\\n3 1 3 3\\n5 1 2 2 2 2\\n10 1 3 3 3 3 3 3 3 3 3\\n15 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\n10 1 2 2 2 2 2 2 2 2 2\\n3 1 2 2\\n1 1\\n1 1\\n7 1 3 3 3 3 3 3\\n1 1\\n1 1\\n1 1\\n\",\n    \"20 3\\n1 1\\n5 1 2 2 2 2\\n6 1 3 3 3 3 3\\n2 1 2\\n3 1 3 3\\n3 1 3 3\\n4 1 3 3 3\\n2 1 3\\n3 1 3 3\\n5 1 2 2 2 2\\n3 1 3 3\\n7 1 2 2 2 2 2 2\\n3 1 2 2\\n6 1 3 3 3 3 3\\n3 1 3 3\\n2 1 2\\n3 1 3 3\\n2 1 2\\n1 1\\n1 1\\n\",\n    \"65 3\\n1 1\\n1 1\\n2 1 2\\n2 1 2\\n2 1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1 2\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n1 1\\n1 1\\n1 1\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n1 1\\n2 1 2\\n2 1 2\\n1 1\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n1 1\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n2 1 2\\n2 1 2\\n1 1\\n2 1 2\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n1 1\\n1 1\\n2 1 2\\n1 1\\n2 1 2\\n\",\n    \"20 3\\n2 1 2\\n8 1 3 3 3 3 3 3 3\\n4 1 3 3 3\\n2 1 2\\n3 1 2 2\\n9 1 3 3 3 3 3 3 3 3\\n2 1 2\\n3 1 2 2\\n2 1 2\\n3 1 3 3\\n9 1 3 3 3 3 3 3 3 3\\n2 1 2\\n15 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n2 1 3\\n4 1 3 3 3\\n2 1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n\",\n    \"20 3\\n2 1 3\\n3 1 2 2\\n5 1 3 3 3 3\\n3 1 2 2\\n1 1\\n5 1 3 3 3 3\\n4 1 3 3 3\\n5 1 3 3 3 3\\n4 1 3 3 3\\n3 1 2 2\\n2 1 3\\n5 1 3 3 3 3\\n5 1 2 2 2 2\\n6 1 2 2 2 2 2\\n3 1 2 2\\n5 1 3 3 3 3\\n5 1 2 2 2 2\\n3 1 3 3\\n4 1 2 2 2\\n2 1 2\\n\",\n    \"3 3\\n6 1 1 1 1 1 1\\n6 2 2 2 2 2 2\\n2 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"24\\n\",\n    \"732842622\\n\",\n    \"510562296\\n\",\n    \"51603121\\n\",\n    \"166939681\\n\",\n    \"8656282\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"44455173\\n\",\n    \"943283753\\n\",\n    \"1\\n\",\n    \"128233642\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}