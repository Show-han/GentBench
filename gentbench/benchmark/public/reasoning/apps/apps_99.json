{
    "problem": "You are an expert Python programmer, and here is your task: In one of the games Arkady is fond of the game process happens on a rectangular field. In the game process Arkady can buy extensions for his field, each extension enlarges one of the field sizes in a particular number of times. Formally, there are n extensions, the i-th of them multiplies the width or the length (by Arkady's choice) by a_{i}. Each extension can't be used more than once, the extensions can be used in any order.\n\nNow Arkady's field has size h \u00d7 w. He wants to enlarge it so that it is possible to place a rectangle of size a \u00d7 b on it (along the width or along the length, with sides parallel to the field sides). Find the minimum number of extensions needed to reach Arkady's goal.\n\n\n-----Input-----\n\nThe first line contains five integers a, b, h, w and n (1 \u2264 a, b, h, w, n \u2264 100 000)\u00a0\u2014 the sizes of the rectangle needed to be placed, the initial sizes of the field and the number of available extensions.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (2 \u2264 a_{i} \u2264 100 000), where a_{i} equals the integer a side multiplies by when the i-th extension is applied.\n\n\n-----Output-----\n\nPrint the minimum number of extensions needed to reach Arkady's goal. If it is not possible to place the rectangle on the field with all extensions, print -1. If the rectangle can be placed on the initial field, print 0.\n\n\n-----Examples-----\nInput\n3 3 2 4 4\n2 5 4 10\n\nOutput\n1\n\nInput\n3 3 3 3 5\n2 3 5 4 2\n\nOutput\n0\n\nInput\n5 5 1 2 3\n2 2 3\n\nOutput\n-1\n\nInput\n3 4 1 1 3\n2 3 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example it is enough to use any of the extensions available. For example, we can enlarge h in 5 times using the second extension. Then h becomes equal 10 and it is now possible to place the rectangle on the field.",
    "solution": "[\"import sys\\n\\n\\nMAXV = 100010\\nd = [0] * MAXV\\n\\n\\na, b, h, w, n = list(map(int,input().split()))\\n\\narr = input().split()\\n\\nfor it in range(n):\\n    arr[it] = int(arr[it])\\n\\n# print(arr)\\n# print(a, b, h, w, n)\\n\\ndef solve(a, b, h, w, z, product, it):\\n    # print(\\\">\\\", a, b, h, w, z, product, it)\\n    k = 0\\n    if a % h:\\n        k = a // h + 1\\n    else:\\n        k = a // h\\n\\n    if k <= z and (product // z) * w >= b:\\n        print(it)\\n        return\\n\\n\\n\\narr = sorted(arr)\\narr = arr[::-1]\\n# print(arr)\\n\\nd[1] = 1\\nsolve(a, b, h, w, 1, 1, 0)\\nsolve(a, b, w, h, 1, 1, 0)\\nproduct = 1\\nxxx = 0\\n\\nfor it in range(1, n + 1):\\n    # arr[it - 1] = int(arr[it - 1])\\n    product *= arr[it - 1]\\n    # print(\\\"=\\\", arr[it - 1])\\n\\n    for j in reversed(list(range(1, MAXV))):\\n        if not d[j]:\\n            continue\\n\\n        x = j * arr[it - 1]\\n        # x = min(x, MAXV - 1)\\n        if x < MAXV:\\n            d[x] = 1\\n        else:\\n            if xxx:\\n                xxx = min(x, xxx)\\n            else:\\n                xxx = x\\n    if xxx:\\n        solve(a, b, h, w, xxx, product, it)\\n        solve(a, b, w, h, xxx, product, it)\\n\\n    for j in range(MAXV):\\n        if d[j]:\\n            solve(a, b, h, w, j, product, it)\\n            solve(a, b, w, h, j, product, it)\\n\\n\\nprint(-1)\\n\", \"def gen(o, gen1):\\n    if o == len(my_arr):\\n        fp = 1\\n        sp = 1\\n        \\n        for i in range(len(my_arr)):\\n            fp *= my_arr[i][0] ** gen1[i]\\n            sp *= my_arr[i][0] ** (my_arr[i][1] - gen1[i])\\n            \\n        if (h * fp >= a and w * sp >= b) or (h * fp >= b and w * sp >= a):\\n            return True\\n        \\n        return False\\n    \\n    for i in range(my_arr[o][1] + 1):\\n        if gen(o + 1, gen1 + [i]):\\n            return True\\n        \\n    return False\\n\\n\\na, b, h, w, n = map(int, input().split())\\n\\narr = list(map(int, input().split()))\\narr.sort(reverse = True)\\n\\narr2 = []\\nfor i in range(n):\\n    if (not i) or arr[i] != arr[i - 1]:\\n        arr2.append([arr[i], 1])\\n    else:\\n        arr2[-1][1] += 1\\n    \\n    \\nif (h >= a and w >= b) or (h >= b and w >= a):\\n    print(0)\\nelse:\\n    my_arr = []\\n    j = -1\\n    ans = -1\\n    for i in range(1, min(34, len(arr)) + 1):\\n        if my_arr and my_arr[-1] < arr2[j]:\\n            my_arr[-1][1] += 1\\n        else:\\n            j += 1\\n            my_arr.append([arr2[j][0], 1])\\n            \\n        if gen(0, []):\\n            ans = i\\n            break\\n        \\n    print(ans)\", \"def isin(a,b,h,w):\\n    return (h >= a and w >= b) or (h >= b and w >= a)\\n\\na,b,h,w,n = map(int, input().split())\\nc = sorted(list(map(int, input().split())), key=lambda x: -x)\\n\\nif isin(a,b,h,w):\\n    print(0)\\n    return\\n\\nvis = {h: w}\\nfor i in range(len(c)):\\n    nc = c[i]\\n    pairs = []\\n    for l in vis.keys():\\n        pair = (l,vis[l]*nc)\\n        if isin(a,b,pair[0], pair[1]):\\n            print(i + 1)\\n            return\\n        pairs.append(pair)\\n        if nc*l not in vis or vis[l] > vis[nc*l]:\\n            pair = (nc*l, vis[l])\\n            if isin(a,b,pair[0], pair[1]):\\n                print(i + 1)\\n                return\\n            pairs.append(pair)\\n    for p in pairs:\\n        vis[p[0]] = p[1]\\nprint(-1)\", \"def mp():  return list(map(int,input().split()))\\ndef lt():  return list(map(int,input().split()))\\ndef pt(x):  print(x)\\ndef ip():  return input()\\ndef it():  return int(input())\\ndef sl(x):  return [t for t in x]\\ndef spl(x): return x.split()\\ndef aj(liste, item): liste.append(item)\\ndef bin(x):  return \\\"{0:b}\\\".format(x)\\ndef listring(l): return ' '.join([str(x) for x in l])\\ndef ptlist(l): print(' '.join([str(x) for x in l]))\\nfrom copy import deepcopy\\nc,b,h,w,n = mp() \\nd = lt()\\nd.sort(reverse = True)\\nk = min(n,34)\\na = d[:k] \\nif (c <= h and b <= w) or (c <= w and b <= h):\\n    pt(0)\\nelse:\\n    dict = {h:w}\\n    i = 0\\n    bl = True\\n    while bl and i < k:\\n        x = a[i]\\n        dict1 = {}\\n        for r in dict:\\n            if r*x in dict1:\\n                dict1[r*x] = max(dict1[r*x],dict[r])\\n            else:\\n                dict1[r*x] = dict[r]\\n            if r in dict1:\\n                dict1[r] = max(dict1[r],dict[r]*x)\\n            else:\\n                dict1[r] = dict[r]*x\\n        if any((r>=c and dict1[r]>=b) or (r>=b and dict1[r]>=c) for r in dict1):\\n            bl = False\\n        else:\\n            i += 1\\n            dict = deepcopy(dict1)\\n    if i == k:\\n        pt(-1)\\n    else:\\n        pt(i+1)\\n        \\n    \\n            \\n        \\n    \\n\", \"a,b,h,w,n=list(map(int,input().strip().split(' ')))\\nif a>b:\\n    a,b=b,a\\n    \\nfactor=list(map(int,input().strip().split(' ')))\\nfactor=sorted(factor)[::-1]\\n#print(factor)\\ndef findout(a,b,h,w,factor):\\n    possible=set()\\n    for i in range(len(factor)):\\n        temp=set()\\n        if i==0:\\n            temp.add((factor[0],1))\\n            temp.add((1,factor[0]))\\n            possible=temp\\n            for X in temp:\\n                f1,f2=X\\n                if f1*h>=a and f2*w>=b:\\n                    return i+1\\n            \\n            \\n        else:\\n            for X in possible:\\n                c1,c2=X\\n                if c1*h<=a:\\n                    temp.add((c1*factor[i],c2))\\n                    if c1*factor[i]*h>=a and c2*w>=b:\\n                        return i+1\\n                    \\n                    \\n                    \\n                if c2*w<=b:    \\n                    temp.add((c1,c2*factor[i]))\\n                    if c1*h>=a and c2*w*factor[i]>=b:\\n                        return i+1\\n            possible=temp\\n    return 10**9+1\\n\\nif (h>=a and w>=b) or (h>=b and w>=a):\\n    print(0)\\nelse:\\n    ans=min(findout(a,b,h,w,factor),findout(a,b,w,h,factor))\\n    if ans!=10**9+1:\\n        print(ans)\\n    else:\\n        print(-1)\\n                \\n                \\n            \\n            \\n            \\n            \\n            \\n            \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n\", \"f = lambda: list(map(int, input().split()))\\na, b, h, w, n = f()\\nc = sorted(list(f()), key=lambda x: -x)\\nd = {(h, w), (w, h)}\\nfor i, q in enumerate([1] + c):\\n    for u, v in d.copy():\\n        h, w = u, v * q\\n        if a <= w and b <= h or a <= h and b <= w:\\n            print(i)\\n            return\\n        d.add((h, w))\\n        d.add((w, h))\\nprint(-1)\\n\", \"def gen(o, gen1):\\n    if o == len(my_arr):\\n        fp = 1\\n        sp = 1\\n        \\n        for i in range(len(my_arr)):\\n            fp *= my_arr[i][0] ** gen1[i]\\n            sp *= my_arr[i][0] ** (my_arr[i][1] - gen1[i])\\n            \\n        if (h * fp >= a and w * sp >= b) or (h * fp >= b and w * sp >= a):\\n            return True\\n        \\n        return False\\n    \\n    for i in range(my_arr[o][1] + 1):\\n        if gen(o + 1, gen1 + [i]):\\n            return True\\n        \\n    return False\\n\\n\\na, b, h, w, n = map(int, input().split())\\n\\narr = list(map(int, input().split()))\\narr.sort(reverse = True)\\n\\narr2 = []\\nfor i in range(n):\\n    if (not i) or arr[i] != arr[i - 1]:\\n        arr2.append([arr[i], 1])\\n    else:\\n        arr2[-1][1] += 1\\n    \\n    \\nif (h >= a and w >= b) or (h >= b and w >= a):\\n    print(0)\\nelse:\\n    my_arr = []\\n    j = -1\\n    ans = -1\\n    for i in range(1, min(34, len(arr)) + 1):\\n        if my_arr and my_arr[-1] < arr2[j]:\\n            my_arr[-1][1] += 1\\n        else:\\n            j += 1\\n            my_arr.append([arr2[j][0], 1])\\n            \\n        if gen(0, []):\\n            ans = i\\n            break\\n        \\n    print(ans)\"]",
    "test": "{\n  \"inputs\": [\n    \"3 3 2 4 4\\n2 5 4 10\\n\",\n    \"3 3 3 3 5\\n2 3 5 4 2\\n\",\n    \"5 5 1 2 3\\n2 2 3\\n\",\n    \"3 4 1 1 3\\n2 3 2\\n\",\n    \"572 540 6 2 12\\n2 3 2 2 2 3 3 3 2 2 2 2\\n\",\n    \"375 905 1 1 17\\n2 2 3 3 3 3 3 3 2 2 2 2 3 2 2 2 3\\n\",\n    \"37 23 4 1 16\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"20 19 6 8 18\\n3 4 2 3 4 3 2 4 2 2 4 2 4 3 2 4 4 2\\n\",\n    \"11 11 5 3 11\\n4 4 2 4 3 2 2 3 2 2 3\\n\",\n    \"100000 100000 1 1 100\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"642 694 4 7 15\\n2 4 2 3 3 4 4 3 3 2 2 4 3 2 2\\n\",\n    \"100000 100000 1 1 2\\n100000 99999\\n\",\n    \"100000 100000 99999 99999 2\\n30000 30000\\n\",\n    \"41628 25266 1 1 36\\n2 2 2 3 2 2 2 2 3 3 2 3 2 3 3 3 3 2 3 2 2 3 3 3 2 2 2 2 2 2 2 2 2 2 2 3\\n\",\n    \"34640 40496 1 1 107\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"32716 43645 4 1 102\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"24812 24973 8 4 83\\n2 2 2 2 3 3 3 2 4 2 4 3 3 2 2 4 4 3 4 2 2 4 3 2 3 2 3 2 4 4 2 3 3 3 3 4 3 3 2 3 4 4 2 4 4 3 3 4 4 4 4 4 3 4 4 2 3 3 3 2 4 3 2 3 3 2 4 2 2 4 2 3 4 3 2 2 4 2 4 3 2 2 3\\n\",\n    \"21865 53623 9 7 116\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"21336 19210 1 1 73\\n4 4 3 4 4 2 3 2 4 2 3 2 4 2 4 4 2 3 4 3 4 3 2 3 3 3 2 4 2 2 3 4 2 2 3 3 4 3 3 3 3 4 2 4 2 3 3 4 4 2 4 4 2 3 4 3 4 3 3 4 2 4 4 4 2 2 3 3 2 4 4 2 2\\n\",\n    \"48490 41653 1 1 53\\n2 4 2 3 4 3 4 4 4 3 2 3 4 4 2 2 3 3 3 3 2 4 3 2 2 3 4 3 3 2 2 4 4 4 4 3 4 4 4 2 4 2 2 2 4 2 2 4 2 3 3 2 2\\n\",\n    \"33817 19277 7 8 192\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"63129 28077 1 1 31\\n3 3 4 3 2 2 3 4 3 4 4 3 3 2 3 3 4 3 3 3 2 3 2 3 4 2 4 3 4 2 2\\n\",\n    \"11731 17857 6 7 21\\n2 3 2 3 3 2 3 4 3 3 2 3 2 3 4 3 2 4 3 2 2\\n\",\n    \"82424 40643 9 2 200\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"1 1 1 1 1\\n100000\\n\",\n    \"100000 100000 1 1 2\\n100000 100000\\n\",\n    \"100000 100000 100000 100000 1\\n2\\n\",\n    \"496 390 6 8 15\\n4 2 4 4 2 4 2 3 2 4 3 2 2 2 3\\n\",\n    \"625 389 1 3 20\\n3 2 2 3 4 2 3 2 2 2 3 4 4 4 4 3 4 3 3 3\\n\",\n    \"154 206 6 1 12\\n3 2 3 3 2 3 3 2 3 2 2 2\\n\",\n    \"405 449 1 5 16\\n2 2 2 3 3 2 2 3 2 3 2 2 3 3 3 3\\n\",\n    \"662 859 2 3 17\\n3 2 2 2 3 3 3 2 3 3 2 3 2 2 2 2 2\\n\",\n    \"255 289 2 2 14\\n4 3 3 3 3 4 4 4 3 3 4 3 3 2\\n\",\n    \"596 688 1 6 19\\n3 4 4 2 2 4 2 3 4 2 2 3 3 3 2 2 2 4 3\\n\",\n    \"133 127 8 8 10\\n4 2 3 2 2 3 4 2 3 3\\n\",\n    \"32804 32321 10 13 34\\n3 3 3 2 3 2 2 2 2 3 2 2 2 2 2 3 3 3 2 2 3 3 3 2 2 2 3 3 2 2 2 2 3 2\\n\",\n    \"95589 93171 13 11 34\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"16526 20394 2 2 21\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"63481 80094 3 2 200\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"13801 10319 7 7 30\\n2 3 2 2 2 3 2 3 3 2 3 3 3 3 2 2 3 3 2 2 3 2 3 2 3 3 3 2 2 3\\n\",\n    \"100000 1 1 100000 3\\n3 4 100000\\n\",\n    \"1 100000 100000 1 1\\n100000\\n\",\n    \"100000 100000 1 100000 1\\n100000\\n\",\n    \"100000 100000 100000 1 2\\n300 300\\n\",\n    \"100000 100000 100000 1 2\\n100000 100000\\n\",\n    \"100000 100000 99999 99999 1\\n30000\\n\",\n    \"100000 100000 100000 99999 1\\n30000\\n\",\n    \"100000 100000 99999 100000 1\\n30000\\n\",\n    \"25 24 1 1 4\\n4 5 6 5\\n\",\n    \"100000 100000 1 1 17\\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59\\n\",\n    \"65536 78125 1 1 23\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 5 5 5 5 5 5 5\\n\",\n    \"78125 65536 1 1 23\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 5 5 5 5 5 5 5\\n\",\n    \"15625 65536 1 1 22\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 5 5 5 5 5 5\\n\",\n    \"65536 15625 1 1 22\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 5 5 5 5 5 5\\n\",\n    \"39366 39366 1 1 20\\n3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 3 2\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"14\\n\",\n    \"9\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"34\\n\",\n    \"8\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"23\\n\",\n    \"32\\n\",\n    \"29\\n\",\n    \"13\\n\",\n    \"25\\n\",\n    \"16\\n\",\n    \"16\\n\",\n    \"25\\n\",\n    \"18\\n\",\n    \"14\\n\",\n    \"29\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"7\\n\",\n    \"9\\n\",\n    \"9\\n\",\n    \"11\\n\",\n    \"13\\n\",\n    \"8\\n\",\n    \"9\\n\",\n    \"5\\n\",\n    \"16\\n\",\n    \"27\\n\",\n    \"-1\\n\",\n    \"30\\n\",\n    \"14\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"7\\n\",\n    \"23\\n\",\n    \"23\\n\",\n    \"22\\n\",\n    \"22\\n\",\n    \"20\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}