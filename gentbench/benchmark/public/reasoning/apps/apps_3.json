{
    "problem": "You are an expert Python programmer, and here is your task: A popular reality show is recruiting a new cast for the third season! $n$ candidates numbered from $1$ to $n$ have been interviewed. The candidate $i$ has aggressiveness level $l_i$, and recruiting this candidate will cost the show $s_i$ roubles.\n\nThe show host reviewes applications of all candidates from $i=1$ to $i=n$ by increasing of their indices, and for each of them she decides whether to recruit this candidate or not. If aggressiveness level of the candidate $i$ is strictly higher than that of any already accepted candidates, then the candidate $i$ will definitely be rejected. Otherwise the host may accept or reject this candidate at her own discretion. The host wants to choose the cast so that to maximize the total profit.\n\nThe show makes revenue as follows. For each aggressiveness level $v$ a corresponding profitability value $c_v$ is specified, which can be positive as well as negative. All recruited participants enter the stage one by one by increasing of their indices. When the participant $i$ enters the stage, events proceed as follows:\n\n  The show makes $c_{l_i}$ roubles, where $l_i$ is initial aggressiveness level of the participant $i$.  If there are two participants with the same aggressiveness level on stage, they immediately start a fight. The outcome of this is:\n\n  the defeated participant is hospitalized and leaves the show.  aggressiveness level of the victorious participant is increased by one, and the show makes $c_t$ roubles, where $t$ is the new aggressiveness level. \n\n The fights continue until all participants on stage have distinct aggressiveness levels. \n\nIt is allowed to select an empty set of participants (to choose neither of the candidates).\n\nThe host wants to recruit the cast so that the total profit is maximized. The profit is calculated as the total revenue from the events on stage, less the total expenses to recruit all accepted participants (that is, their total $s_i$). Help the host to make the show as profitable as possible.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$) \u2014 the number of candidates and an upper bound for initial aggressiveness levels.\n\nThe second line contains $n$ integers $l_i$ ($1 \\le l_i \\le m$) \u2014 initial aggressiveness levels of all candidates.\n\nThe third line contains $n$ integers $s_i$ ($0 \\le s_i \\le 5000$) \u2014 the costs (in roubles) to recruit each of the candidates.\n\nThe fourth line contains $n + m$ integers $c_i$ ($|c_i| \\le 5000$) \u2014 profitability for each aggrressiveness level.\n\nIt is guaranteed that aggressiveness level of any participant can never exceed $n + m$ under given conditions.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the largest profit of the show.\n\n\n-----Examples-----\nInput\n5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n\nOutput\n6\n\nInput\n2 2\n1 2\n0 0\n2 1 -100 -100\n\nOutput\n2\n\nInput\n5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n\nOutput\n62\n\n\n\n-----Note-----\n\nIn the first sample case it is optimal to recruit candidates $1, 2, 3, 5$. Then the show will pay $1 + 2 + 1 + 1 = 5$ roubles for recruitment. The events on stage will proceed as follows:\n\n  a participant with aggressiveness level $4$ enters the stage, the show makes $4$ roubles;  a participant with aggressiveness level $3$ enters the stage, the show makes $3$ roubles;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ rouble;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ roubles, a fight starts. One of the participants leaves, the other one increases his aggressiveness level to $2$. The show will make extra $2$ roubles for this. \n\nTotal revenue of the show will be $4 + 3 + 1 + 1 + 2=11$ roubles, and the profit is $11 - 5 = 6$ roubles.\n\nIn the second sample case it is impossible to recruit both candidates since the second one has higher aggressiveness, thus it is better to recruit the candidate $1$.",
    "solution": "[\"import sys\\ninput = sys.stdin.readline\\n\\nn,m=list(map(int,input().split()))\\nA=list(map(int,input().split()))\\nC=list(map(int,input().split()))\\nP=list(map(int,input().split()))\\n\\nDP=[[-1<<30]*(n+1) for i in range(5001)]\\n# DP[k][cnt] = A\\u306emax\\u304ck\\u3067, \\u305d\\u3046\\u3044\\u3046\\u4eba\\u9593\\u304ccnt\\u4eba\\u3044\\u308b\\u3068\\u304d\\u306eprofit\\u306e\\u6700\\u5927\\u5024\\n\\nfor i in range(5001):\\n    DP[i][0]=0\\n\\nfor i in range(n-1,-1,-1):\\n    a,c = A[i]-1,C[i]\\n\\n    for j in range(n,-1,-1):\\n        if DP[a][j]==-1<<30:\\n            continue\\n        \\n        if DP[a][j] - c + P[a] > DP[a][j+1]:\\n            DP[a][j+1] = DP[a][j] - c + P[a]\\n\\n            x, w=a, j+1\\n            while x+1<n+m:\\n                if DP[x+1][w//2] < DP[x][w] + w//2 * P[x+1]:\\n                    DP[x+1][w//2] = DP[x][w] + w//2 * P[x+1]\\n\\n                    x,w=x+1,w//2\\n                else:\\n                    break\\n\\nANS=0\\nfor i in range(5001):\\n    ANS=max(ANS,DP[i][0],DP[i][1])\\n\\nprint(ANS)\\n\\n\\n                    \\n                \\n\\n        \\n\\n    \\n\\n\\n\\n    \\n\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\",\n    \"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\",\n    \"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\\n\",\n    \"7 5\\n4 3 2 3 2 1 1\\n6 8 9 1 2 0 5\\n14 6 0 14 -12 -2 -13 10 -14 -3 10 -9\\n\",\n    \"7 4\\n1 4 3 2 1 3 1\\n8 2 2 1 4 3 2\\n-6 14 8 13 -8 -6 -23 1 -17 9 -13\\n\",\n    \"7 4\\n2 4 4 3 2 1 1\\n1 5 4 0 2 2 6\\n-2 9 12 8 -14 -19 -21 2 -4 -2 -2\\n\",\n    \"5 5\\n5 4 3 2 2\\n1 0 7 2 2\\n0 10 -1 10 11 -2 3 8 3 3\\n\",\n    \"5 4\\n4 3 2 1 1\\n2 2 2 1 4\\n2 3 3 4 -4 3 -5 -1 3\\n\",\n    \"15 15\\n14 13 12 11 10 9 8 7 6 5 4 3 2 1 1\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\\n\",\n    \"10 10\\n10 10 7 9 8 3 3 10 7 3\\n830 44 523 854 2814 3713 4060 4459 2969 1610\\n-4686 -3632 -3799 3290 -3703 -2728 -1734 3011 -4878 -2210 -4851 -3660 -2476 -2847 -2173 -4398 -2895 2446 3298 -86\\n\",\n    \"11 10\\n10 10 3 7 1 3 7 1 8 4 10\\n4760 2257 1313 2152 2236 3005 1453 1879 4098 582 3719\\n4696 1160 -1319 -4357 -3259 645 3495 3771 3591 -3196 4916 -2392 -2958 4242 -1219 -1239 4080 -4643 -1982 3780 2659\\n\",\n    \"15 15\\n5 8 12 12 9 15 10 2 3 15 1 14 4 5 9\\n2812 2979 2208 3179 339 3951 923 313 1223 1688 4429 52 1340 4222 152\\n-4371 462 -1975 4253 2289 30 -1722 -1356 -251 -1141 4081 -4048 -1448 -842 -4770 -3795 3790 624 -1575 1012 328 732 -4716 3180 -4174 870 4771 616 -1424 -2726\\n\",\n    \"15 15\\n4 3 11 11 1 14 14 15 13 4 5 9 7 1 13\\n2454 2857 3172 2380 1574 3888 368 4036 541 3490 2223 4670 3422 1351 4669\\n130 -3065 -4713 2646 -4470 -2753 -2444 -4997 3539 -2556 -4903 -239 3103 1893 -4313 3072 4228 -4430 60 720 -3131 3120 211 -4092 4564 -3658 -2648 -4914 -3123 -3085\\n\",\n    \"15 15\\n3 5 1 5 14 7 8 13 8 5 9 3 2 4 12\\n570 1841 1556 3107 388 3826 4815 2758 1385 3343 2437 2761 4873 1324 2659\\n4632 -2684 -3542 -1119 3088 4465 -3167 3521 -2673 -61 -1321 -338 3338 -3216 -2105 -2219 -4927 -3392 1288 21 3411 -177 3388 2952 1143 1408 2092 3466 1270 4806\\n\",\n    \"15 15\\n1 14 14 11 7 14 12 11 4 7 14 12 12 8 9\\n4582 3245 995 3834 1623 1183 3366 586 2229 144 1125 4327 1954 1929 1281\\n-1275 1632 -4529 -4883 2395 3433 -1731 -2278 3275 276 1854 3471 -3863 -481 2261 4648 -2330 -2354 4674 1886 -48 -3882 -1686 -3914 -2278 -1368 -3169 -2064 -4338 -3395\\n\",\n    \"15 15\\n1 9 13 4 5 13 7 9 13 11 3 13 6 5 15\\n2698 3754 4380 4561 1331 1121 2811 2783 2443 1946 3919 2418 984 4954 4272\\n3226 -145 4892 1353 -2206 650 -2453 -4168 4907 1019 3277 -4878 -1470 2253 2717 -2801 266 842 -4099 1187 -1350 664 3241 973 -1383 3698 -588 2407 -352 -3754\\n\",\n    \"15 15\\n14 4 3 11 4 6 10 7 9 12 7 8 3 9 12\\n814 3633 1869 3762 1671 1059 2257 1505 3287 273 659 510 2435 4928 3788\\n-2274 -3672 -3938 -254 -4649 -381 -3175 34 853 1356 -1391 -2820 923 -2855 4925 3660 2863 1880 -713 3053 3034 -4791 -3584 4108 -4804 -1237 -4098 -965 4041 4137\\n\",\n    \"15 5\\n5 5 5 3 3 3 1 1 1 4 4 4 2 2 2\\n1644 534 4138 987 4613 1026 949 3899 2283 2741 2410 2403 4397 1914 2642\\n150 -3027 2817 -2011 1025 868 3251 2072 1029 2552 -3131 -1843 -4546 -1218 3069 -2903 -396 3225 1837 -1914\\n\",\n    \"15 5\\n2 2 2 1 1 1 4 4 4 3 3 3 5 5 5\\n3194 3057 1570 1665 1987 2261 1604 2627 4570 909 4255 4162 1264 4430 4233\\n4739 -1245 4499 -1692 2441 3449 -2427 -1040 493 4550 -3594 459 421 -3844 -2431 3164 775 -540 -2764 -4697\\n\",\n    \"15 5\\n2 2 2 5 5 5 1 1 1 4 4 4 3 3 3\\n3218 4685 2478 2973 3467 4126 2259 4831 3805 1026 2626 920 2501 4367 3244\\n-674 130 -3820 378 3856 4280 -263 1941 2115 -1701 259 2761 1478 -4719 3822 -364 1947 -2147 -3457 4272\\n\",\n    \"15 5\\n1 1 1 2 2 2 4 4 4 3 3 3 5 5 5\\n822 1311 4281 176 3421 3834 3809 2033 4566 4194 4472 2680 4369 3408 1360\\n-4335 1912 20 697 -2978 -3139 1901 -2922 1579 4206 1954 -3187 -1399 91 -1678 17 960 4090 1943 1489\\n\",\n    \"15 5\\n5 5 5 2 2 2 1 1 1 4 4 4 3 3 3\\n846 359 1713 1484 794 698 4464 762 1853 836 3473 4439 606 3344 1002\\n2411 1130 3860 608 -1563 1601 2315 58 3201 -3797 1491 -885 1410 -783 4574 4333 380 2483 -2658 -1701\\n\",\n    \"1 15\\n11\\n65\\n576 -4348 3988 -4968 2212 -3005 4588 -4712 -415 -1088 -4887 -4884 -3043 -1838 4248 -3582\\n\",\n    \"1 1\\n1\\n499\\n-4955 898\\n\",\n    \"2 2\\n1 2\\n1007 1736\\n-4987 3535 -2296 29\\n\",\n    \"10 10\\n10 10 10 9 8 7 7 3 3 3\\n830 44 523 854 2814 3713 4060 4459 2969 1610\\n-4686 -3632 -3799 3290 -3703 -2728 -1734 3011 -4878 -2210 -4851 -3660 -2476 -2847 -2173 -4398 -2895 2446 3298 -86\\n\",\n    \"15 10\\n9 8 7 7 6 5 4 4 3 2 1 1 1 1 1\\n2644 4048 4800 1312 2891 2038 4341 2747 1350 2874 3740 1071 2300 685 4624\\n-1705 -2277 4485 -3115 400 -2543 -3577 1485 2868 -2463 4300 1482 -2802 -3134 3153 3259 -1913 -2517 -4236 -449 -1066 4992 -123 1914 3031\\n\",\n    \"1 1\\n1\\n524\\n797 1961\\n\",\n    \"34 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n2822 102 2574 4592 3908 2680 4902 2294 4587 4677 2868 607 2714 4991 2418 2889 3866 3830 4851 2016 4576 1317 615 1080 4227 2833 4099 3751 39 4984 3286 40 531 956\\n3367 357 4750 2417 -18 -2906 -2936 3643 2995 -4814 -1550 17 -1840 1214 -1389 1209 -4322 1054 2385 4088 2530 -3348 -2904 576 314 548 2699 -4336 4073 -81 -4823 2860 -3419 -4803 -4753\\n\",\n    \"2 2\\n1 2\\n2634 2643\\n-4281 3085 3380 4140\\n\",\n    \"34 2\\n2 2 1 2 2 2 1 1 2 2 2 2 2 1 1 2 1 2 1 2 1 1 2 1 1 1 1 1 1 1 2 2 2 1\\n2653 342 656 2948 1694 2975 4821 1095 2859 2510 1488 351 4108 4446 4943 2280 2299 1268 2319 3977 671 4063 3359 794 1776 1798 4683 1843 2357 219 256 4264 699 3714\\n4938 3918 -2490 2230 -2220 4499 3675 -3307 -1689 -3890 -1344 1153 54 2932 2640 586 -3996 4164 -1040 4812 1902 -1201 1714 -3666 840 4884 -2950 -4568 -2835 2784 735 3917 4623 4097 2317 3600\\n\",\n    \"34 5\\n2 2 5 4 3 1 3 5 3 1 3 1 3 5 5 2 1 3 3 3 1 1 1 4 5 1 3 2 5 5 2 1 2 2\\n1357 797 4642 4072 3953 4020 207 344 1412 4061 400 214 708 389 567 3294 1336 3746 1513 3539 4220 4720 329 4516 1741 1744 2537 3963 4941 664 1169 4512 3358 4144\\n-4668 -1085 109 -899 769 -1132 -2587 1503 760 -2869 4020 -3282 2208 -2320 -4892 441 -1651 2148 -3064 1853 19 -422 -2276 -4638 4575 -4674 -3828 -4453 -3962 999 -2160 3180 2681 -1365 3524 3994 2004 275 -1484\\n\",\n    \"20 6\\n5 1 4 3 6 5 3 5 4 3 5 5 2 1 6 1 4 3 1 1\\n13 18 7 3 8 2 8 11 17 7 10 10 5 19 0 19 8 5 0 19\\n12 9 7 -3 29 2 -35 22 -31 -35 18 -48 -49 -4 26 -47 -49 -25 -45 28 -25 -37 20 -1 -6 9\\n\",\n    \"20 20\\n19 18 18 14 12 11 9 7 7 7 7 6 5 5 4 3 3 2 2 2\\n4255 1341 1415 1501 3335 3407 4086 3255 2477 4608 1429 3275 1508 4896 3682 3157 3573 1764 1329 1781\\n4281 -430 254 3863 1420 3348 -2381 -2492 2710 1808 -3019 -197 -1269 1170 2647 -837 4442 1824 -3536 -3967 2789 -1845 2260 -1961 2087 4259 2587 1011 1170 -3828 561 2488 -4911 -2234 -2978 -114 2700 3078 -2993 771\\n\"\n  ],\n  \"outputs\": [\n    \"6\\n\",\n    \"2\\n\",\n    \"62\\n\",\n    \"46\\n\",\n    \"39\\n\",\n    \"36\\n\",\n    \"46\\n\",\n    \"11\\n\",\n    \"225\\n\",\n    \"197\\n\",\n    \"9973\\n\",\n    \"2913\\n\",\n    \"4087\\n\",\n    \"5693\\n\",\n    \"4753\\n\",\n    \"5269\\n\",\n    \"0\\n\",\n    \"2570\\n\",\n    \"8743\\n\",\n    \"11965\\n\",\n    \"1736\\n\",\n    \"12079\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1799\\n\",\n    \"197\\n\",\n    \"3359\\n\",\n    \"273\\n\",\n    \"72232\\n\",\n    \"442\\n\",\n    \"68654\\n\",\n    \"425\\n\",\n    \"93\\n\",\n    \"2985\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}