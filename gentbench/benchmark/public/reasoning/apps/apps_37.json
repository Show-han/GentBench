{
    "problem": "You are an expert Python programmer, and here is your task: Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer p_{i} (1 \u2264 p_{i} \u2264 n).\n\nLittle penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house p_{x}), then he goes to the house whose number is written on the plaque of house p_{x} (that is, to house p_{p}_{x}), and so on.\n\nWe know that:  When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1.  When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1.  When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. \n\nYou need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (10^9 + 7).\n\n\n-----Input-----\n\nThe single line contains two space-separated integers n and k (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 min(8, n)) \u2014 the number of the houses and the number k from the statement.\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the answer to the problem modulo 1000000007 (10^9 + 7).\n\n\n-----Examples-----\nInput\n5 2\n\nOutput\n54\n\nInput\n7 4\n\nOutput\n1728",
    "solution": "[\"n,k=list(map(int,input().split()))\\nM=10**9+7\\nprint(k**~-k*pow(n-k,n-k,M)%M)\\n\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\", \"n, k = map(int, input().split())\\nd = 1000000007\\ndef f(a, b):\\n    if b == 0: return 1\\n    s, c = 0, b * a\\n    for i in range(1, b + 1):\\n        s += c * f(i, b - i)\\n        c = (a * c * (b - i)) // (i + 1)\\n    return s\\nprint(k * f(1, k - 1) * pow(n - k, n - k, d) % d) \", \"n, k = map(int, input().split())\\nd = 1000000007\\nprint(pow(k, k - 1, d) * pow(n - k, n - k, d) % d)\", \"MOD = 10 ** 9 + 7\\nn, k = map(int, input().split())\\nans = pow(n - k, n - k, MOD) * pow(k, k - 1, MOD)\\nprint(ans % MOD)\", \"#cf288b.py\\nimport sys\\n(n,k)=list(map(int,sys.stdin.readline().split()))\\nmod_prime=1000000007\\nf=[0]*(k+2)\\n#f(x)= the number of ways that a group of x elements eventually leads to 1 (1 is not part of the group and does not points to anywhere)\\nf[0]=1\\nf[1]=1\\nc=[[1 for j in range(i+1)] for i in range (k)]\\nfor i in range(1,len(c)):\\n\\tfor j in range(1,len(c[i])-1):\\n\\t\\tc[i][j]=(c[i-1][j-1]+c[i-1][j])%mod_prime\\n#print (c)\\nfor x in range(2,k):\\n\\tf[x]=0\\n\\tfor i in range(0,x):\\n\\t\\tf[x]+=c[x-1][i]*f[i]*f[x-1-i]*(i+1)%mod_prime\\n\\t\\t#print(\\\"x={0},i={1},f[x]={2}\\\".format(x,i,f[x]))\\n\\nans=(k*f[k-1]*(n-k)**(n-k))%mod_prime\\n#print(f)\\nprint(ans)\\n\", \"(n, k), mod = list(map(int, input().split())), 1000000007\\nprint((k**(k-1)%mod)*((n-k)**(n-k)%mod)%mod)\\n\", \"inp = input().split(' ')\\nn = int(inp[0])\\nk = int(inp[1])\\nprint(k**(k-1)*(n-k)**(n-k) % 1000000007)\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\", \"n,k=map(int,input().split())\\nn-=k\\nprint(k**(k-1)*n**n%1000000007)\", \"n, k = map(int, input().split())\\nmod = 1000000007\\nprint(pow(k, k-1, mod) * pow(n-k, n-k, mod) % mod)\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\\n\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\\n\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\\n\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\\n\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\\n\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\\n\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\\n\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\\n\", \"a=list(map(int,input().split()))\\nn=a[0]\\nk=a[1]\\nrem=n-k\\npans=(rem**rem)%1000000007\\nrem1=n-rem-1\\npans1=((rem1+1)**rem1)%1000000007\\nans=(pans*pans1)%1000000007\\nprint(ans)\\n\", \"n,k = list(map(int,input().split()))\\nmod = 10 ** 9 + 7\\nprint(pow(k, k - 1, mod) * pow(n - k, n - k, mod) % mod)\\n\", \"n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\\n\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"n, k = map(int, input().split())\\nm = 1000000007\\nprint(pow(k, k - 1, m) * pow(n - k, n - k, m) % m)\", \"n,k = list(map(int,input().split()))\\nprint(((k**(k-1))*((n-k)**(n-k)))%((10**9)+7))\\n\", \"n,k = list(map(int,input().split()))\\n\\nm = 1000000007\\n\\nprint((pow(k,k-1,m)*pow(n-k,n-k,m))%m)\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"5 2\\n\",\n    \"7 4\\n\",\n    \"8 5\\n\",\n    \"8 1\\n\",\n    \"10 7\\n\",\n    \"12 8\\n\",\n    \"50 2\\n\",\n    \"100 8\\n\",\n    \"1000 8\\n\",\n    \"999 7\\n\",\n    \"685 7\\n\",\n    \"975 8\\n\",\n    \"475 5\\n\",\n    \"227 6\\n\",\n    \"876 8\\n\",\n    \"1000 1\\n\",\n    \"1000 2\\n\",\n    \"1000 3\\n\",\n    \"1000 4\\n\",\n    \"1000 5\\n\",\n    \"1000 6\\n\",\n    \"657 3\\n\",\n    \"137 5\\n\",\n    \"8 8\\n\",\n    \"9 8\\n\",\n    \"1 1\\n\",\n    \"2 1\\n\",\n    \"2 2\\n\",\n    \"3 3\\n\",\n    \"473 4\\n\"\n  ],\n  \"outputs\": [\n    \"54\\n\",\n    \"1728\\n\",\n    \"16875\\n\",\n    \"823543\\n\",\n    \"3176523\\n\",\n    \"536870912\\n\",\n    \"628702797\\n\",\n    \"331030906\\n\",\n    \"339760446\\n\",\n    \"490075342\\n\",\n    \"840866481\\n\",\n    \"531455228\\n\",\n    \"449471303\\n\",\n    \"407444135\\n\",\n    \"703293724\\n\",\n    \"760074701\\n\",\n    \"675678679\\n\",\n    \"330155123\\n\",\n    \"660270610\\n\",\n    \"583047503\\n\",\n    \"834332109\\n\",\n    \"771999480\\n\",\n    \"160909830\\n\",\n    \"2097152\\n\",\n    \"2097152\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"9\\n\",\n    \"145141007\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}