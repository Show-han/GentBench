{
    "problem": "You are an expert Python programmer, and here is your task: Twilight Sparkle was playing Ludo with her friends Rainbow Dash, Apple Jack and Flutter Shy. But she kept losing. Having returned to the castle, Twilight Sparkle became interested in the dice that were used in the game.\n\nThe dice has m faces: the first face of the dice contains a dot, the second one contains two dots, and so on, the m-th face contains m dots. Twilight Sparkle is sure that when the dice is tossed, each face appears with probability $\\frac{1}{m}$. Also she knows that each toss is independent from others. Help her to calculate the expected maximum number of dots she could get after tossing the dice n times.\n\n\n-----Input-----\n\nA single line contains two integers m and n (1 \u2264 m, n \u2264 10^5).\n\n\n-----Output-----\n\nOutput a single real number corresponding to the expected maximum. The answer will be considered correct if its relative or absolute error doesn't exceed 10 ^{ - 4}.\n\n\n-----Examples-----\nInput\n6 1\n\nOutput\n3.500000000000\n\nInput\n6 3\n\nOutput\n4.958333333333\n\nInput\n2 2\n\nOutput\n1.750000000000\n\n\n\n-----Note-----\n\nConsider the third test example. If you've made two tosses:  You can get 1 in the first toss, and 2 in the second. Maximum equals to 2.  You can get 1 in the first toss, and 1 in the second. Maximum equals to 1.  You can get 2 in the first toss, and 1 in the second. Maximum equals to 2.  You can get 2 in the first toss, and 2 in the second. Maximum equals to 2. \n\nThe probability of each outcome is 0.25, that is expectation equals to: $(2 + 1 + 2 + 2) \\cdot 0.25 = \\frac{7}{4}$\n\nYou can read about expectation using the following link: http://en.wikipedia.org/wiki/Expected_value",
    "solution": "[\"\\\"\\\"\\\"\\nCodeforces Contest 259 Div 1 Problem A\\n\\nAuthor  : chaotic_iak\\nLanguage: Python 3.3.4\\n\\\"\\\"\\\"\\n\\ndef main():\\n    m,n = read()\\n    print(m - sum((i/m)**n for i in range(1,m)))\\n\\n################################### NON-SOLUTION STUFF BELOW\\n\\ndef read(mode=2):\\n    # 0: String\\n    # 1: List of strings\\n    # 2: List of integers\\n    inputs = input().strip()\\n    if mode == 0: return inputs\\n    if mode == 1: return inputs.split()\\n    if mode == 2: return map(int, inputs.split())\\n\\ndef read_str(): return read(0)\\ndef read_int(): return read(2)[0]\\n\\ndef write(s=\\\"\\\\n\\\"):\\n    if isinstance(s, list): s = \\\" \\\".join(map(str, s))\\n    s = str(s)\\n    print(s, end=\\\"\\\")\\n\\nmain()\", \"__author__ = 'Jacob Dlougach'\\n\\ndef __starting_point():\\n    m, n = map(int, input().split())\\n    result = 0\\n    for i in range(m):\\n        result += ((i + 1) / m) ** n\\n    print('{:.9}'.format(m + 1 - result))\\n__starting_point()\", \"m,n = [int(x) for x in input().split()]\\n\\nans = m\\nfor i in range(1, m):\\n    ans -= (i/m)**n\\n\\nprint(\\\"%0.10f\\\"%ans)\\n\", \"m,n=list(map(int,input().split()))\\n\\nP=1\\nans=0\\n\\nwhile(m>0):\\n    p=P*(1-(((m-1)/m)**n))\\n    ans+=m*p\\n    m-=1\\n    P-=p\\nprint(ans)\\n\", \"m, n = list(map(int, input().split()))\\npvar = 0\\nans = 0\\nfor i in range(1, m + 1):\\n    var = (i / m) ** n\\n    ans += i * (var - pvar)\\n    pvar = var\\nprint(ans)\\n\", \"m, n = list(map(int, input().split()))\\nf = lambda x: (x / m) ** n\\nprint(\\\"{:.9}\\\".format(sum((f(i + 1) - f(i)) * (i + 1) for i in range(m))))\\n\", \"m, n = list(map(int, input().split()))\\nprint(\\\"{:.9}\\\".format(m - sum((i / m) ** n for i in range(m))))\\n\", \"m, n=list(map(int, input().split(' ')))\\nsumx=0\\nfor i in range(1, m+1):\\n    sumx+=i*((i/m)**n-((i-1)/m)**n)\\nprint(sumx)\\n\", \"import math\\nm,n=map(int,input().split(' '))\\n\\na = 0\\nb = 0\\no = 0\\nfor i in range(m) :\\n    a = ( (i+1)/m ) ** n;\\n    o = o + (a - b) * (i+1)\\n    b = a\\nprint(o)\", \"m, n = tuple(map(int, input().split()))\\n\\nans = 0\\nfor x in range(1, m + 1):\\n    ans += x * ((x / m)**n - ((x - 1)/m)**n)\\nprint('%0.9f' % ans)\", \"m, n = list(map(int, input().split()))\\nt = [pow(1 - i / m, n) for i in range(m + 1)]\\nprint(sum((t[i] - t[i + 1]) * (m - i) for i in range(m)))\\n\", \"from math import pow\\n\\nm , n = list(map(int,input().split()))\\nans = 0.0\\nsumx = 1.0\\n\\nfor i in range(1,m+1):\\n    ans += i * (pow(i/m,n)-pow((i-1.0)/m,n))\\nprint('%.15f'%ans)\\n\", \"from math import pow\\nm , n = list(map(int,input().split()))\\nans = 0.0\\nfor i in range(1,m+1):\\n    ans += i * (pow(i/m,n)-pow((i-1.0)/m,n))\\nprint('%.15f'%ans)\\n\", \"m, n = map(int, input().split());\\n\\nsum = 0.0;\\n\\nfor i in range(1, m + 1):\\n\\tsum += i * ((1.0 * i / m) ** n - ((i - 1.0) / m) ** n);\\n\\nprint (\\\"%.10lf\\\" % sum);\", \"m, n = map(int, input().split())\\nt = [pow(1 - i / m, n) for i in range(m + 1)]\\nprint(sum((t[i] - t[i + 1]) * (m - i) for i in range(m)))\", \"m, n = [int(x) for x in input().split()]\\nprint(sum(x * (pow(x / m, n) - pow((x - 1) / m, n)) for x in range(1, m + 1)))\\n\", \"def main():\\n    m, n = map(int, input().split())\\n    print(sum((i + 1) * (((i + 1) / m) ** n - (i / m) ** n) for i in range(m)))\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"def main():\\n    m, n = map(int, input().split())\\n    print(m - sum((i / m) ** n for i in range(m)))\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"m, n = [int(i) for i in input().split()]\\nans = 0\\nfor i in range(1,m+1):\\n    tmp_a = pow(i/m,n)\\n    tmp_b = pow((i-1)/m,n)\\n    ans += i*(tmp_a-tmp_b)\\nprint(ans)\\n\", \"import math\\n\\n\\ndef solve():\\n    [m, n] = [int(x) for x in input().split()]\\n\\n    ans = 0\\n    for i in range(m):\\n        ans += pow(i / m, n)\\n\\n    ans = m - ans\\n    print(ans)\\n\\ndef __starting_point():\\n    solve()\\n\\n\\n\\n\\n\\n__starting_point()\", \"m, n = [int(x) for x in input().split()]\\n\\n\\nprint(sum([i *((i/m) ** n - ((i-1)/m) ** n) for i in range(1, m + 1)]))\", \"from math import *\\ndef bpow(a, n):\\n    res = 1\\n    while n > 0:\\n        if n % 2 != 0:\\n            res *= a\\n        a *= a\\n        n >>= 1\\n    return res\\nM, N = map(int, input().split())\\nsm = 0\\nfor i in range(1, M):\\n    sm += bpow(i / M, N)\\nprint(M - sm)\", \"m, n = list(map(int, input().split()))\\n\\nret = m\\nfor i in range(m):\\n    ret -= pow(i / m, n)\\n\\nprint(ret)\\n\", \"m,n=[int(i) for i in input().split()]\\nr=m\\nfor i in range(1,m):\\n\\tr-=(i/m)**n\\nprint(r)\", \"import sys, math, string, fractions, functools, collections\\nsys.setrecursionlimit(10**7)\\nRI=lambda x=' ': list(map(int,input().rstrip().split(x)))\\nRS=lambda x=' ': input().rstrip().split(x)\\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\\nmod=int(1e9+7)\\neps=1e-6\\nMAX=1010\\n#################################################\\nans=0\\nm, n = RI()\\nfor i in range(1, m+1):\\n    ans+= i * (pow(i/m,n) - pow((i-1)/m, n))\\nprint(\\\"%.12f\\\" % ans)\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"6 1\\n\",\n    \"6 3\\n\",\n    \"2 2\\n\",\n    \"5 4\\n\",\n    \"5 8\\n\",\n    \"3 10\\n\",\n    \"3 6\\n\",\n    \"1 8\\n\",\n    \"24438 9\\n\",\n    \"94444 9\\n\",\n    \"8 66716\\n\",\n    \"4 25132\\n\",\n    \"51520 73331\\n\",\n    \"54230 31747\\n\",\n    \"24236 90163\\n\",\n    \"26946 99523\\n\",\n    \"50323 7\\n\",\n    \"53033 3\\n\",\n    \"55743 5\\n\",\n    \"59964 79\\n\",\n    \"1 1\\n\",\n    \"1 1\\n\",\n    \"3 1\\n\",\n    \"1 2\\n\",\n    \"53513 34040\\n\",\n    \"100000 100000\\n\",\n    \"1 100000\\n\",\n    \"100000 1\\n\",\n    \"2 100000\\n\",\n    \"100000 2\\n\",\n    \"50000 100000\\n\",\n    \"99999 1111\\n\",\n    \"99999 99999\\n\",\n    \"1000 1000\\n\",\n    \"50000 50000\\n\",\n    \"88888 88888\\n\",\n    \"99999 100000\\n\",\n    \"100000 555\\n\",\n    \"10000 10000\\n\",\n    \"100000 5001\\n\",\n    \"100000 1000\\n\"\n  ],\n  \"outputs\": [\n    \"3.500000000000\\n\",\n    \"4.958333333333\\n\",\n    \"1.750000000000\\n\",\n    \"4.433600000000\\n\",\n    \"4.814773760000\\n\",\n    \"2.982641534996\\n\",\n    \"2.910836762689\\n\",\n    \"1.000000000000\\n\",\n    \"21994.699969310015\\n\",\n    \"85000.099992058866\\n\",\n    \"8.000000000000\\n\",\n    \"4.000000000000\\n\",\n    \"51519.682650242677\\n\",\n    \"54228.743352775018\\n\",\n    \"24235.975171545670\\n\",\n    \"26945.974480086279\\n\",\n    \"44033.124988408454\\n\",\n    \"39775.249995286234\\n\",\n    \"46452.999992525307\\n\",\n    \"59214.949890211828\\n\",\n    \"1.000000000000\\n\",\n    \"1.000000000000\\n\",\n    \"2.000000000000\\n\",\n    \"1.000000000000\\n\",\n    \"53511.875329020870\\n\",\n    \"99999.418033254507\\n\",\n    \"1.000000000000\\n\",\n    \"50000.499999999935\\n\",\n    \"2.000000000000\\n\",\n    \"66667.166665000332\\n\",\n    \"49999.843487110789\\n\",\n    \"99909.571915885972\\n\",\n    \"99998.418033254609\\n\",\n    \"999.419018443269\\n\",\n    \"49999.418043215679\\n\",\n    \"88887.418034499773\\n\",\n    \"99998.418042461126\\n\",\n    \"99820.643422392372\\n\",\n    \"9999.418122897887\\n\",\n    \"99980.503829474910\\n\",\n    \"99900.599066768002\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}