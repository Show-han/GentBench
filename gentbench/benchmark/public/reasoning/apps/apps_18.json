{
    "problem": "You are an expert Python programmer, and here is your task: Some days ago, I learned the concept of LCM (least common multiple). I've played with it for several times and I want to make a big number with it.\n\nBut I also don't want to use many numbers, so I'll choose three positive integers (they don't have to be distinct) which are not greater than n. Can you help me to find the maximum possible least common multiple of these three integers?\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^6) \u2014 the n mentioned in the statement.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum possible LCM of three not necessarily distinct positive integers that are not greater than n.\n\n\n-----Examples-----\nInput\n9\n\nOutput\n504\n\nInput\n7\n\nOutput\n210\n\n\n\n-----Note-----\n\nThe least common multiple of some positive integers is the least positive integer which is multiple for each of them.\n\nThe result may become very large, 32-bit integer won't be enough. So using 64-bit integers is recommended.\n\nFor the last example, we can chose numbers 7, 6, 5 and the LCM of them is 7\u00b76\u00b75 = 210. It is the maximum value we can get.",
    "solution": "[\"def gcd(a, b):\\n    c = a % b\\n    return gcd(b, c) if c else b\\n\\ns, a = 0, int(input())\\nif a < 3: print(a)\\nelse:\\n    while a ** 3 > s:\\n        b = a - 1\\n        while a * b * b > s:\\n            if gcd(a, b) == 1:\\n                d = a * b\\n                c = b - 1\\n                while d * c > s:\\n                    if gcd(c, d) == 1: s = d * c\\n                    c -= 1\\n            b -= 1\\n        a -= 1\\n    print(s)\", \"n = int(input())\\nres = n * (n - 1)\\ngcd = lambda a, b: b if a % b == 0 else gcd(b, a % b)\\n\\nfor i in range(n - 2 if n % 2 != 0 else n - 3, 0, -2):\\n    if gcd(n, i) == 1 and gcd(n - 1, i) == 1:\\n        res = res * i if n % 2 != 0 else max(res * i, int(res / 2) * (n - 2),\\n                (n - 1) * (n - 2) * (n - 3))\\n        break\\n\\nif n < 3:\\n    res = n\\n\\nprint(res)\\n\", \"n = int(input())\\ngcd = lambda a, b: b if a % b == 0 else gcd(b, a % b)\\n\\nif n % 2:\\n    res = n * (n - 1) * (n - 2)\\nelse:\\n    for i in range(n - 3, 0, -2):\\n        if gcd(n, i) != 1 or gcd(n - 1, i) != 1:\\n            continue\\n        res = max(n * (n - 1) * i,\\n                int(n * (n - 1) / 2) * (n - 2),\\n                (n - 1) * (n - 2) * (n - 3))\\n        break\\n\\nif n < 3:\\n    res = n\\n\\nprint(res)\\n\", \"from fractions import gcd\\nn=int(input())\\n\\nans=0\\nfor i in range(n,max(0,n-101),-1):\\n    for j in range(i,max(0,n-101),-1):\\n        for k in range(j,max(0,n-101),-1):\\n            x=(i*j)//gcd(i,j)\\n            x=(x*k)//gcd(x,k)\\n            ans=max(ans,x)\\nprint(ans)\\n\", \"def gcd(a, b):\\n\\twhile a:\\n\\t\\tb %= a\\n\\t\\ta, b = b, a\\n\\treturn b\\n\\ndef lcm(a, b):\\n\\treturn a // gcd(a, b) * b\\n\\nn = int(input())\\nans = 0\\nfor i in range(n, max(0, n - 100), -1):\\n\\tfor j in range(i, max(0, i - 100), -1):\\n\\t\\tcur = lcm(i, j)\\n\\t\\tfor k in range(j, max(0, j - 100), -1):\\n\\t\\t\\tans = max(ans, lcm(cur, k))\\nprint(ans)\\n\", \"def gcd(a,b):\\n    #print(a,b)\\n    if b==0:\\n        return a\\n    else:\\n        return gcd(b,a%b)\\n\\ndef main():\\n    mode=\\\"filee\\\"\\n    if mode==\\\"file\\\":f=open(\\\"test.txt\\\",\\\"r\\\")\\n\\n    if mode==\\\"file\\\":n=int(f.readline())\\n    else:n=int(input())\\n    if n==1:\\n        print(\\\"1\\\")\\n        return\\n    if n==2:\\n        print(\\\"2\\\")\\n        return\\n    if n==3:\\n        print(\\\"6\\\")\\n        return\\n    if n==4:\\n        print(\\\"12\\\")\\n        return\\n    i=n+1\\n    [a,b,c]=[1,1,1]\\n    stop=20\\n    while i>=n//2 and i>n-stop:\\n        i-=1\\n        j=n\\n        while j>=n//2-1 and j>n-stop:\\n            j-=1\\n            if i==j:continue\\n            k=n-1\\n            while k>=n//2-2 and k>n-stop:\\n                k-=1\\n                if k==j:continue\\n                if gcd(i,j)==1 and gcd(i,k)==1 and gcd(j,k)==1:\\n                    if (i*j*k) > (a*b*c):\\n                        [a,b,c]=[i,j,k]\\n                        #print(i,j,k)\\n\\n    print(a*b*c)\\n    if mode==\\\"file\\\":f.close()\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n=int(input())\\nif(n<3):\\n    print(n)\\nelif(n%2==0):\\n    if(n%3==0 and (n-3)%3==0):\\n        print((n-1)*(n-2)*(n-3))\\n    else:\\n        print(n*(n-1)*(n-3))\\nelse:\\n    print(n*(n-1)*(n-2))\\n\", \"n=int(input())\\nif(n<3):\\n    print(n)\\nelif(n%2==0):\\n    if(n%3==0 and (n-3)%3==0):\\n        print((n-1)*(n-2)*(n-3))\\n    else:\\n        print(n*(n-1)*(n-3))\\nelse:\\n    print(n*(n-1)*(n-2))\\n\", \"def gcd(a,b):\\n    while b:\\n        a,b = b,a%b\\n    return a\\n\\ndef lcm(a,b):\\n    return a*b//gcd(a,b)\\n\\nn = int(input())\\nif n==1:\\n    print(1)\\nelif n==2:\\n    print(2)\\nelif n%2 == 1:\\n    print(lcm(n,lcm(n-2,n-1)))\\nelse :\\n    ans = 0\\n    for i in range(max(n-50,1),n+1) :\\n        for j in range(max(n-50,1),n+1) :\\n            for k in range(max(n-50,1),n+1) :\\n                ans = max(ans,lcm(i,lcm(j,k)))\\n    print(ans)\", \"def main():\\n    n = int(input())\\n    print(n if n < 3 else ((n - 1) * (n * (n - 2) if n & 1 else (n - 3) * (n if n % 3 else n - 2))))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\nprint(n if n < 3 else ((n - 1) * (n * (n - 2) if n & 1 else (n - 3) * (n if n % 3 else n - 2))))\", \"n = int(input())\\nif n < 3: \\n    print(n)\\n    return\\nif n % 2 != 0: \\n    print(n*(n-1)*(n-2))\\n    return\\nif n % 3 == 0: \\n    print((n - 3)* (n - 1) * (n - 2))\\n    return\\nprint((n - 1) * (n) * (n - 3))\\n\", \"#!/usr/bin/env python3\\nimport collections, itertools, functools, math, fractions\\nimport operator\\n\\ndef lcm(a, b):\\n    return (a*b)//fractions.gcd(a, b)\\n\\ndef solve(n):\\n    if n <= 2:\\n        return n\\n\\n    if n%2 == 1:\\n        return lcm(n, lcm(n-1, n-2))\\n\\n    offset = 100\\n    if n-offset < 0:\\n        offset = n\\n    r = 1\\n    for i in range(n, n-offset, -1):\\n        for j in range(i, n-offset, -1):\\n            for k in range(j, n-offset, -1):\\n                r = max(r, lcm(i, lcm(j, k)))\\n    return r\\n\\n\\ndef __starting_point():\\n    print(solve(int(input())))\\n\\n\\n__starting_point()\", \"from fractions import gcd\\ng=lambda a,b:a//gcd(a,b)*b\\nn=int(input())+1\\nm=max(1,n-50)\\nprint(max([g(a,g(b,c))for a in range(m,n)for b in range(m,n) for c in range(m,n)]))\", \"'''\\nCreated on May 4, 2016\\n@author: Md. Rezwanul Haque\\n'''\\nn = int (input())\\nif(n<3):print(n)\\nelif(n%2==0):\\n    if(n%3 == 0 and (n-3)%3 == 0):\\n        print((n-1)*(n-2)*(n-3))\\n    else:\\n        print(n*(n-1)*(n-3))\\nelse:\\n    print(n*(n-1)*(n-2))\\n\", \"from fractions import gcd\\n\\nn= int(input())\\n\\nlim = 50\\nr = 0\\n\\nif n <= 2 :\\n    print(n)\\nelif n == 3 :\\n    print(6)\\nelse:\\n    i = n\\n    while i>0 and i>n-lim:\\n        j = i-1\\n        while j>0 and j>n-lim:\\n            k = j-1\\n            while k>0 and k>n-lim:\\n                x = (i*j)//gcd(i,j)\\n                x = (k*x)//gcd(k,x)\\n                r = max(r,x)\\n                k -= 1\\n            j -= 1\\n        i -=1\\n    print(r)\", \"#!/usr/bin/env python3\\ndef read_string():\\n    return input()\\ndef read_strings(return_type = iter, split = None, skip = 0):\\n    return return_type(input().split(split)[skip:])\\ndef read_lines(height, return_type = iter):\\n    return return_type(read_string() for i in range(height))\\ndef read_number():\\n    return int(input())\\ndef read_numbers(return_type = iter, skip = 0):\\n    return return_type(int(i) for i in input().split()[skip:])\\ndef read_values(*types, array = None):\\n    line = input().split()\\n    result = []\\n    for return_type, i in zip(types, list(range(len(types)))):\\n        result.append(return_type(line[i]))\\n    if array != None:\\n        array_type, array_contained = array\\n        result.append(array_type(array_contained(i) for i in line[len(types):]))\\n    return result\\ndef read_array(item_type = int, return_type = iter, skip = 0):\\n    return return_type(item_type(i) for i in input().split()[skip:])\\ndef read_martix(height, **args):\\n    return_type = args[\\\"return_type\\\"] if \\\"return_type\\\" in args else iter\\n    return_type_inner = args[\\\"return_type_inner\\\"] if \\\"return_type_inner\\\" in args else return_type\\n    return_type_outer = args[\\\"return_type_outer\\\"] if \\\"return_type_outer\\\" in args else return_type\\n    item_type = args[\\\"item_type\\\"] if \\\"item_type\\\" in args else int\\n    return return_type_outer(read_array(item_type = item_type, return_type = return_type_inner) for i in range(height))\\ndef read_martix_linear(width, skip = 0, item_type = int, skiped = None):\\n    num = read_array(item_type = item_type, skip = skip)\\n    height = len(num) / width\\n    return [num[i * width: (i + 1) * width] for i in range(height)]\\ndef gcd(x, y):\\n    while x != 0:\\n        y %= x;\\n        if y == 0:\\n            return x;\\n        x %= y;\\n    return y;\\ndef lcm(x, y):\\n    return x * y // gcd(x, y)\\ndef main():\\n    n = read_number()\\n    r = list(range(max(1, n - 20), n+1))\\n    print(max([lcm(lcm(x,y),z) for x in r for y in r for z in r]))\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def gcd(x, y):\\n    if x: return gcd(y % x, x)\\n    return y\\ndef lcm(x, y):\\n    return x * y // gcd(x, y)\\nn = int(input())\\nr = list(range(max(1, n - 20), n+1))\\nprint(max([lcm(lcm(x,y),z) for x in r for y in r for z in r]))\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"9\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"33\\n\",\n    \"21\\n\",\n    \"2\\n\",\n    \"41\\n\",\n    \"29\\n\",\n    \"117\\n\",\n    \"149\\n\",\n    \"733\\n\",\n    \"925\\n\",\n    \"509\\n\",\n    \"829\\n\",\n    \"117\\n\",\n    \"605\\n\",\n    \"245\\n\",\n    \"925\\n\",\n    \"213\\n\",\n    \"53\\n\",\n    \"341\\n\",\n    \"21\\n\",\n    \"605\\n\",\n    \"149\\n\",\n    \"733\\n\",\n    \"117\\n\",\n    \"53\\n\",\n    \"245\\n\",\n    \"829\\n\",\n    \"924\\n\",\n    \"508\\n\",\n    \"700\\n\",\n    \"636\\n\",\n    \"20\\n\",\n    \"604\\n\",\n    \"796\\n\",\n    \"732\\n\",\n    \"412\\n\",\n    \"700\\n\",\n    \"244\\n\",\n    \"828\\n\",\n    \"508\\n\",\n    \"796\\n\",\n    \"636\\n\",\n    \"924\\n\",\n    \"245\\n\",\n    \"828\\n\",\n    \"21\\n\",\n    \"605\\n\",\n    \"636\\n\",\n    \"924\\n\",\n    \"116\\n\",\n    \"700\\n\",\n    \"732\\n\",\n    \"20\\n\",\n    \"508\\n\",\n    \"148\\n\",\n    \"828\\n\",\n    \"763116\\n\",\n    \"756604\\n\",\n    \"447244\\n\",\n    \"372636\\n\",\n    \"546924\\n\",\n    \"540412\\n\",\n    \"714700\\n\",\n    \"520731\\n\",\n    \"695019\\n\",\n    \"688507\\n\",\n    \"862795\\n\",\n    \"668827\\n\",\n    \"810411\\n\",\n    \"836603\\n\",\n    \"978187\\n\",\n    \"816923\\n\",\n    \"958507\\n\",\n    \"984699\\n\",\n    \"642635\\n\",\n    \"296604\\n\",\n    \"1000000\\n\",\n    \"8\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"30\\n\",\n    \"18\\n\",\n    \"12\\n\"\n  ],\n  \"outputs\": [\n    \"504\\n\",\n    \"210\\n\",\n    \"1\\n\",\n    \"60\\n\",\n    \"60\\n\",\n    \"32736\\n\",\n    \"7980\\n\",\n    \"2\\n\",\n    \"63960\\n\",\n    \"21924\\n\",\n    \"1560780\\n\",\n    \"3241644\\n\",\n    \"392222436\\n\",\n    \"788888100\\n\",\n    \"131096004\\n\",\n    \"567662724\\n\",\n    \"1560780\\n\",\n    \"220348260\\n\",\n    \"14526540\\n\",\n    \"788888100\\n\",\n    \"9527916\\n\",\n    \"140556\\n\",\n    \"39303660\\n\",\n    \"7980\\n\",\n    \"220348260\\n\",\n    \"3241644\\n\",\n    \"392222436\\n\",\n    \"1560780\\n\",\n    \"140556\\n\",\n    \"14526540\\n\",\n    \"567662724\\n\",\n    \"783776526\\n\",\n    \"130065780\\n\",\n    \"341042100\\n\",\n    \"254839470\\n\",\n    \"6460\\n\",\n    \"218891412\\n\",\n    \"501826260\\n\",\n    \"389016270\\n\",\n    \"69256788\\n\",\n    \"341042100\\n\",\n    \"14289372\\n\",\n    \"563559150\\n\",\n    \"130065780\\n\",\n    \"501826260\\n\",\n    \"254839470\\n\",\n    \"783776526\\n\",\n    \"14526540\\n\",\n    \"563559150\\n\",\n    \"7980\\n\",\n    \"220348260\\n\",\n    \"254839470\\n\",\n    \"783776526\\n\",\n    \"1507420\\n\",\n    \"341042100\\n\",\n    \"389016270\\n\",\n    \"6460\\n\",\n    \"130065780\\n\",\n    \"3154620\\n\",\n    \"563559150\\n\",\n    \"444394078546562430\\n\",\n    \"433115377058855412\\n\",\n    \"89460162932862372\\n\",\n    \"51742503205363470\\n\",\n    \"163597318076822526\\n\",\n    \"157823524476316788\\n\",\n    \"365063922340784100\\n\",\n    \"141201007712496270\\n\",\n    \"335728459024850814\\n\",\n    \"326379736779169710\\n\",\n    \"642275489615199390\\n\",\n    \"299184742915995150\\n\",\n    \"532248411551110590\\n\",\n    \"585540171302562606\\n\",\n    \"935975171582120670\\n\",\n    \"545182335484592526\\n\",\n    \"880611813728059710\\n\",\n    \"954792870629291694\\n\",\n    \"265393998349453470\\n\",\n    \"26092892528622606\\n\",\n    \"999996000003000000\\n\",\n    \"280\\n\",\n    \"6\\n\",\n    \"12\\n\",\n    \"21924\\n\",\n    \"4080\\n\",\n    \"990\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}