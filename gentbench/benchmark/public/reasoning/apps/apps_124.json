{
    "problem": "You are an expert Python programmer, and here is your task: You all know that the Library of Bookland is the largest library in the world. There are dozens of thousands of books in the library.\n\nSome long and uninteresting story was removed...\n\nThe alphabet of Bookland is so large that its letters are denoted by positive integers. Each letter can be small or large, the large version of a letter x is denoted by x'. BSCII encoding, which is used everywhere in Bookland, is made in that way so that large letters are presented in the order of the numbers they are denoted by, and small letters are presented in the order of the numbers they are denoted by, but all large letters are before all small letters. For example, the following conditions hold: 2 < 3, 2' < 3', 3' < 2.\n\nA word x_1, x_2, ..., x_{a} is not lexicographically greater than y_1, y_2, ..., y_{b} if one of the two following conditions holds:   a \u2264 b and x_1 = y_1, ..., x_{a} = y_{a}, i.e. the first word is the prefix of the second word;  there is a position 1 \u2264 j \u2264 min(a, b), such that x_1 = y_1, ..., x_{j} - 1 = y_{j} - 1 and x_{j} < y_{j}, i.e. at the first position where the words differ the first word has a smaller letter than the second word has.  \n\nFor example, the word \"3' 7 5\" is before the word \"2 4' 6\" in lexicographical order. It is said that sequence of words is in lexicographical order if each word is not lexicographically greater than the next word in the sequence.\n\nDenis has a sequence of words consisting of small letters only. He wants to change some letters to large (let's call this process a capitalization) in such a way that the sequence of words is in lexicographical order. However, he soon realized that for some reason he can't change a single letter in a single word. He only can choose a letter and change all of its occurrences in all words to large letters. He can perform this operation any number of times with arbitrary letters of Bookland's alphabet.\n\nHelp Denis to choose which letters he needs to capitalize (make large) in order to make the sequence of words lexicographically ordered, or determine that it is impossible.\n\nNote that some words can be equal.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000)\u00a0\u2014 the number of words and the number of letters in Bookland's alphabet, respectively. The letters of Bookland's alphabet are denoted by integers from 1 to m.\n\nEach of the next n lines contains a description of one word in format l_{i}, s_{i}, 1, s_{i}, 2, ..., s_{i}, l_{i} (1 \u2264 l_{i} \u2264 100 000, 1 \u2264 s_{i}, j \u2264 m), where l_{i} is the length of the word, and s_{i}, j is the sequence of letters in the word. The words are given in the order Denis has them in the sequence.\n\nIt is guaranteed that the total length of all words is not greater than 100 000.\n\n\n-----Output-----\n\nIn the first line print \"Yes\" (without quotes), if it is possible to capitalize some set of letters in such a way that the sequence of words becomes lexicographically ordered. Otherwise, print \"No\" (without quotes).\n\nIf the required is possible, in the second line print k\u00a0\u2014 the number of letters Denis has to capitalize (make large), and in the third line print k distinct integers\u00a0\u2014 these letters. Note that you don't need to minimize the value k.\n\nYou can print the letters in any order. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n\nOutput\nYes\n2\n2 3 \nInput\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n\nOutput\nYes\n0\n\nInput\n4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n\nOutput\nNo\n\n\n\n-----Note-----\n\nIn the first example after Denis makes letters 2 and 3 large, the sequence looks like the following:  2'  1  1 3' 2'  1 1 \n\nThe condition 2' < 1 holds, so the first word is not lexicographically larger than the second word. The second word is the prefix of the third word, so the are in lexicographical order. As the first letters of the third and the fourth words are the same, and 3' < 1, then the third word is not lexicographically larger than the fourth word.\n\nIn the second example the words are in lexicographical order from the beginning, so Denis can do nothing.\n\nIn the third example there is no set of letters such that if Denis capitalizes them, the sequence becomes lexicographically ordered.",
    "solution": "[\"from collections import defaultdict, deque\\n\\ndef main():\\n    n,m = map(int, input().split())\\n    cap = [None]*(m+1)\\n    same_cap = defaultdict(list)\\n    q = deque()\\n\\n    def apply_cap(a, c):\\n        if cap[a] is not None:\\n            return cap[a] == c\\n        q.append((a,c))\\n        while q:\\n            b = q.pop()\\n            if b[1] == c:\\n                if cap[b[0]] is None:\\n                    cap[b[0]] = c\\n                    q.extend(same_cap[b[0]])\\n                    same_cap[b[0]] = []\\n                elif cap[b[0]]!=c:\\n                    return False\\n\\n        return True\\n\\n    def same(a,b):\\n        same_cap[b].append((a,True))\\n        same_cap[a].append((b,False))\\n\\n        if cap[a] == False:\\n            return apply_cap(b, False)\\n\\n        if cap[b] == True:\\n            return apply_cap(a, True)\\n\\n        return True\\n\\n    def process(p,c):\\n        lp = p[0]\\n        lc = c[0]\\n        for i in range(1, min(lp,lc)+1):\\n            if p[i]>c[i]:\\n                return apply_cap(p[i], True) and apply_cap(c[i], False)\\n            if p[i]<c[i]:\\n                return same(p[i], c[i])\\n        return lp<=lc\\n\\n    p = list(map(int, input().split()))\\n    for i in range(n-1):\\n        c = list(map(int, input().split()))\\n        if not process(p, c):\\n            print ('No')\\n            break\\n        p = c\\n    else:\\n        print ('Yes')\\n        res = []\\n        for i,b in enumerate(cap):\\n            if b:\\n                res.append(i)\\n        print(len(res))\\n        print(' '.join(map(str,res)))\\n\\nmain()\", \"# -*- coding: utf-8 -*-\\n\\n\\n\\nimport math\\n\\nimport collections\\n\\nimport bisect\\n\\nimport heapq\\n\\nimport time\\n\\nimport random\\n\\nimport itertools\\n\\n\\n\\n\\\"\\\"\\\"\\n\\ncreated by shhuan at 2017/10/18 16:22\\n\\n\\n\\n\\\"\\\"\\\"\\n\\n\\n\\nM, N = list(map(int, input().split()))\\n\\n\\n\\nwords = []\\n\\nfor i in range(M):\\n\\n    words.append([int(x) for x in input().split()][1:])\\n\\n\\n\\n# all elements in C should be capitalized\\n\\nC = set()\\n\\n\\n\\n# E[u][v] means if we capitalize u, we must capitalize v\\n\\nE = collections.defaultdict(list)\\n\\n\\n\\nfor i in range(M-1):\\n\\n    w1 = words[i]\\n\\n    w2 = words[i+1]\\n\\n\\n\\n    if len(w1) > len(w2) and w1[:len(w2)] == w2:\\n\\n        print('No')\\n\\n        return\\n\\n    for j in range(min(len(w1), len(w2))):\\n\\n        if w1[j] < w2[j]:\\n\\n            E[w2[j]].append(w1[j])\\n\\n            break\\n\\n        elif w1[j] > w2[j]:\\n\\n            C.add(w1[j])\\n\\n            break\\n\\n\\n\\n# add all letters should be capitalized based on E\\n\\nA = {u for u in C}\\n\\nwhile A:\\n\\n    B = set(itertools.chain.from_iterable([E[u] for u in A]))\\n\\n    A = B - C\\n\\n    C |= B\\n\\n\\n\\n# check\\n\\nfor i in range(M-1):\\n\\n    w1 = words[i]\\n\\n    w2 = words[i+1]\\n\\n\\n\\n    for j in range(min(len(w1), len(w2))):\\n\\n        a, b = w1[j], w2[j]\\n\\n        d = [a in C, b in C]\\n\\n        if a < b:\\n\\n            if d == [False, True]:\\n\\n                print('No')\\n\\n                return\\n\\n            break\\n\\n        elif a > b:\\n\\n            if d != [True, False]:\\n\\n                print('No')\\n\\n                return\\n\\n            break\\n\\n\\n\\nprint('Yes')\\n\\nprint(len(C))\\n\\nif C:\\n\\n    print(\\\" \\\".join(map(str, sorted(C))))\\n\\n\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"4 3\\n1 2\\n1 1\\n3 1 3 2\\n2 1 1\\n\",\n    \"6 5\\n2 1 2\\n2 1 2\\n3 1 2 3\\n2 1 5\\n2 4 4\\n2 4 4\\n\",\n    \"4 3\\n4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\\n\",\n    \"4 4\\n3 3 4 1\\n4 3 4 2 2\\n4 2 1 2 3\\n3 4 2 2\\n\",\n    \"3 5\\n2 1 2\\n2 1 5\\n2 4 4\\n\",\n    \"2 1\\n10 1 1 1 1 1 1 1 1 1 1\\n25 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"10 3\\n2 3 2\\n1 3\\n3 1 3 3\\n1 2\\n2 1 2\\n3 2 2 3\\n3 3 2 1\\n1 2\\n2 1 2\\n4 1 2 2 3\\n\",\n    \"10 3\\n2 3 1\\n1 2\\n1 1\\n1 1\\n2 3 1\\n1 2\\n2 3 1\\n1 1\\n1 3\\n2 3 2\\n\",\n    \"10 10\\n8 1 1 6 10 2 2 9 7\\n6 2 7 1 9 5 10\\n1 5\\n7 3 6 9 6 3 7 6\\n10 3 9 10 3 6 7 10 6 9 6\\n10 4 4 9 8 2 10 3 6 2 9\\n8 4 8 6 4 6 4 8 6\\n2 7 5\\n6 8 6 2 1 9 8\\n3 10 2 10\\n\",\n    \"10 10\\n8 2 1 3 2 10 5 4 1\\n6 2 1 7 5 7 1\\n9 2 1 7 5 8 2 8 2 9\\n3 2 1 9\\n7 2 9 2 2 10 1 7\\n10 2 9 2 2 10 1 7 4 1 10\\n5 3 5 2 4 4\\n7 3 5 9 6 6 5 4\\n2 5 6\\n6 5 9 8 7 6 9\\n\",\n    \"10 4\\n2 1 4\\n2 1 4\\n9 1 4 1 2 3 1 4 4 2\\n1 4\\n4 4 1 4 3\\n7 4 4 4 4 1 4 2\\n4 4 2 4 3\\n4 2 4 4 4\\n1 3\\n9 3 3 3 4 2 3 3 2 4\\n\",\n    \"3 3\\n1 3\\n1 2\\n1 1\\n\",\n    \"2 2\\n2 1 2\\n1 1\\n\",\n    \"2 3\\n3 1 2 3\\n2 1 2\\n\",\n    \"2 100000\\n5 1 2 3 1 5\\n3 1 2 3\\n\",\n    \"4 5\\n2 1 5\\n2 1 4\\n2 2 3\\n2 2 5\\n\",\n    \"2 100\\n3 1 2 3\\n1 1\\n\",\n    \"5 5\\n1 5\\n1 4\\n1 3\\n1 2\\n1 1\\n\",\n    \"2 1\\n2 1 1\\n1 1\\n\",\n    \"2 3\\n2 1 3\\n1 1\\n\",\n    \"6 100\\n1 3\\n1 5\\n2 7 5\\n2 7 2\\n3 7 7 2\\n3 7 7 3\\n\"\n  ],\n  \"outputs\": [\n    \"Yes\\n2\\n2 3 \",\n    \"Yes\\n0\\n\",\n    \"No\\n\",\n    \"Yes\\n1\\n3 \",\n    \"Yes\\n0\\n\",\n    \"Yes\\n0\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n3\\n1 2 5 \",\n    \"Yes\\n0\\n\",\n    \"Yes\\n2\\n1 4 \",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n2\\n3 5 \",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}