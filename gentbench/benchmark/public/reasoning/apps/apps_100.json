{
    "problem": "You are an expert Python programmer, and here is your task: Yaroslav has an array, consisting of (2\u00b7n - 1) integers. In a single operation Yaroslav can change the sign of exactly n elements in the array. In other words, in one operation Yaroslav can select exactly n array elements, and multiply each of them by -1.\n\nYaroslav is now wondering: what maximum sum of array elements can be obtained if it is allowed to perform any number of described operations?\n\nHelp Yaroslav.\n\n\n-----Input-----\n\nThe first line contains an integer n (2 \u2264 n \u2264 100). The second line contains (2\u00b7n - 1) integers \u2014 the array elements. The array elements do not exceed 1000 in their absolute value.\n\n\n-----Output-----\n\nIn a single line print the answer to the problem \u2014 the maximum sum that Yaroslav can get.\n\n\n-----Examples-----\nInput\n2\n50 50 50\n\nOutput\n150\n\nInput\n2\n-1 -100 -1\n\nOutput\n100\n\n\n\n-----Note-----\n\nIn the first sample you do not need to change anything. The sum of elements equals 150.\n\nIn the second sample you need to change the sign of the first two elements. Then we get the sum of the elements equal to 100.",
    "solution": "[\"n = int(input())\\na = list(map(int, input().split()))\\n\\nabs_a = [abs(v) for v in a]\\nneg = sum(v < 0 for v in a)\\nif n % 2 == 1 or neg % 2 == 0 or any(v == 0 for v in a):\\n    print(sum(abs_a))\\nelse:\\n    print(sum(abs_a) - 2 * min(abs_a))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = 0\\nfor i in a:\\n  if i < 0:\\n    b += 1\\nc = list(map(abs, a))\\nif b & 1 and n + 1 & 1:\\n  print(sum(c) - 2 * min(c))\\nelse:\\n  print(sum(c))\", \"n = int(input())\\na = list(map(int, input().split()))\\nc = list(map(abs, a))\\nif len(list(filter(lambda x: x < 0, a))) & 1 and n + 1 & 1:\\n  print(sum(c) - 2 * min(c))\\nelse:\\n  print(sum(c))\", \"n, t = int(input()), list(map(int, input().split()))\\np = list(map(abs, t))\\ns = sum(p)\\nif n & 1 == 0 and len([0 for i in t if i < 0]) & 1: s -= 2 * min(p)\\nprint(s)\", \"def numneg(arr):\\n    s = 0\\n    for x in arr:\\n        if x < 0:\\n            s += 1\\n    return s\\ndef negmax(arr):\\n    maxi = float('inf')\\n    for x in arr:\\n        if abs(x) < maxi:\\n            maxi = abs(x)\\n    return -maxi\\ndef sumabs(arr):\\n    s = 0\\n    for x in arr:\\n        s += abs(x)\\n    return s\\nn = int(input())\\na = list(map(int, input().split()))\\nif numneg(a) % 2 == 0 or n % 2 == 1:\\n    print(sumabs(a))\\nelse:\\n    print(sumabs(a) + negmax(a) * 2)\\n\", \"3\\n\\nn = int(input())\\ndata = list(map(int, input().split()))\\n\\nnegative, zero, positive = 0, 0, 0\\nfor x in data:\\n    if x < 0:\\n        negative += 1\\n    elif x == 0:\\n        zero += 1\\n    else:\\n        positive += 1\\n\\nseen = {}\\nmin_negative = negative\\n\\ndef go(negative, positive):\\n    nonlocal n, min_negative\\n    if (negative, positive) in seen:\\n        return\\n    seen[(negative, positive)] = True\\n    min_negative = min(min_negative, negative)\\n    for i in range(min(n, negative)+1):\\n        for j in range(min(n-i, zero)+1):\\n            k = n - i - j\\n            if k <= positive:\\n                go(negative-i+k, positive-k+i)\\n\\ngo(negative, positive)\\n\\nvalues = sorted(list(map(abs, data)))\\nfor i in range(min_negative):\\n    values[i] *= -1\\n\\nprint(sum(values))\\n\\n\", \"3\\n\\nn = int(input())\\ndata = list(map(int, input().split()))\\n\\nx = 0\\nfor element in data:\\n    if element < 0:\\n        x += 1\\n\\nvalues = sorted(list(map(abs, data)))\\nresult = sum(values)\\nif n % 2 == 0 and x % 2 == 1:\\n    result -= 2*values[0]\\n\\nprint(result)\\n\\n\", \"def main():\\n\\tn = int(input())\\n\\tseq = list(map(int, input().split()))\\n\\tneg = [x for x in seq if x < 0]\\n\\n\\tseq = [abs(x) for x in seq]\\n\\tans = sum(seq)\\n\\n\\tif n%2==0 and len(neg)%2==1:\\n\\t\\tans = ans - (2 * sorted(seq)[0])\\n\\t\\n\\tprint(ans)\\n\\n\\ndef __starting_point():\\n    main()\\n    \\n\\n__starting_point()\", \"def main():\\n    n = int(input())\\n    l = list(map(int, input().split()))\\n    res = sum(map(abs, l))\\n    if not n & 1 and sum(x < 0 for x in l) & 1:\\n        res -= abs(min(l, key=abs)) * 2\\n    print(res)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"N = int( input() )\\nA = list( map( int, input().split() ) )\\n\\nneg = sum( A[ i ] < 0 for i in range( len( A ) ) )\\nif 0 in A or N % 2 == 1:\\n  neg = 0\\n\\nB = sorted( [ abs( A[ i ] ) for i in range( len( A ) ) ] )\\nif neg & 1:\\n  print( - abs( B[ 0 ] ) + sum( B[ i ] for i in range( 1, len( B ), 1 ) ) )\\nelse:\\n  print( sum( B[ i ] for i in range( len( B ) ) ) )\\n\", \"n = int(input())\\na=[int(x) for x in input().split()]\\ncount=0\\nfor i in range(2*n-1):\\n    if (a[i]<0):\\n        count+=1\\nif (n%2==0 and count%2!=0):\\n    for i in range(2 * n - 1):\\n        if (a[i] < 0):\\n            a[i] = a[i]*(-1)\\n    a = sorted(a)\\n    a[0] = a[0]*(-1)\\n    print(sum(a))\\n\\nelse:\\n    for i in range(2*n-1):\\n        if (a[i]<0):\\n            a[i]=a[i]*(-1)\\n    print(sum(a))\", \"n = int(input())\\n\\na = list(map(int, input().split()))\\n\\nc = list(map(abs, a))\\n\\nif len(list(filter(lambda x: x < 0, a))) & 1 and n + 1 & 1:\\n\\n  print(sum(c) - 2 * min(c))\\n\\nelse:\\n\\n  print(sum(c))\", \"n = int(input())\\nlst = [int(x) for x in input().split()]\\nx = len([elem for elem in lst if elem < 0])\\nvalues = sorted([abs(elem) for elem in lst])\\nresult = sum(values)\\nif n % 2 == 0 and x % 2 == 1:\\n    result -= 2 * values[0]\\nprint(result)\\n\", \"n = int(input())\\na = list(map(int,input().split()))\\nx = list(map(abs,a))\\nsm = sum(x)\\n# print(sm)\\nif n&1==0 and len([0 for i in a if i<0])&1==1:\\n    sm-=2*min(x)\\nprint(sm)\", \"n=int(input())\\np=[int(x) for x in input().split()]\\ns=0\\nfor i in p:\\n    if i<=0:\\n        s+=1\\nif n%2==0 and s%2!=0:\\n    q = 1000\\n    for i in p:\\n        if  abs(i) <= q:\\n            q = abs(i)\\n    print(sum(abs(i) for i in p) - 2 * q)\\n\\nelse:\\n        print(sum(abs(i) for i in p))\\n\\n\\n\\n\\n\\n\\n\\n\", \"n = int(input())\\na = sorted(map(int, input().split()))\\nb = map(lambda x: abs(x), a)\\nans = sum(a)\\nfor i in range(1, n+n-1, 2):\\n    a[i] *= -1\\n    a[i-1] *= -1\\n    ans = max(ans, sum(a))\\nif n % 2 == 1:\\n    ans = max(ans, sum(b))\\nprint (ans)\"]",
    "test": "{\n  \"inputs\": [\n    \"2\\n50 50 50\\n\",\n    \"2\\n-1 -100 -1\\n\",\n    \"3\\n-959 -542 -669 -513 160\\n\",\n    \"4\\n717 473 344 -51 -548 703 -869\\n\",\n    \"5\\n270 -181 957 -509 -6 937 -175 434 -625\\n\",\n    \"6\\n-403 901 -847 -708 -624 413 -293 709 886 445 716\\n\",\n    \"7\\n-236 533 869 903 655 -714 27 890 -311 800 307 -682 665\\n\",\n    \"8\\n-338 134 708 -761 -135 535 631 -354 -259 -973 -147 -281 737 516 -222\\n\",\n    \"9\\n-690 34 -821 842 -712 -909 36 -62 255 -363 433 794 883 -274 -642 343 -1\\n\",\n    \"10\\n86 -619 547 620 -383 -928 945 -253 835 -36 373 925 -705 -64 -577 -386 318 535 528\\n\",\n    \"19\\n-919 -82 -467 -169 100 -363 644 -307 926 971 -695 658 -625 19 -269 -89 63 -733 827 -236 566 95 -496 975 284 157 -373 -656 -245 644 567 -971 -954 337 150 -67 714\\n\",\n    \"22\\n697 556 -538 879 -623 73 -293 -401 -491 -7 -144 853 -319 395 785 248 -585 0 -420 -830 -720 75 411 -397 746 828 -83 -833 -847 709 181 967 314 -633 -322 415 -450 433 -459 438 508 -870 -949\\n\",\n    \"19\\n752 -869 -583 -729 984 -321 -477 -462 429 857 -57 -807 184 296 -594 -728 -903 -524 -726 -551 722 -895 696 301 -339 784 -743 -689 -657 170 -957 -88 -197 832 -65 -689 743\\n\",\n    \"22\\n549 635 969 -519 -858 185 -788 126 -840 533 -560 168 -539 -962 649 -721 -574 245 -986 -859 496 -257 -361 180 -691 -528 -992 -833 -989 -222 901 950 388 -803 624 -536 -588 310 812 320 862 -640 -851\\n\",\n    \"19\\n-550 109 141 -201 -922 45 926 6 -245 -846 -695 572 -788 -963 -253 161 107 879 78 551 486 563 -533 -376 615 627 913 411 -494 -101 -45 -877 -416 736 255 -810 -491\\n\",\n    \"27\\n-401 -840 -583 -612 -298 -384 798 366 -922 -443 -972 -271 127 -201 992 -748 -351 925 -177 -528 355 5 131 -779 833 -382 -990 -379 -816 681 650 660 624 -112 -652 406 446 -999 259 -778 452 -705 -374 -710 -751 -852 119 -689 -789 96 -984 186 70\\n\",\n    \"19\\n-150 -962 -857 346 257 898 675 629 -104 -105 560 -525 -64 282 647 -341 -781 400 -80 830 360 877 -751 -1 -392 960 989 935 777 -509 -614 -331 301 -305 587 -284 936\\n\",\n    \"5\\n0 0 0 0 0 -1 -1 -1 -1\\n\",\n    \"4\\n0 0 0 0 0 -1 -1\\n\",\n    \"5\\n0 0 0 0 0 -1 -1 1 1\\n\",\n    \"4\\n0 0 0 0 0 -1 1\\n\",\n    \"2\\n-1 -1 1\\n\",\n    \"3\\n-1 1 1 1 1\\n\",\n    \"5\\n-1 -1 -1 2 2 2 2 2 2\\n\",\n    \"3\\n-100 100 100 100 100\\n\",\n    \"5\\n-1 -2 -3 -4 -5 -6 -7 8 9\\n\",\n    \"5\\n-1 -1 -1 -1 -1 -1 -1 -1 -1\\n\",\n    \"3\\n-1 -1 -1 -1 -1\\n\",\n    \"4\\n-1 -1 -1 0 1 1 1\\n\",\n    \"7\\n-5 -10 12 40 20 -33 23 12 -23 21 -32 14 24\\n\",\n    \"3\\n-2 3 4 5 6\\n\",\n    \"5\\n-10 -100 -100 -10 -20 -5 -1 2 3\\n\"\n  ],\n  \"outputs\": [\n    \"150\\n\",\n    \"100\\n\",\n    \"2843\\n\",\n    \"3603\\n\",\n    \"4094\\n\",\n    \"6359\\n\",\n    \"7592\\n\",\n    \"6463\\n\",\n    \"8094\\n\",\n    \"9591\\n\",\n    \"17413\\n\",\n    \"21725\\n\",\n    \"21400\\n\",\n    \"26399\\n\",\n    \"17787\\n\",\n    \"28653\\n\",\n    \"19402\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"15\\n\",\n    \"500\\n\",\n    \"45\\n\",\n    \"9\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"269\\n\",\n    \"20\\n\",\n    \"251\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}