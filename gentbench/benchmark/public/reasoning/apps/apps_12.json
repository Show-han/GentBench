{
    "problem": "You are an expert Python programmer, and here is your task: Sasha grew up and went to first grade. To celebrate this event her mother bought her a multiplication table $M$ with $n$ rows and $n$ columns such that $M_{ij}=a_i \\cdot a_j$ where $a_1, \\dots, a_n$ is some sequence of positive integers.\n\nOf course, the girl decided to take it to school with her. But while she was having lunch, hooligan Grisha erased numbers on the main diagonal and threw away the array $a_1, \\dots, a_n$. Help Sasha restore the array!\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leqslant n \\leqslant 10^3$), the size of the table. \n\nThe next $n$ lines contain $n$ integers each. The $j$-th number of the $i$-th line contains the number $M_{ij}$ ($1 \\leq M_{ij} \\leq 10^9$). The table has zeroes on the main diagonal, that is, $M_{ii}=0$.\n\n\n-----Output-----\n\nIn a single line print $n$ integers, the original array $a_1, \\dots, a_n$ ($1 \\leq a_i \\leq 10^9$). It is guaranteed that an answer exists. If there are multiple answers, print any.\n\n\n-----Examples-----\nInput\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n\nOutput\n2 2 3 1 2 \nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998",
    "solution": "[\"n = int(input())\\nA = [list(map(int, input().split())) for _ in range(n)]\\nx = A[0][1]\\ny = A[1][2]\\nz = A[0][2]\\np = (x * y * z) ** 0.5\\na1 = p // y\\na2 = p // z\\na3 = p // x\\nans = [round(a1), round(a2), round(a3)]\\nfor i in range(3, n):\\n    ans.append(round(A[0][i] // a1))\\nprint(' '.join(list(map(str, ans))))\", \"n=int(input())\\ngrid=[]\\nfor i in range(n):\\n    l1=list(map(int,input().split()))\\n    grid.append(l1)\\nfirst=grid[0][1]*grid[0][2]\\nfirst=first//grid[1][2]\\nfirst=int(first**0.5)\\nresult=[first]\\nfor i in range(1,n):\\n    result.append(grid[0][i]//first)\\nprint(*result,sep=\\\" \\\")\", \"n = int(input())\\ntable = [list(map(int,input().split())) for i in range(n)]\\nfor i in range(n):\\n    num = table[i][(i+1) % n]\\n    num2 = table[i][(i+2) % n]\\n    num3 =  table[(i+2) % n][(i+1) % n]\\n    print(int((num * num2 / num3)**0.5),end = \\\" \\\")\", \"n = int(input())\\nm = [list(map(int,input().split())) for i in range(n)]\\ndef gcd(a,b):\\n\\tif a == 0:\\n\\t\\treturn b\\n\\treturn gcd(b%a, a)\\ng = m[0][1]\\nfor i in range(2, n):\\n\\tg = gcd(g, m[0][i])\\nb = [m[0][i]/g for i in range(1, n)] #a2, a3,.., an jest wielokrotnoscia b\\nimport math\\nkw = math.sqrt(m[1][2] / (b[0]*b[1]))\\nc = [b[i] * kw for i in range(n-1)]\\na0 = m[0][1]/c[0]\\nc = [a0] + c\\nfor i in c:\\n\\tprint(int(i), end = \\\" \\\")\\n\", \"import math\\nfrom collections import deque, defaultdict\\nfrom sys import stdin, stdout\\ninput = stdin.readline\\n# print = stdout.write\\nlistin = lambda : list(map(int, input().split()))\\nmapin = lambda : map(int, input().split())\\nn = int(input())\\nz = []\\nfor i in range(n):\\n    z.append(listin())\\nfirst = (z[0][1]*z[0][2])//z[1][2]\\nfirst = int((first**0.5))\\na = [first]\\nfor i in range(1, n):\\n    a.append(z[0][i]//a[0])\\nprint(*a)\", \"from math import *\\n\\nn = int(input())\\nl = []\\nfor i in range(n):\\n    l.append(list(map(int,input().split())))\\nx = int(sqrt((l[0][2]/l[1][2])*l[0][1]))\\nprint(x,end = \\\" \\\")\\nfor i in range(1,n):\\n    print(l[0][i]//x,end = \\\" \\\")\", \"from math import *\\nn=int(input())\\nv=[[int(g) for g in input().split()] for i in range(n)]\\nn1=int(sqrt(v[0][1]*v[0][2]/v[1][2]))\\nprint(n1, end=' ')\\nfor i in range(1,n):\\n    print(v[0][i]//n1, end=' ')\\n\", \"from math import sqrt\\nn = int(input())\\nm = {}\\nfor i in range(n):\\n    line = input()\\n    mi = [int(x) for x in line.strip().split()]\\n    for j in range(n):\\n        if i not in m:\\n            m[i] = {}\\n        m[i][j] = mi[j]\\n\\nres = []\\nfor i in range(n):\\n    x = m[i][(i+1)%n]\\n    y = m[i][(i+2)%n]\\n    z = m[(i+1)%n][(i+2)%n]\\n    res.append(str(int(sqrt(int(x*y/z)))))\\n\\nprint(' '.join(res))\", \"n = int(input())\\na = [list(map(int, input().split())) for i in range(n)]\\na1 = round((a[0][1] * a[0][2] // a[1][2]) ** 0.5)\\nprint(a1, end=\\\" \\\")\\nfor i in range(1, n):\\n    print(a[i][0] // a1, end=\\\" \\\")\\n\", \"n = int(input())\\n\\n\\nm = list(map(int, input().split()))[1:]\\na = list(map(int, input().split()))[2]\\n\\n\\nfor i in range(n-2):\\n    input()\\nb = int((m[0]*m[1]/a)**0.5)\\nprint(b, end=' ')\\nfor el in m:\\n    print(el//b, end=' ')\\n\", \"n = int(input())\\nm = []\\nfor i in range(n):\\n\\ts = list(map(int, input().split()))\\n\\tm.append(s)\\na = []\\nfrom math import sqrt\\ns = m[0][1] * m[0][2] * m[1][2]\\ns = int(sqrt(s) + 0.0001)\\na1 = s // m[1][2]\\na2 = s // m[0][2]\\na3 = s // m[0][1]\\na = [a1, a2, a3]\\nfor i in range(3, n):\\n\\tz = m[0][i] // a1\\n\\ta.append(z)\\nprint(*a)\", \"from math import sqrt\\nn = int(input())\\nmatrix = []\\nfor i in range(n):\\n    matrix.append(list(map(int, input().split())))\\n\\na0 = int(sqrt(matrix[0][1] * matrix[0][2] / matrix[1][2]))\\nprint(a0, end=' ')\\nfor i in range(1, n):\\n    print(int(matrix[0][i]/a0), end=' ')\\n\\nprint('')\", \"from math import sqrt\\nn=int(input())\\nl=[]\\nfor i in range(n):\\n    ll=list(map(int,input().split()))\\n    l.append(ll)\\nres=[]\\nfor i in range(n-2):\\n    res.append(int(sqrt((l[i][-1]*l[i][-2])//l[-1][-2])))\\nres.append(int(sqrt((l[-2][0]*l[-2][-1])//l[0][-1])))\\nres.append(int(sqrt((l[-1][0]*l[-1][1])//l[0][1])))\\nprint(*res)\", \"n = int(input())\\n\\nt = [list(map(int, input().split())) for i in range(n)]\\n\\nb = int((t[0][1] * t[1][2] / t[0][2]) ** 0.5)\\na = []\\na.append(t[0][1] // b)\\na.append(b)\\n\\nfor i in range(2, n):\\n    a.append(t[i][1] // b)\\n\\nprint(*a)\\n\", \"from math import sqrt\\n\\nn = int(input())\\n\\nA = []\\n\\nfor i in range(n):\\n\\tA.append(list(map(int, input().split())))\\n\\nans = [0 for i in range(n)]\\n\\nfor i in range(n):\\n\\tx = A[i][(i + 1) % n] * A[(i + 1) % n][(i + 2) % n]\\n\\n\\tx = x // (A[i][(i + 2) % n])\\n\\n\\tans[(i + 1) % n] = int(sqrt(x))\\n\\n\\nprint(*ans)\\n\", \"import math\\nfrom decimal import Decimal\\nimport heapq\\ndef na():\\n\\tn = int(input())\\n\\tb = [int(x) for x in input().split()]\\n\\treturn n,b\\n \\n \\ndef nab():\\n\\tn = int(input())\\n\\tb = [int(x) for x in input().split()]\\n\\tc = [int(x) for x in input().split()]\\n\\treturn n,b,c\\n \\n \\ndef dv():\\n\\tn, m = map(int, input().split())\\n\\treturn n,m\\n \\n \\ndef dva():\\n\\tn, m = map(int, input().split())\\n\\ta = [int(x) for x in input().split()]\\n\\tb = [int(x) for x in input().split()]\\n\\treturn n,m,b\\n \\n \\ndef eratosthenes(n): \\n\\tsieve = list(range(n + 1))\\n\\tfor i in sieve:\\n\\t\\tif i > 1:\\n\\t\\t\\tfor j in range(i + i, len(sieve), i):\\n\\t\\t\\t\\tsieve[j] = 0\\n\\treturn sorted(set(sieve))\\n \\n \\ndef lol(lst,k):\\n\\tk=k%len(lst)\\n\\tret=[0]*len(lst)\\n\\tfor i in range(len(lst)):\\n\\t\\tif i+k<len(lst) and i+k>=0:\\n\\t\\t\\tret[i]=lst[i+k]\\n\\t\\tif i+k>=len(lst):\\n\\t\\t\\tret[i]=lst[i+k-len(lst)]\\n\\t\\tif i+k<0:\\n\\t\\t\\tret[i]=lst[i+k+len(lst)]\\n\\treturn(ret)\\ndef nm():\\n\\tn = int(input())\\n\\tb = [int(x) for x in input().split()]\\n\\tm = int(input())\\n\\tc = [int(x) for x in input().split()]\\n\\treturn n,b,m,c\\n \\n \\ndef dvs():\\n\\tn = int(input())\\n\\tm = int(input())\\n\\treturn n, m \\ndef Factor(n):\\n\\tAns = []\\n\\td = 2\\n\\twhile d * d <= n:\\n\\t\\tif n % d == 0:\\n\\t\\t\\tAns.append(d)\\n\\t\\t\\tn //= d\\n\\t\\telse:\\n\\t\\t\\td += 1\\n\\tif n > 1:\\n\\t\\tAns.append(n)\\n\\treturn Ans\\n\\n\\nn = int(input())\\na = []\\nfor i in range(n):\\n\\ta.append(list(map(int, input().split())))\\nfor i in range(n):\\n\\tif i == 0:\\n\\t\\tx = i + 1\\n\\t\\tj = i + 2\\n\\t\\ttc1 = a[i][x]\\n\\t\\ttc2 = a[i][j]\\n\\t\\tprint(int((tc1 * tc2 // a[x][j]) ** 0.5), end = ' ')\\n\\telif i == n - 1:\\n\\t\\tx = i - 1\\n\\t\\tj = i - 2\\n\\t\\ttc1 = a[i][x]\\n\\t\\ttc2 = a[i][j]\\n\\t\\tprint(int((tc1 * tc2 // a[x][j]) ** 0.5), end = ' ')\\n\\telse:\\n\\t\\tx = 0\\n\\t\\tj = n - 1\\n\\t\\ttc1 = a[i][x]\\n\\t\\ttc2 = a[i][j]\\n\\t\\tprint(int((tc1 * tc2 // a[x][j]) ** 0.5), end = ' ')\\n\", \"n = int(input(''))\\na = []\\nimport math\\na.append(0)\\nfor i in range(n):\\n    ip = list(map(int,input('').split(' ')))\\n    a.append(ip)\\nans = [0]*(n+1)\\nans[3] = math.sqrt((a[3][1]*a[3][0])//a[2][0])\\nans[2] = a[3][1]//ans[3]\\nans[1] = a[3][0]//ans[3]\\nfor i in range(3,n+1,1):\\n    ans[i] = a[i][0]//ans[1]\\nfor i in range(1,n+1,1):\\n    print(int(ans[i]), end=' ')\\n    \", \"import math\\n\\nn = int(input())\\nprod = [[int(tok) for tok in input().split()] for _ in range(n)]\\n\\nprod3 = int(math.sqrt(prod[0][1] * prod[0][2] * prod[1][2]))\\nfirst = prod3 // prod[1][2]\\n\\nprint(first, end = \\\" \\\")\\nfor i in range(1, n):\\n    print(prod[0][i] // first, end = \\\" \\\")\\nprint()\\n\", \"from math import sqrt\\n\\nn = int(input())\\narr = [list(map(int, input().split())) for _ in range(n)]\\nkek = []\\nfor i in range(n):\\n    lol = [0, 1] if i > 1 else [1, 2] if i == 0 else [0, 2]\\n    a, b = lol\\n    kek.append(int(sqrt(arr[i][a] * arr[i][b] // arr[a][b])))\\nprint(' '.join(map(str, kek)))\\n\", \"import sys\\nfrom math import sqrt\\n\\nfirst = True\\ntable = []\\nat = 0\\nfor line in sys.stdin:\\n    if first:\\n        n = int(line)\\n        first = False\\n        continue\\n    table.append([int(a) for a in line.split()])\\n    at +=1\\n    if at==n:\\n        break\\n\\nat = 0\\nend = ' '\\nfor i, line in enumerate(table):\\n    a_i = int(sqrt(line[i-1]*line[i-2]/table[i-1][i-2]))\\n    at += 1\\n    if at == n:\\n        end='\\\\n'\\n    print(a_i, end=end)\\n\", \"import sys \\nfrom collections import defaultdict\\nfrom itertools import combinations\\ninput = lambda : sys.stdin.readline().rstrip()\\n\\nn = int(input())\\narr = [list(map(int, input().split())) for i in range(n)]\\nans = [0] * n \\n\\nfor i in range(n-2):\\n  ans[i] = int(((arr[i][i+1] * arr[i][i+2]) // arr[i+1][i+2]) ** 0.5)\\n\\nans[n - 2] = arr[n - 2][0] // ans[0]\\nans[n - 1] = arr[n - 1][0] // ans[0]\\n\\nprint(*ans)\\n\\n\", \"import math \\n\\nn = int(input())\\na = []\\nfor _ in range(n):\\n    tmp = list(map(int, input().split()))\\n    a.append(tmp)\\n\\nx = n * [None]\\nfor i in range(n):\\n    solved = False\\n    for j in range(n):        \\n        for k in range(n):\\n            if (i != j) and (j != k) and (k != i):\\n                xi = int(math.sqrt(a[i][j] * a[i][k] / a[k][j]))\\n                x[i] = xi\\n                solved = True\\n                break\\n        if solved:\\n            break\\nprint(' '.join(list(map(str, x))))\\n\\n\\n\\n\", \"def gns():\\n\\treturn list(map(int,input().split()))\\nn=int(input())\\nns=[]\\n\\ndef gcd(a,b):\\n\\tif a%b == 0:\\n\\t\\treturn b\\n\\telse :\\n\\t\\treturn gcd(b,a%b)\\n\\nfor i in range(n):\\n\\tns.append(gns())\\n\\na1=ns[0][1]\\na2=ns[0][2]\\ng=gcd(a1,a2)\\na1=a1//g\\na2=a2//g\\na12=ns[1][2]\\nimport math\\nx=int(math.sqrt(a12//a1//a2))\\nfor y in range(x-1,x+2):\\n\\tif y*y*a1*a2==a12:\\n\\t\\tbreak\\na1=y*a1\\nans=[None]*n\\nans[1]=a1\\nfor i in range(n):\\n\\tif i==1:\\n\\t\\tcontinue\\n\\tans[i]=ns[1][i]//a1\\nprint(' '.join(map(str,ans)))\\n\\n\", \"x = int(input())\\nmass = []\\nfor i in range(x):\\n    l = list(map(int, input().split()))\\n    mass += [l]\\nres = [0 for i in range(x)]\\nres[0] = int(((mass[0][1] * mass[0][2]) // mass[1][2]) ** 0.5)\\nfor i in range(1, x):\\n    res[i] = int(mass[0][i] // res[0])\\nprint(*res)\", \"import math\\nN = int(input())\\nM = []\\nfor _ in range(N):\\n    M.append(list(map(int,input().split())))\\n\\nM[0][0] = int(math.sqrt((M[0][1]*M[0][2])/M[1][2]))\\n\\nfor n in range(1, N):\\n    M[n][n] = int(M[n-1][n]/M[n-1][n-1])\\nans = []\\nfor n in range(N):\\n    ans.append(str(M[n][n]))\\nprint(\\\" \\\".join(ans))\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\\n\",\n    \"3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\\n\",\n    \"3\\n0 42 54\\n42 0 63\\n54 63 0\\n\",\n    \"6\\n0 4 1 1 8 2\\n4 0 4 4 32 8\\n1 4 0 1 8 2\\n1 4 1 0 8 2\\n8 32 8 8 0 16\\n2 8 2 2 16 0\\n\",\n    \"9\\n0 2268 1701 5292 3969 4158 945 1008 4788\\n2268 0 972 3024 2268 2376 540 576 2736\\n1701 972 0 2268 1701 1782 405 432 2052\\n5292 3024 2268 0 5292 5544 1260 1344 6384\\n3969 2268 1701 5292 0 4158 945 1008 4788\\n4158 2376 1782 5544 4158 0 990 1056 5016\\n945 540 405 1260 945 990 0 240 1140\\n1008 576 432 1344 1008 1056 240 0 1216\\n4788 2736 2052 6384 4788 5016 1140 1216 0\\n\",\n    \"5\\n0 418770 480249 81081 710127\\n418770 0 253330 42770 374590\\n480249 253330 0 49049 429583\\n81081 42770 49049 0 72527\\n710127 374590 429583 72527 0\\n\",\n    \"5\\n0 32659800 17106978 20710818 51743259\\n32659800 0 17620400 21332400 53296200\\n17106978 17620400 0 11173764 27916182\\n20710818 21332400 11173764 0 33797142\\n51743259 53296200 27916182 33797142 0\\n\",\n    \"3\\n0 2 4\\n2 0 8\\n4 8 0\\n\",\n    \"3\\n0 4 4\\n4 0 4\\n4 4 0\\n\",\n    \"4\\n0 8 16 32\\n8 0 32 64\\n16 32 0 128\\n32 64 128 0\\n\",\n    \"4\\n0 1 1 1000000000\\n1 0 1 1000000000\\n1 1 0 1000000000\\n1000000000 1000000000 1000000000 0\\n\",\n    \"3\\n0 1 1000000000\\n1 0 1000000000\\n1000000000 1000000000 0\\n\",\n    \"3\\n0 100000000 100000000\\n100000000 0 100000000\\n100000000 100000000 0\\n\",\n    \"3\\n0 36 72\\n36 0 8\\n72 8 0\\n\",\n    \"3\\n0 30000 30000\\n30000 0 900000000\\n30000 900000000 0\\n\",\n    \"3\\n0 16 24\\n16 0 96\\n24 96 0\\n\",\n    \"3\\n0 6 6\\n6 0 4\\n6 4 0\\n\",\n    \"3\\n0 24 24\\n24 0 144\\n24 144 0\\n\",\n    \"3\\n0 1000000000 1000000000\\n1000000000 0 1\\n1000000000 1 0\\n\",\n    \"3\\n0 999950884 999950884\\n999950884 0 999950884\\n999950884 999950884 0\\n\",\n    \"4\\n0 540 756 1188\\n540 0 1260 1980\\n756 1260 0 2772\\n1188 1980 2772 0\\n\",\n    \"4\\n0 4 4 4\\n4 0 4 4\\n4 4 0 4\\n4 4 4 0\\n\",\n    \"3\\n0 24 36\\n24 0 54\\n36 54 0\\n\",\n    \"3\\n0 10 5\\n10 0 50\\n5 50 0\\n\",\n    \"3\\n0 8 20\\n8 0 40\\n20 40 0\\n\",\n    \"3\\n0 49 49\\n49 0 49\\n49 49 0\\n\",\n    \"10\\n0 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1000000000 0 1 1 1 1 1 1 1 1\\n1000000000 1 0 1 1 1 1 1 1 1\\n1000000000 1 1 0 1 1 1 1 1 1\\n1000000000 1 1 1 0 1 1 1 1 1\\n1000000000 1 1 1 1 0 1 1 1 1\\n1000000000 1 1 1 1 1 0 1 1 1\\n1000000000 1 1 1 1 1 1 0 1 1\\n1000000000 1 1 1 1 1 1 1 0 1\\n1000000000 1 1 1 1 1 1 1 1 0\\n\",\n    \"3\\n0 100000000 99980000\\n100000000 0 99980000\\n99980000 99980000 0\\n\",\n    \"3\\n0 60 90\\n60 0 150\\n90 150 0\\n\",\n    \"3\\n0 6 6\\n6 0 9\\n6 9 0\\n\",\n    \"3\\n0 6 10\\n6 0 15\\n10 15 0\\n\",\n    \"3\\n0 9 9\\n9 0 9\\n9 9 0\\n\",\n    \"3\\n0 4 8\\n4 0 8\\n8 8 0\\n\",\n    \"3\\n0 25 25\\n25 0 25\\n25 25 0\\n\",\n    \"3\\n0 2097664 4195328\\n2097664 0 524288\\n4195328 524288 0\\n\",\n    \"3\\n0 24 40\\n24 0 60\\n40 60 0\\n\",\n    \"4\\n0 444872274 166721667 155112636\\n444872274 0 150535462 140053496\\n166721667 150535462 0 52486868\\n155112636 140053496 52486868 0\\n\",\n    \"3\\n0 8 8\\n8 0 16\\n8 16 0\\n\",\n    \"4\\n0 1000000000 1000000000 1000000000\\n1000000000 0 100 100\\n1000000000 100 0 100\\n1000000000 100 100 0\\n\",\n    \"5\\n0 8 12 16 2\\n8 0 24 32 4\\n12 24 0 48 6\\n16 32 48 0 8\\n2 4 6 8 0\\n\"\n  ],\n  \"outputs\": [\n    \"2 2 3 1 2 \",\n    \"9999 10000 9998 \",\n    \"6 7 9 \",\n    \"1 4 1 1 8 2 \",\n    \"63 36 27 84 63 66 15 16 76 \",\n    \"891 470 539 91 797 \",\n    \"5631 5800 3038 3678 9189 \",\n    \"1 2 4 \",\n    \"2 2 2 \",\n    \"2 4 8 16 \",\n    \"1 1 1 1000000000 \",\n    \"1 1 1000000000 \",\n    \"10000 10000 10000 \",\n    \"18 2 4 \",\n    \"1 30000 30000 \",\n    \"2 8 12 \",\n    \"3 2 2 \",\n    \"2 12 12 \",\n    \"1000000000 1 1 \",\n    \"31622 31622 31622 \",\n    \"18 30 42 66 \",\n    \"2 2 2 2 \",\n    \"4 6 9 \",\n    \"1 10 5 \",\n    \"2 4 10 \",\n    \"7 7 7 \",\n    \"1000000000 1 1 1 1 1 1 1 1 1 \",\n    \"10000 10000 9998 \",\n    \"6 10 15 \",\n    \"2 3 3 \",\n    \"2 3 5 \",\n    \"3 3 3 \",\n    \"2 2 4 \",\n    \"5 5 5 \",\n    \"4097 512 1024 \",\n    \"4 6 10 \",\n    \"22197 20042 7511 6988 \",\n    \"2 4 4 \",\n    \"100000000 10 10 10 \",\n    \"2 4 6 8 1 \"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}