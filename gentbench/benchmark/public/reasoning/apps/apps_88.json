{
    "problem": "You are an expert Python programmer, and here is your task: Two pirates Polycarpus and Vasily play a very interesting game. They have n chests with coins, the chests are numbered with integers from 1 to n. Chest number i has a_{i} coins. \n\nPolycarpus and Vasily move in turns. Polycarpus moves first. During a move a player is allowed to choose a positive integer x (2\u00b7x + 1 \u2264 n) and take a coin from each chest with numbers x, 2\u00b7x, 2\u00b7x + 1. It may turn out that some chest has no coins, in this case the player doesn't take a coin from this chest. The game finishes when all chests get emptied.\n\nPolycarpus isn't a greedy scrooge. Polycarpys is a lazy slob. So he wonders in what minimum number of moves the game can finish. Help Polycarpus, determine the minimum number of moves in which the game can finish. Note that Polycarpus counts not only his moves, he also counts Vasily's moves.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of chests with coins. The second line contains a sequence of space-separated integers: a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1000), where a_{i} is the number of coins in the chest number i at the beginning of the game.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum number of moves needed to finish the game. If no sequence of turns leads to finishing the game, print -1.\n\n\n-----Examples-----\nInput\n1\n1\n\nOutput\n-1\n\nInput\n3\n1 2 3\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first test case there isn't a single move that can be made. That's why the players won't be able to empty the chests.\n\nIn the second sample there is only one possible move x = 1. This move should be repeated at least 3 times to empty the third chest.",
    "solution": "[\"3\\n\\nn = int(input())\\na = [0] + list(map(int, input().split()))\\nif len(a) < 3 or n % 2 == 0:\\n    print(-1)\\nelse:\\n    ans = 0\\n    for x in range(n // 2, 0, -1):\\n        d = max(0, a[2 * x], a[2 * x + 1])\\n        ans += d\\n        a[x] -= d\\n    print(ans + max(0, a[1]))\\n\", \"n = int(input())\\nif n == 1 or n & 1 == 0: print(-1)\\nelse:\\n    t = list(map(int, input().split()))\\n    s, k = 0, n // 2 - 1\\n    for i in range(n - 1, 1, -2):\\n        p = max(t[i], t[i - 1])\\n        t[k] = max(0, t[k] - p)\\n        s += p\\n        k -= 1\\n    print(s + t[0])\", \"n=int(input()) \\nif n==1 or n%2==0:\\n\\tprint(-1)\\n\\treturn\\nA=[0]*(n+1)\\nA[1:n+1]=list(map(int,input().split()))\\nans=0\\nfor i in range(n,0,-1):\\n\\tif(A[i]<=0):continue\\n\\tx=int(i/2) \\n\\tA[x]-=A[i]\\n\\tans+=A[i]\\n\\tif i%2==1:\\n\\t\\tA[i-1]-=A[i]\\n\\tA[i]=0  \\nprint(ans)\", \"n, s = int(input()), 0\\na = [0] + list(map(int, input().split()))\\nif n % 2 == 0 or n == 1:\\n  print(-1)\\nelse:\\n  for i in range(n, 1, -2):\\n    mx = max(a[i], a[i - 1])\\n    s += mx\\n    a[i // 2] = max(0, a[i // 2] - mx)\\n  print(s + a[1])\", \"n=int(input()) \\n\\nif n==1 or n%2==0:\\n\\n\\tprint(-1)\\n\\n\\treturn\\n\\nA=[0]*(n+1)\\n\\nA[1:n+1]=list(map(int,input().split()))\\n\\nans=0\\n\\nfor i in range(n,0,-1):\\n\\n\\tif(A[i]<=0):continue\\n\\n\\tx=int(i/2) \\n\\n\\tA[x]-=A[i]\\n\\n\\tans+=A[i]\\n\\n\\tif i%2==1:\\n\\n\\t\\tA[i-1]-=A[i]\\n\\n\\tA[i]=0  \\n\\nprint(ans)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"t = int(input())\\nline = input()\\nlis = line.split()\\nlis = [int(i) for i in lis]\\nif t==1 or t%2==0 :\\n    print(\\\"-1\\\")\\n    quit()\\ncount = 0\\ni = t \\nwhile i >= 4 :\\n    if i%2 == 1 :\\n        p = i-1 \\n        q = int(p/2)\\n        count = count + lis[i-1]\\n        lis[p-1] = lis[p-1] - lis[i-1]\\n        if lis[p-1] < 0 :\\n            lis[p-1] = 0\\n        lis[q-1] = lis[q-1] - lis[i-1]\\n        if lis[q-1] < 0 :\\n            lis[q-1] = 0\\n        lis[i-1] = 0\\n    else :\\n        p = i+1 \\n        q = int(i/2)\\n        count = count + lis[i-1]\\n        lis[p-1] = lis[p-1] - lis[i-1]\\n        if lis[p-1] < 0 :\\n            lis[p-1] = 0\\n        lis[q-1] = lis[q-1] - lis[i-1]\\n        if lis[q-1] < 0 :\\n            lis[q-1] = 0\\n        lis[i-1] = 0\\n    i = i-1\\nm = max(lis[0], lis[1], lis[2])\\ncount = count + m\\nprint(count)\", \"t = int(input())\\nline = input()\\nlis = line.split()\\nlis = [int(i) for i in lis]\\nif t==1 or t%2==0 :\\n    print(\\\"-1\\\")\\n    quit()\\ncount = 0\\ni = t \\nwhile i >= 4 :\\n    if i%2 == 1 :\\n        p = i-1 \\n        q = int(p/2)\\n        count = count + lis[i-1]\\n        lis[p-1] = lis[p-1] - lis[i-1]\\n        if lis[p-1] < 0 :\\n            lis[p-1] = 0\\n        lis[q-1] = lis[q-1] - lis[i-1]\\n        if lis[q-1] < 0 :\\n            lis[q-1] = 0\\n        lis[i-1] = 0\\n    else :\\n        p = i+1 \\n        q = int(i/2)\\n        count = count + lis[i-1]\\n        lis[p-1] = lis[p-1] - lis[i-1]\\n        if lis[p-1] < 0 :\\n            lis[p-1] = 0\\n        lis[q-1] = lis[q-1] - lis[i-1]\\n        if lis[q-1] < 0 :\\n            lis[q-1] = 0\\n        lis[i-1] = 0\\n    i = i-1\\nm = max(lis[0], lis[1], lis[2])\\ncount = count + m\\nprint(count)\\n\", \"n = int(input())\\nA = [int(i) for i in input().split()]\\nif n == 1 or n % 2 == 0:\\n    print(-1)\\n    return\\nans = 0\\nfor i in range(n-1, 3, -2):\\n    diff = max(A[i], A[i-1])\\n    ans += diff\\n    A[(i-1)//2] -= diff\\n    A[(i-1)//2] = max(0, A[(i-1)//2])\\nans += max(A[:3])\\nprint(ans)\\n\", \"# it was stupid to think using brute intuitions, like pick first or last greedily,\\n# greddy must follow observation, so you also had the observation that have to do it from last\\n# instead you picked in random all order, those greedy after thought solutions never work!,its not cp\\nn=int(input())\\nif n==1 or n%2==0:\\n    # print(\\\"ghe\\\")\\n    print(-1)\\n    return\\n\\na=list(map(int,input().split(' ')))\\n# so the last element, has to be made 0, greedily, first, so by induction, it has proof, \\na=[0]+a\\n# this is very ine elegant implementation\\nans=0\\nfor j in range(n,0,-1):\\n    if j%2==1:\\n        i=(j-1)//2\\n        ans+=a[2*i+1]\\n        mina=min(a[i],a[2*i],a[2*i+1])\\n        a[i],a[2*i],a[2*i+1]=a[i]-mina,a[2*i]-mina,a[2*i+1]-mina    \\n        if a[2*i+1]>0:\\n            nonzero=0\\n            if a[i]>0:\\n                a[i]=max(0,a[i]-a[2*i+1])\\n            else:\\n                a[2*i]=max(0,a[2*i]-a[2*i+1])\\n            a[2*i+1]=0\\n    else:\\n        i=(j)//2\\n        if 2*i+1>n:\\n            # print(\\\"hemlo\\\")\\n            print(-1)\\n            return\\n        ans+=a[2*i]\\n        mina=min(a[i],a[2*i],a[2*i+1])\\n        a[i],a[2*i],a[2*i+1]=a[i]-mina,a[2*i]-mina,a[2*i+1]-mina    \\n        if a[2*i]>0:\\n            a[i]=max(0,a[i]-a[2*i])\\n            a[2*i]=0\\n# print(a)/\\nif any(a):\\n    print(-1)\\nelse:\\n    print(ans)\\n\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"1\\n1\\n\",\n    \"3\\n1 2 3\\n\",\n    \"100\\n269 608 534 956 993 409 297 735 258 451 468 422 125 407 580 769 857 383 419 67 377 230 842 113 169 427 287 75 372 133 456 450 644 303 638 40 217 445 427 730 168 341 371 633 237 951 142 596 528 509 236 782 44 467 607 326 267 15 564 858 499 337 74 346 443 436 48 795 206 403 379 313 382 620 341 978 209 696 879 810 872 336 983 281 602 521 762 782 733 184 307 567 245 983 201 966 546 70 5 973\\n\",\n    \"99\\n557 852 325 459 557 350 719 719 400 228 985 674 942 322 212 553 191 58 720 262 798 884 20 275 576 971 684 340 581 175 641 552 190 277 293 928 261 504 83 950 423 211 571 159 44 428 131 273 181 555 430 437 901 376 361 989 225 399 712 935 279 975 525 631 442 558 457 904 491 598 321 396 537 555 73 415 842 162 284 847 847 139 305 150 300 664 831 894 260 747 466 563 97 907 42 340 553 471 411\\n\",\n    \"98\\n204 880 89 270 128 298 522 176 611 49 492 475 977 701 197 837 600 361 355 70 640 472 312 510 914 665 869 105 411 812 74 324 727 412 161 703 392 364 752 74 446 156 333 82 557 764 145 803 36 293 776 276 810 909 877 488 521 865 200 817 445 577 49 165 755 961 867 819 260 836 276 756 649 169 457 28 598 328 692 487 673 563 24 310 913 639 824 346 481 538 509 861 764 108 479 14 552 752\\n\",\n    \"97\\n691 452 909 730 594 55 622 633 13 359 246 925 172 25 535 930 170 528 933 878 130 548 253 745 116 494 862 574 888 609 18 448 208 354 133 181 330 89 364 198 412 157 152 300 910 99 808 228 435 872 985 364 911 634 289 235 761 978 631 212 314 828 277 347 965 524 222 381 84 970 743 116 57 975 33 289 194 493 853 584 338 987 686 926 718 806 170 902 349 137 849 671 783 853 564 495 711\\n\",\n    \"96\\n529 832 728 246 165 3 425 338 520 373 945 726 208 404 329 918 579 183 319 38 268 136 353 980 614 483 47 987 717 54 451 275 938 841 649 147 917 949 169 322 626 103 266 415 423 627 822 757 641 610 331 203 172 814 806 734 706 147 119 798 480 622 153 176 278 735 632 944 853 400 699 476 976 589 417 446 141 307 557 576 355 763 404 87 332 429 516 649 570 279 893 969 154 246 353 920\\n\",\n    \"95\\n368 756 196 705 632 759 228 794 922 387 803 176 755 727 963 658 797 190 249 845 110 916 941 215 655 17 95 751 2 396 395 47 419 784 325 626 856 969 838 501 945 48 84 689 423 963 485 831 848 189 540 42 273 243 322 288 106 260 550 681 542 224 677 902 295 490 338 858 325 638 6 484 88 746 697 355 385 472 262 864 77 378 419 55 945 109 862 101 982 70 936 323 822 447 437\\n\",\n    \"94\\n311 135 312 221 906 708 32 251 677 753 502 329 790 106 949 942 558 845 532 949 952 800 585 450 857 198 88 516 832 193 532 171 253 918 194 752 339 534 450 625 967 345 199 612 936 650 499 256 191 576 590 73 374 968 382 139 50 725 38 76 763 827 905 83 801 53 748 421 94 420 665 844 496 360 81 512 685 638 671 960 902 802 785 863 558 276 15 305 202 669 276 621 841 192\\n\",\n    \"1\\n546\\n\",\n    \"2\\n707 629\\n\",\n    \"3\\n868 762 256\\n\",\n    \"4\\n221 30 141 672\\n\",\n    \"5\\n86 458 321 157 829\\n\",\n    \"6\\n599 78 853 537 67 706\\n\",\n    \"7\\n760 154 34 77 792 950 159\\n\",\n    \"8\\n113 583 918 562 325 1 60 769\\n\",\n    \"9\\n275 555 451 102 755 245 256 312 230\\n\",\n    \"10\\n636 688 843 886 13 751 884 120 880 439\\n\",\n    \"11\\n989 117 23 371 442 803 81 768 182 425 888\\n\",\n    \"55\\n1 1 2 2 2 2 1 1 1 1 2 1 2 1 2 2 1 1 2 2 1 2 1 2 1 1 1 2 1 2 2 2 1 2 2 1 1 2 2 1 1 1 1 1 1 1 1 2 1 1 2 2 2 2 2\\n\",\n    \"43\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"77\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"100\\n999 1000 999 999 1000 1000 999 1000 999 999 999 999 1000 1000 1000 1000 1000 999 999 999 1000 999 1000 999 999 1000 1000 1000 1000 1000 1000 999 999 1000 1000 999 1000 1000 999 999 999 1000 999 1000 999 999 999 999 1000 1000 999 999 1000 999 1000 999 999 1000 999 1000 999 1000 1000 1000 999 1000 999 999 1000 1000 1000 1000 999 999 999 999 1000 1000 1000 1000 1000 1000 999 1000 1000 999 999 999 1000 999 1000 999 1000 1000 1000 999 999 1000 999 1000\\n\",\n    \"47\\n16 17 18 13 14 12 18 13 19 13 13 11 13 17 10 18 16 16 19 11 20 17 14 18 12 15 16 20 11 16 17 19 12 16 19 16 18 19 19 10 11 19 13 12 11 17 13\\n\",\n    \"74\\n694 170 527 538 833 447 622 663 786 411 855 345 565 549 423 301 119 182 680 357 441 859 844 668 606 202 795 696 395 666 812 162 714 443 629 575 764 605 240 363 156 835 866 659 170 462 438 618 551 266 831 149 188 185 496 716 879 617 215 186 745 613 398 266 745 866 389 220 178 809 519 793 221 361\\n\",\n    \"99\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"99\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"99\\n1 1 1 1 1 2 2 1 2 2 1 2 2 2 1 1 2 1 1 1 1 1 1 1 1 2 2 2 1 2 1 2 1 2 2 2 1 2 2 2 1 1 2 1 2 1 1 2 2 2 1 2 2 2 1 2 1 1 1 2 1 2 1 1 1 1 2 1 1 1 1 2 1 2 2 1 2 2 2 2 1 1 2 2 1 2 1 1 1 2 1 1 2 1 1 1 1 2 2\\n\",\n    \"99\\n3 1 3 2 3 2 3 1 1 1 2 1 1 2 2 3 1 1 2 1 3 1 3 2 2 3 3 1 1 2 1 2 3 1 3 3 1 3 3 2 3 3 1 2 1 3 3 3 1 1 3 2 1 3 1 3 1 3 3 1 3 1 3 2 1 3 1 1 1 1 2 1 2 3 2 1 3 2 2 2 2 2 2 1 3 3 2 3 1 3 1 2 3 2 3 3 2 1 2\\n\",\n    \"99\\n3 3 3 3 3 2 2 3 3 2 2 3 2 2 2 3 3 3 2 3 3 3 3 2 2 2 3 2 3 3 3 3 3 2 2 2 3 2 3 2 2 2 3 2 3 3 3 2 2 3 2 3 2 2 2 3 3 2 3 2 2 3 2 2 2 3 2 2 3 3 3 3 3 3 3 3 3 3 2 3 3 2 3 2 3 3 2 2 3 3 3 3 3 3 3 2 2 2 3\\n\",\n    \"23\\n2 2 2 2 2 2 2 2 1 1 2 2 1 1 2 1 1 1 2 2 1 1 1\\n\",\n    \"23\\n1 2 1 3 2 2 3 1 3 3 3 2 1 1 2 3 1 2 3 3 2 1 1\\n\",\n    \"23\\n2 3 3 2 2 2 2 2 3 2 2 3 2 2 2 3 3 3 3 3 2 3 2\\n\",\n    \"5\\n2 2 2 2 2\\n\",\n    \"5\\n2 2 1 1 1\\n\",\n    \"5\\n2 1 2 2 1\\n\",\n    \"5\\n1 2 2 1 2\\n\",\n    \"5\\n1 1 2 4 4\\n\"\n  ],\n  \"outputs\": [\n    \"-1\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"23450\\n\",\n    \"-1\\n\",\n    \"25165\\n\",\n    \"-1\\n\",\n    \"23078\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"868\\n\",\n    \"-1\\n\",\n    \"1150\\n\",\n    \"-1\\n\",\n    \"2502\\n\",\n    \"-1\\n\",\n    \"1598\\n\",\n    \"-1\\n\",\n    \"3448\\n\",\n    \"32\\n\",\n    \"15\\n\",\n    \"-1\\n\",\n    \"27000\\n\",\n    \"-1\\n\",\n    \"278\\n\",\n    \"-1\\n\",\n    \"34000\\n\",\n    \"34\\n\",\n    \"57\\n\",\n    \"92\\n\",\n    \"98\\n\",\n    \"15\\n\",\n    \"21\\n\",\n    \"22\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"6\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}