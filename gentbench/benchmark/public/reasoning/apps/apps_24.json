{
    "problem": "You are an expert Python programmer, and here is your task: An infinitely long railway has a train consisting of n cars, numbered from 1 to n (the numbers of all the cars are distinct) and positioned in arbitrary order. David Blaine wants to sort the railway cars in the order of increasing numbers. In one move he can make one of the cars disappear from its place and teleport it either to the beginning of the train, or to the end of the train, at his desire. What is the minimum number of actions David Blaine needs to perform in order to sort the train?\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of cars in the train. \n\nThe second line contains n integers p_{i} (1 \u2264 p_{i} \u2264 n, p_{i} \u2260 p_{j} if i \u2260 j)\u00a0\u2014 the sequence of the numbers of the cars in the train.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of actions needed to sort the railway cars.\n\n\n-----Examples-----\nInput\n5\n4 1 2 5 3\n\nOutput\n2\n\nInput\n4\n4 1 3 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample you need first to teleport the 4-th car, and then the 5-th car to the end of the train.",
    "solution": "[\"n, p = int(input()), list(map(int, input().split()))\\na, c, v = [0] * n, 1, 1\\nfor i, pi in enumerate(p):\\n    a[pi - 1] = i\\nfor i in range(n - 1):\\n    if a[i] < a[i + 1]:\\n        c += 1\\n        if c > v:\\n            v = c\\n    else:\\n        c = 1\\nprint(n - v)\", \"n, p = int(input()), list(map(int, input().split()))\\na, c, v = [0] * n, 1, 1\\nfor i, pi in enumerate(p):\\n    a[pi - 1] = i\\nfor i in range(n - 1):\\n    if a[i] < a[i + 1]:\\n        c += 1\\n        if c > v:\\n            v = c\\n    else:\\n        c = 1\\nprint(n - v)\", \"n = int(input())\\nl = list(map(int, input().split()))\\nl2 = [0]*len(l)\\nfor i in range(len(l)):\\n    l2[l[i]-1] = i\\nprev = -1\\nans = -1e9\\ncurr = 0\\nfor i in l2:\\n    if i>prev:\\n        curr+=1\\n        prev = i\\n    else:\\n        ans = max(curr, ans)\\n        curr = 1\\n    prev=i\\nprint(n-max(curr, ans))\\n\", \"n = int(input())\\ncars = [int(x) for x in input().split()]\\nsorted_cars = sorted(enumerate(cars), key = lambda x : x[1])\\nmax_sorted_length = 1\\nlength = 1\\nfor i in range(1, n):\\n    if sorted_cars[i][0] > sorted_cars[i-1][0]:\\n        length += 1\\n    else:\\n        if max_sorted_length < length:\\n            max_sorted_length = length\\n        length = 1\\nif max_sorted_length < length: max_sorted_length = length\\nprint(n - max_sorted_length)\\n\", \"__author__ = 'Utena'\\nn=int(input())\\nm=list(map(int,input().split()))\\nt=0\\nl=[0]\\nr=[0]*(n+1)\\nfor j in range(n):\\n    r[m[j]]=j+1\\nif n==1:\\n    print(0)\\nelse:\\n    for i in range(1,n):\\n        t+=1\\n        if r[i]>r[i+1]:\\n            l.append(t)\\n            t=0\\n    if r[n]>r[n-1]:\\n        t+=1\\n        l.append(t)\\n    print(n-max(l))\", \"a=[0 for i in range(100010)]\\nb=[0 for i in range(100010)]\\nc=[0 for i in range(100010)]\\nn, a[1:] = int(input()), list(map(int,input().split(' ')))\\nfor i in range(1,n+1):\\n    if b[a[i]-1]:\\n        c[a[i]]=c[a[i]-1]+1\\n    else:\\n        c[a[i]]=1\\n    b[a[i]]=1\\nprint(n-max(c[1:n+1]))\\n\", \"def main():\\n    n = int(input())\\n    l = [n] * (n + 1)\\n    for a in map(int, input().split()):\\n        l[a] = l[a - 1] - 1\\n    print(min(l))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\n\\np = list(map(int, input().split()))\\nq = [0] * n\\n\\nfor i in range(n):\\n    q[p[i] - 1] = i\\n\\nans = 1\\ncur = 1\\n\\nfor i in range(1, n):\\n    if q[i - 1] < q[i]:\\n        cur += 1\\n    else:\\n        cur = 1\\n    ans = max(ans, cur)\\n\\nprint(n - ans)\\n\", \"n=int(input())\\nl=[n]*(n+1)\\nfor c in map(int,input().split()):l[c]=l[c-1]-1\\nprint(min(l))\", \"3\\nN = int(input())\\nl = [1 for x in range(N+1)]\\nm = [1 for x in range(N+1)]\\nusr_input = input().split()\\nans = 1\\nfor x in range(N):\\n\\tm[int(usr_input[x])] = x + 1\\nfor x in range(2,N+1):\\n\\tif(m[x] > m[x-1]):\\n\\t\\tl[x] += l[x-1]\\n\\tif(l[x] > ans):\\n\\t\\tans = l[x]\\nprint(N-ans)\\n\\n\", \"readInts=lambda: list(map(int, input().split()))\\nn=int(input())\\na=readInts()\\np=[0]*n\\nfor i in range(n):\\n    p[a[i]-1]=i\\ninc=1;ret=n-1\\n#print(p)\\nfor i in range(1,n):\\n    if p[i]>p[i-1]:\\n        inc+=1\\n    else:\\n        inc=1\\n    ret=min(ret,n-inc)\\nprint(ret)\\n\", \"#!/usr/bin/env python3\\nimport collections, itertools, functools, math\\n\\ndef solve():\\n    n = int(input())\\n    p = list(map(int, input().split()))\\n    pos = [(p, i) for i, p in enumerate(p)]\\n    pos.sort()\\n\\n    longest = 1\\n    seq = 1\\n    for i in range(1, n):\\n        if pos[i-1][1] < pos[i][1]:\\n            seq += 1\\n        else:\\n            seq = 1\\n        longest = max(longest, seq)\\n    return n - longest\\n\\n\\ndef __starting_point():\\n    print(solve())\\n\\n\\n__starting_point()\", \"n = int(input())\\nps = list(map(int, input().split()))\\n\\npos = [0] * n\\nfor i, p in enumerate(ps):\\n    pos[p-1] = i\\n\\nused = [False] * n\\n\\nlongest = 0\\nfor v in range(n):\\n    if used[v]:\\n        continue\\n    i = pos[v]\\n    w = v\\n    used[w] = True\\n    while w < n - 1 and pos[w + 1] > i:\\n        i = pos[w + 1]\\n        w += 1\\n        used[w] = True\\n    longest = max(longest, w - v + 1)\\nprint(n - longest)\", \"n = int(input().strip())\\np = [int(x) for x in input().split()]\\n\\nl = {}\\nfor x in p:\\n    if x-1 in l:\\n        l[x] = l[x-1] + 1\\n    else:\\n        l[x] = 1\\n\\nprint(n - max(l.values()))\\n\", \"n = int(input())\\nL = input().split()\\nIDX = (n + 2) * [0]\\n\\ndef max(a, b):\\n    if a > b:\\n        return a\\n    return b\\n\\nmx, act, last = 0, 0, 0\\n\\nfor i in range(n):\\n    IDX[int(L[i])] = i + 1\\n\\nfor i in range(1, n + 1):\\n    if IDX[i] > last:\\n        last = IDX[i]\\n        act += 1\\n    else:\\n        last = IDX[i]\\n        act = 1\\n    mx = max(mx, act)\\n\\n\\nprint(n - mx)\\n\", \"n=int(input())\\nlst = [0 for i in range(n)]\\nkereta = input().split()\\nfor i in range(n):\\n\\tlst[int(kereta[i])-1]=i\\nancol=1\\nterbanyak=0\\nfor i in range(n-1):\\n\\tif lst[i]>lst[i+1]:\\n\\t\\tif terbanyak<ancol:terbanyak=ancol\\n\\t\\tancol=0\\n\\tancol+=1\\nif terbanyak<ancol:terbanyak=ancol\\nprint(n-terbanyak)\\n\", \"n=int(input())\\nl=[n]*(n+1)\\nfor c in [int(x) for x in input().split()]:l[c]=l[c-1]-1\\nprint(min(l))\", \"\\nn = int(input())\\nl = list(map(int, input().split()))\\n\\na = [0] * (n + 1)\\nk = 0\\n\\nfor x in l:\\n    a[x] = a[x - 1] + 1\\n    k = max(k, a[x])    \\n\\nprint(n - k)\\n\", \"n=int(input())\\nm=[0]*(n+1)\\nl=list(map(int,input().split()))\\nfor i in l:\\n    m[i]=m[i-1]+1\\nprint(n-max(m))\", \"def __starting_point():\\n    n = int(input())\\n    line = list(map(int, input().split()))\\n    book = [0] * n\\n    for it in line:\\n        if it > 1:\\n            if book[it - 2] > 0:\\n                book[it - 1] = book[it - 2] + 1\\n            else:\\n                book[it - 1] = 1\\n        else:\\n            book[it - 1] = 1\\n    print(n - max(book))\\n\\n__starting_point()\", \"n=int(input())\\nl=[n]*(n+1)\\nfor c in map(int,input().split()):l[c]=l[c-1]-1\\nprint(min(l))\\n\", \"n=int(input())\\nl=[n]*(n+1)\\nfor c in map(int,input().split()):l[c]=l[c-1]-1\\nprint(min(l))\\n\", \"n=int(input())\\nl=[n]*(n+1)\\nfor c in map(int,input().split()):l[c]=l[c-1]-1\\nprint(min(l))\\n\", \"n=int(input())\\nl=[n]*(n+1)\\nfor c in map(int,input().split()):l[c]=l[c-1]-1\\nprint(min(l))\\n\", \"n=int(input())\\nl=[n]*(n+1)\\nfor c in map(int,input().split()):l[c]=l[c-1]-1\\nprint(min(l))\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"5\\n4 1 2 5 3\\n\",\n    \"4\\n4 1 3 2\\n\",\n    \"1\\n1\\n\",\n    \"2\\n1 2\\n\",\n    \"2\\n2 1\\n\",\n    \"6\\n5 3 6 1 4 2\\n\",\n    \"7\\n1 2 3 6 7 4 5\\n\",\n    \"8\\n6 2 1 8 5 7 3 4\\n\",\n    \"3\\n1 2 3\\n\",\n    \"3\\n1 3 2\\n\",\n    \"3\\n2 1 3\\n\",\n    \"3\\n2 3 1\\n\",\n    \"3\\n3 1 2\\n\",\n    \"3\\n3 2 1\\n\",\n    \"7\\n1 3 5 7 2 4 6\\n\",\n    \"7\\n1 5 2 6 3 7 4\\n\",\n    \"5\\n1 4 2 3 5\\n\",\n    \"9\\n1 6 4 5 9 8 7 3 2\\n\",\n    \"10\\n5 1 6 2 8 3 4 10 9 7\\n\",\n    \"50\\n39 8 41 9 45 1 5 18 38 31 28 7 12 49 33 19 26 6 42 13 37 27 2 21 20 22 14 16 48 47 32 50 25 17 35 24 36 4 29 15 43 10 11 30 40 46 3 23 44 34\\n\",\n    \"50\\n43 15 10 33 32 31 13 7 5 22 36 1 25 14 38 19 8 6 24 42 28 21 44 35 4 3 49 30 27 46 2 9 17 37 45 41 18 39 12 11 16 20 50 26 29 34 40 47 48 23\\n\",\n    \"50\\n10 40 34 43 50 17 15 13 9 2 32 18 11 46 27 24 36 16 29 45 42 4 47 19 48 37 41 5 21 26 22 25 44 31 35 49 20 8 12 23 6 38 14 1 7 28 3 33 39 30\\n\",\n    \"50\\n10 37 3 46 45 29 36 13 21 25 35 5 18 33 12 19 50 16 30 47 20 42 39 28 2 6 38 8 7 31 22 27 26 9 15 14 34 48 4 32 40 43 44 24 11 1 23 17 49 41\\n\",\n    \"50\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 42 37 38 39 40 41 36 43 44 45 46 47 48 49 50\\n\",\n    \"50\\n1 2 3 4 5 6 7 8 43 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 50 33 34 35 36 37 38 39 40 41 42 9 44 45 46 47 48 49 32\\n\",\n    \"50\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 49 40 41 47 43 44 45 46 42 50 39 48\\n\",\n    \"50\\n1 2 3 4 27 6 7 8 9 10 30 12 13 14 15 16 17 18 19 20 21 22 23 24 28 26 5 25 29 11 31 32 33 34 38 36 37 35 39 40 41 42 43 44 45 46 47 48 49 50\\n\",\n    \"50\\n1 2 3 4 5 6 7 49 9 10 17 12 13 14 15 16 11 18 19 20 21 22 23 24 25 26 27 38 29 36 30 32 33 34 35 31 37 28 39 40 41 42 43 44 45 46 47 48 8 50\\n\",\n    \"50\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 31 18 19 20 21 23 22 24 25 26 27 28 29 49 17 32 33 34 39 36 37 38 47 44 41 42 43 40 45 46 35 48 30 50\\n\",\n    \"50\\n1 2 15 4 5 6 7 8 9 10 11 12 13 14 3 16 17 18 19 32 21 22 36 28 23 26 27 24 29 30 31 20 33 34 37 25 35 38 40 39 41 42 43 44 45 46 47 48 49 50\\n\",\n    \"5\\n4 3 1 2 5\\n\",\n    \"6\\n1 3 5 6 4 2\\n\",\n    \"10\\n2 1 4 3 6 5 8 7 10 9\\n\",\n    \"5\\n1 2 4 5 3\\n\",\n    \"7\\n1 4 2 3 7 6 5\\n\",\n    \"4\\n3 1 2 4\\n\",\n    \"6\\n2 5 4 3 6 1\\n\",\n    \"5\\n1 3 4 5 2\\n\",\n    \"6\\n2 4 6 5 1 3\\n\",\n    \"6\\n1 2 4 5 6 3\\n\",\n    \"9\\n9 8 7 4 5 6 3 2 1\\n\",\n    \"7\\n4 1 2 3 6 5 7\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"7\\n\",\n    \"6\\n\",\n    \"46\\n\",\n    \"47\\n\",\n    \"46\\n\",\n    \"46\\n\",\n    \"14\\n\",\n    \"27\\n\",\n    \"11\\n\",\n    \"36\\n\",\n    \"38\\n\",\n    \"33\\n\",\n    \"39\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"8\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"4\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}