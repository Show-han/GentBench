{
    "problem": "You are an expert Python programmer, and here is your task: Julia is going to cook a chicken in the kitchen of her dormitory. To save energy, the stove in the kitchen automatically turns off after k minutes after turning on.\n\nDuring cooking, Julia goes to the kitchen every d minutes and turns on the stove if it is turned off. While the cooker is turned off, it stays warm. The stove switches on and off instantly.\n\nIt is known that the chicken needs t minutes to be cooked on the stove, if it is turned on, and 2t minutes, if it is turned off. You need to find out, how much time will Julia have to cook the chicken, if it is considered that the chicken is cooked evenly, with constant speed when the stove is turned on and at a constant speed when it is turned off.\n\n\n-----Input-----\n\nThe single line contains three integers k, d and t (1 \u2264 k, d, t \u2264 10^18).\n\n\n-----Output-----\n\nPrint a single number, the total time of cooking in minutes. The relative or absolute error must not exceed 10^{ - 9}.\n\nNamely, let's assume that your answer is x and the answer of the jury is y. The checker program will consider your answer correct if $\\frac{|x - y|}{\\operatorname{max}(1, y)} \\leq 10^{-9}$.\n\n\n-----Examples-----\nInput\n3 2 6\n\nOutput\n6.5\n\nInput\n4 2 20\n\nOutput\n20.0\n\n\n\n-----Note-----\n\nIn the first example, the chicken will be cooked for 3 minutes on the turned on stove, after this it will be cooked for $\\frac{3}{6}$. Then the chicken will be cooked for one minute on a turned off stove, it will be cooked for $\\frac{1}{12}$. Thus, after four minutes the chicken will be cooked for $\\frac{3}{6} + \\frac{1}{12} = \\frac{7}{12}$. Before the fifth minute Julia will turn on the stove and after 2.5 minutes the chicken will be ready $\\frac{7}{12} + \\frac{2.5}{6} = 1$.\n\nIn the second example, when the stove is turned off, Julia will immediately turn it on, so the stove will always be turned on and the chicken will be cooked in 20 minutes.",
    "solution": "[\"def f(x):\\n    res = (x // k1) * val\\n    e = x % k1\\n    if e <= k:\\n        res += e\\n    else:\\n        res += k + (e - k) / 2\\n    return res\\n\\nk, d, t = map(int, input().split())\\nc = (k - 1) // d + 1\\nk1 = c * d\\nrem = -k % d\\nval = k + rem / 2\\nl = 0\\nr = 1e50\\nfor i in range(500):\\n    m = (l + r) / 2\\n    if f(m) >= t:\\n        r = m\\n    else:\\n        l = m\\nprint('%.10f' % r)\", \"3\\n\\nk, d, t = (float(s) for s in input().split())\\n\\nn = k // d\\nr = d - k % d\\nT = n * d\\nif k % d != 0:\\n    T += d\\ndt = k\\nif k % d != 0:\\n    dt += r / 2\\n\\ncnt = t // dt\\nrem = t % dt\\nrest = 0\\nif rem < k:\\n rest = rem\\nelse:\\n rest = k + (rem - k) * 2\\n\\nprint(cnt * T + rest)\\n\", \"# -*- coding: utf-8 -*-\\nk, d, t = [int(x) for x in input().split()]\\ntt = t * 2\\nt_loop = ((k - 1) // d + 1) * d\\namount = k * 2 + (t_loop - k)\\nn_loop = tt // amount\\nrem = tt % amount\\nif rem <= k * 2:\\n    print(n_loop * t_loop + rem / 2)\\nelse:\\n    print(n_loop * t_loop + rem - k)\", \"K, D, T = list(map(int, input().split()))\\nivl = D * ((K + D - 1) // D)\\nfp = float(K)/float(ivl)\\nsp = 1.0-fp\\na = 0.0\\nb = 2.0*T\\nfor ii in range(300):\\n    t = 0.5*(a+b)\\n    ivls = t // ivl\\n    cooked = ivls * ivl * (2.0*fp + sp)\\n    rt = t - ivls*ivl\\n    rft = min(fp*ivl, rt)\\n    rsp = max(0.0, rt - rft)\\n    cooked += 2.0*rft + rsp\\n    if cooked < 2.0*T:\\n        a = t\\n    else:\\n        b = t\\nt = 0.5*(a+b)\\nprint(\\\"%.10f\\\" % t)\\n\", \"k, d, t = list(map(int, input().split()))\\ncnt = (k + d - 1) // d;\\nper = cnt * d\\nbat = k * 2 + (per - k);\\ncntbat = (2 * t) // bat;\\nost = (2 * t) % bat\\nans = 0.0 + per * cntbat\\nif k * 2 >= ost:\\n    ans += ost / 2\\nelse:\\n    ost -= 2 * k\\n    ans += k + ost\\nprint(ans)\\n\", \"from sys import stdin, stdout\\nfrom random import randrange\\n\\n\\nk, d, t = map(int, stdin.readline().split())\\nEPS = 10 ** (-9)\\nchicken = 100\\n\\nd = ((k + d - 1) // d) * d\\n\\nif False:\\n    stdout.write(str(chicken * t / 100))\\nelse:\\n    \\n    l, r = -1, 2 * t + 10\\n    while r - l > 1:\\n        m = (l + r) >> 1\\n        \\n        cnt = m * k + m * (d - k) / 2\\n        \\n        if cnt * 100 / t >= 100:\\n            r = m\\n        else:\\n            l = m\\n    \\n    cnt = l * k + l * (d - k) / 2\\n    chicken = chicken - cnt * 100 / t\\n    ans = l * k + l * (d - k)\\n    \\n    if k * 100 / t >= chicken:\\n        ans += chicken * t / 100\\n        chicken = 0\\n    else:\\n        ans += k\\n        chicken -= k * 100 / t\\n        ans += chicken * 2 * t / 100\\n        chicken = 0\\n\\nstdout.write(str(ans))\", \"3\\n\\ndef offcount(x, k, d):\\n    per = ((k + d - 1) // d) * d\\n    ans = (x // per) * (per - k)\\n    if x > (x // per) * per + k:\\n        ans += x - (x // per) * per - k\\n    return ans\\n\\nk, d, t = map(int, input().split())\\nk *= 2\\nd *= 2\\nt *= 2\\n\\nlt, rt = 0, 8 * 10 ** 18\\nwhile lt < rt - 1:\\n    mid = (lt + rt) // 2\\n\\n    if 2 * mid - offcount(mid, k, d) >= 2 * t:\\n        rt = mid\\n    else:\\n        lt = mid\\n\\nprint(rt // 2, \\\".\\\", \\\"0\\\" if rt % 2 == 0 else \\\"5\\\", sep=\\\"\\\")\\n\", \"[k, d, t] = input().split()\\nk = int (k)\\nd = int (d)\\nt = int (t)\\n\\nif k % d == 0:\\n    d = k\\nif k > d and k % d != 0:\\n    d = (k // d + 1) * d\\n\\n\\np1 = 1.0 * k / t\\np2 = 0.5 * (d - k) / t\\np = p1 + p2\\n#print(p1, p2, p)\\ns = 1.0 / p\\nc = int(s)\\n#print(s, c)\\nz = 1.0 - p * c\\n#print(z)\\nif z < p1:\\n    ans = c * d + 1.0 * z * t\\nelse:\\n    ans = c * d + k\\n    z = z - p1;\\n    ans += 2.0 * z * t\\ntemplate = '{:.' + str(10) + 'f}'\\nprint(template.format(ans))\", \"def check(m):\\n    r = m // time\\n    t1 = 2 * r * time1 + r * time2\\n    m %= time\\n    \\n    if m < time1:\\n        t2 = 2 * m\\n    else:\\n        t2 = 2 * time1 + (m - time1)\\n        \\n    return 2 * t <= t1 + t2\\n\\n\\nk, d, t = map(int, input().split())\\n\\ntime1 = k\\ndiv = (k - 1) // d + 1\\ntime2 = d * div - k\\ntime = time1 + time2\\n\\nl = 0\\nr = 10 ** 20\\nwhile l < r - 1:\\n    m = (l + r) // 2\\n        \\n    if check(m / 2):\\n        r = m\\n    else:\\n        l = m\\n            \\nprint(r / 2)\", \"from math import ceil\\nk, d, t = list(map(int, input().split()))\\nd = ceil(k / d) * d\\nr, t = divmod(t, k + (d - k) * .5)\\nprint(r * d + min(k, t) + max(t - k, 0) * 2)\\n\", \"a, b, c = list(map(int, input().split()))\\nif a % b == 0:\\n    d = a\\nelse:\\n    d = (a // b) * b + b  # time\\ne = (d - a) / 2 + a  # burn\\nif c % e == 0:\\n    print((c // e) * d)\\nelse:\\n    tmp = (c // e) * d\\n    c -= (c // e) * e\\n    if c <= a:\\n        print(tmp + c)\\n    else:\\n        c -= a\\n        print(tmp + a + c * 2)\\n\", \"k, d, t = list(map(int, input().split()))\\n\\nif (k % d == 0):\\n    d = (int(k / d)) * d\\nelse:\\n    d = (int(k / d) + 1) * d\\np = k + (d - k) / 2\\nz = int(t / p) * d\\ne = int(t / p) * p\\nif (t - e < k):\\n    z += (t - e)\\nelse:\\n    z += k + (t - e - k) * 2\\nprint(z)\\n\", \"k,d,t = list(map(int,input().split()))\\n\\nif d <= k:\\n    c = 2*k + (d - k % d) % d\\n    r = 2*t % c\\n    periodTime = k + (d - k % d) % d\\n    nrFullPeriods = 2*t // c\\n    if r <= 2*k:\\n        tailTime = r / 2\\n    else:\\n        tailTime = r - k\\nelse:\\n    c = 2*k + (d - k);\\n    r = 2*t % c\\n    periodTime = d\\n    nrFullPeriods = 2*t // c\\n    if r <= 2*k:\\n        tailTime = r / 2\\n    else:\\n        tailTime = r - k\\n#print('energyPerPeriod: ' + str(c))\\n#print('energyTotal: ' + str(2*t))\\n#print('tailTime: ' + str(tailTime))\\n#print(nrFullPeriods)\\nprint(nrFullPeriods*periodTime + tailTime)\\n\", \"\\nk,d,t=list(map(int,input().split()))\\nt*=2\\ndays=0  \\n    \\n\\nif(k==d):\\n    days=t/2\\nelif(k>d):\\n    p=t//(2*k+d-(k-1)%d -1)\\n    #print(p)\\n    #print(k+d-(k-1)%d -1)\\n    days+=p*(k+d-(k-1)%d -1)\\n    #print(days)\\n    t=t%(2*k+d-(k-1)%d -1)\\n    if(t<2*k):\\n        days+=t/2\\n    else:\\n        \\n        days+=k\\n        t-=2*k\\n        days+=t\\nelse:\\n    p=t//(d+k)\\n    days+=p*(d)\\n    t=t%(d+k)\\n    if(t<2*k):\\n        days+=t/2\\n    else:\\n        days+=k\\n        t-=2*k\\n        days+=t\\nprint(days)\\n        \\n        \\n\", \"from math import ceil\\nk, d, t = map(int, input().split())\\n\\ntimeAfterK = ceil(k / d) * d\\n\\ncookingDone = k / t + (timeAfterK - k) / (2*t)\\n\\nrounds = int(1 / cookingDone)\\n\\ncookingLeft = 1 - rounds * cookingDone\\n\\n# print(timeAfterK, cookingDone, rounds, cookingLeft)\\n\\nif cookingLeft <= k/t:\\n    ans = rounds * timeAfterK + cookingLeft * t\\nelse:\\n    ans = rounds * timeAfterK + k\\n    cookingLeft -= k/t\\n    ans += cookingLeft * 2 * t\\n\\nprint(\\\"{:.10f}\\\".format(ans))\", \"k,d,t=list(map(int,input().split()))\\nd=((k+d-1)//d)*d\\nn=2*t//(d+k)\\nx=2*t%(d+k)\\nif (x<=2*k):\\n    ans=x/2+d*n\\nelse:\\n    ans=x-k+d*n\\nprint(ans)\\n    \\n\", \"k, d, t = list(map(int, input().split()))\\n\\noff = (k // d) * d + d - k if k % d != 0 else 0\\nperiod = k + off\\nperformance = off / 2 + k\\n\\npart = int(t / performance)\\nans = part * period\\nt -= part * performance\\nif t <= k:\\n    ans += t\\nelse:\\n    ans += k\\n    t -= k\\n    ans += 2 * t\\nprint(ans)\\n\", \"import math\\n\\n\\ndef main():\\n    k, d, t = [int(x) for x in input().split()]\\n    time = 0.0\\n    k = (k, 2 * t)[k > 2*t]\\n\\n    val = d * (math.ceil(k / d))\\n\\n    a = t // (k + (val - k) / 2)\\n    b = t % (k + (val - k) / 2)\\n    time += val * a\\n    b -= k\\n    time += k\\n    if b < 0:\\n        time += b\\n    if b > 0:\\n        b -= (val - k) / 2\\n        time += val - k\\n        if b < 0:\\n            time += b * 2\\n\\n    print(time)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"from math import *\\n\\ndef __starting_point():\\n\\tk,d,t=map(int,input().split())\\n\\t# print(k,d,t)\\n\\n\\tper=ceil(k/d)*d\\n\\tfire=k if d >=k else per-per%k\\n\\twarm=(per-fire)/2\\n\\n\\t# print(per,fire,warm)\\n\\n\\tans=t//(fire+warm)*per\\n\\n\\tremain=t-t//(fire+warm)*(fire+warm)\\n\\n\\tif remain<=fire:\\n\\t\\tans+=remain\\n\\telse:\\n\\t\\tans+=fire\\n\\t\\tremain-=fire\\n\\t\\tans+=remain*2\\n\\tprint(ans)\\n__starting_point()\", \"k,d,t=list(map(int,input().split()))\\nif k%d==0 :\\n    print(float(t))\\n    return\\nx=((k//d)+1)*d\\n##print(x)\\ny=(k + (x-k)/2)\\n#print(y)\\nz=(t//y)\\n#print(z*y)\\nl=t-(z*y)\\nm=min(l,k) \\nl-=(m)\\n#print(l)\\nans=(z*x+ m+ [0,l*2][l>0])\\nprint(ans)\\n\", \"import math\\nk,d,t=map(int,input().split())\\nl=(math.ceil(k/d)*d)-k\\nm=(2*t)//(2*k+l)\\nif (t-m*(k+(l/2)))<=k:\\n    print(m*(k+l)+t-m*(k+(l/2)))\\nelse:\\n    print(m*(l+k)+k+2*(t-m*(k+(l/2))-k))\", \"[k,d,t ] = input().split(' ')\\nk = float(k)\\nd = float(d)\\nt = float (t)\\n\\nT = ((k-1)//d+1)*d #\\u4e00\\u4e2a\\u5468\\u671f\\u5f97\\u65f6\\u95f4\\nT1 = k + (T-k)*0.5#\\u4e00\\u4e2a\\u5468\\u671f\\u6240\\u80fd\\u5b8c\\u6210\\u5f97\\n\\n#print(T)\\n#print(T1)\\nans = 0\\nans = ans + t//T1*T\\na = t-t//T1*T1\\n\\n#print(a)\\nif a < k:\\n    ans = ans + a\\nelse :\\n    ans = ans + k+(a-k)*2\\nprint(ans)\\n    \\n\", \"R = lambda: map(int, input().split())\\nk, d, t = R()\\np = (k // d + (1 if k % d else 0)) * d\\nkp = k / t\\nwp = (p - k) / (2 * t)\\nri = 1 // (kp + wp) * p\\nrm = 1 % (kp + wp)\\nrr = rm / kp * k if rm < kp else k + (rm - kp) / wp * (p - k)\\nprint(ri + rr)\", \"R = lambda: map(int, input().split())\\nk, d, t = R()\\np = (k // d + (1 if k % d else 0)) * d\\nl, r = 0, 2 * 10**18\\nwhile (r - l) / max(1, r) > 10**-10:\\n    m = (l + r) / 2\\n    ht = m // p * k + min(k, m % p)\\n    lt = m // p * (p - k) + max(0, m % p - k)\\n    if ht / t + lt / (t * 2) < 1:\\n        l = m\\n    else:\\n        r = m\\nprint(l)\", \"A=input().split()\\nk=int(A[0])\\nd=int(A[1])\\nt=int(A[2])\\nif k<=d:\\n    if t%(k+(d-k)/2)<=k:\\n        dob=t%(k+(d-k)/2)\\n    else:\\n        dob=k+ 2*(t%(k+(d-k)/2)-k)\\n    tay=d*(t//(k+(d-k)/2))+dob\\nelse:\\n    if t%(k+(d-((k-1)%d+1))/2)<=k:\\n        dob=t%(k+(d-((k-1)%d+1))/2)\\n    else:\\n      dob=k+((t%(k+(d-((k-1)%d+1))/2)-k)*2)\\n    tay=t//(k+(d-((k-1)%d+1))/2)*d*((k-1)//d+1)+dob\\nprint(tay)\"]",
    "test": "{\n  \"inputs\": [\n    \"3 2 6\\n\",\n    \"4 2 20\\n\",\n    \"8 10 9\\n\",\n    \"43 50 140\\n\",\n    \"251 79 76\\n\",\n    \"892 67 1000\\n\",\n    \"1000 1000 1000\\n\",\n    \"87 4 1000\\n\",\n    \"1 629 384378949109878497\\n\",\n    \"2124 6621 12695\\n\",\n    \"27548 68747 111\\n\",\n    \"74974 46016 1000000000\\n\",\n    \"223 844 704\\n\",\n    \"1 558 743\\n\",\n    \"43 387 402\\n\",\n    \"972 2 763\\n\",\n    \"330 167 15\\n\",\n    \"387 43 650\\n\",\n    \"1 314 824\\n\",\n    \"2 4 18\\n\",\n    \"3 5 127\\n\",\n    \"3260 4439 6837\\n\",\n    \"3950 7386 195\\n\",\n    \"18036 47899 1000000000\\n\",\n    \"29 46 1000000000\\n\",\n    \"403 957 1000000000000000000\\n\",\n    \"999999999999999999 1000000000000000000 1000000000000000000\\n\",\n    \"9 1000000000000000000 1000000000000000000\\n\",\n    \"1 2 1000000000000000000\\n\",\n    \"2 5 1000000000000000000\\n\",\n    \"81413279254461199 310548139128293806 1000000000000000000\\n\",\n    \"6 3 417701740543616353\\n\",\n    \"17 68 4913\\n\",\n    \"68 17 4913\\n\",\n    \"121 395 621154158314692955\\n\",\n    \"897 443 134730567336441375\\n\",\n    \"200 10 979220166595737684\\n\",\n    \"740 251 930540301905511549\\n\",\n    \"4 232 801899894850800409\\n\",\n    \"472 499 166288453006087540\\n\",\n    \"42 9 1000000000000000000\\n\",\n    \"312 93 1000000000000000000\\n\",\n    \"1000 1000 1000000000000000000\\n\",\n    \"6000 1000 1000000000\\n\",\n    \"9999999999 33333 1000000000\\n\",\n    \"33333 9999999999 1000000000\\n\",\n    \"25441360464 2658201820 1000000000\\n\",\n    \"20958318104 46685 253251869\\n\",\n    \"963276084 698548036 1000000000\\n\",\n    \"574520976350867177 413897686591532160 1000000000000000000\\n\",\n    \"575556838390916379 15 1000000000000000000\\n\",\n    \"1000000000000000000 1000000000000000000 1000000000000000000\\n\",\n    \"1 1000000000000000000 1000000000000000000\\n\",\n    \"8 1000000000000000000 1000000000000000000\\n\",\n    \"1 976958144546785462 1000000000000000000\\n\",\n    \"3 10 1000000000000000000\\n\",\n    \"312200625484460654 543737694709247394 1000000000000000000\\n\",\n    \"2 99 53\\n\",\n    \"900000000000000000 1 1234\\n\"\n  ],\n  \"outputs\": [\n    \"6.5\\n\",\n    \"20.0\\n\",\n    \"10.0\\n\",\n    \"150.5\\n\",\n    \"76.0\\n\",\n    \"1023.0\\n\",\n    \"1000.0\\n\",\n    \"1005.5\\n\",\n    \"767537647587662141\\n\",\n    \"19018\\n\",\n    \"111.0\\n\",\n    \"1102134775.0\\n\",\n    \"1014.5\\n\",\n    \"1483\\n\",\n    \"718\\n\",\n    \"763.0\\n\",\n    \"15.0\\n\",\n    \"650.0\\n\",\n    \"1642\\n\",\n    \"24.0\\n\",\n    \"158.0\\n\",\n    \"7426.5\\n\",\n    \"195.0\\n\",\n    \"1452914012\\n\",\n    \"1226666661.0\\n\",\n    \"1407352941176470446\\n\",\n    \"1000000000000000000.5\\n\",\n    \"1999999999999999982\\n\",\n    \"1333333333333333333.0\\n\",\n    \"1428571428571428571.0\\n\",\n    \"1572837149684581517.5\\n\",\n    \"417701740543616353.0\\n\",\n    \"7854\\n\",\n    \"4913.0\\n\",\n    \"950991831528308936\\n\",\n    \"160877739434079591.0\\n\",\n    \"979220166595737684.0\\n\",\n    \"938642796161889076.5\\n\",\n    \"1576616742418522838\\n\",\n    \"170912333779686266.5\\n\",\n    \"1034482758620689654.0\\n\",\n    \"1087719298245614020.0\\n\",\n    \"1000000000000000000.0\\n\",\n    \"1000000000.0\\n\",\n    \"1000000000.0\\n\",\n    \"1999966667\\n\",\n    \"1000000000.0\\n\",\n    \"253251869.0\\n\",\n    \"1036723916\\n\",\n    \"1126637198416098571.5\\n\",\n    \"1000000000000000003.0\\n\",\n    \"1000000000000000000.0\\n\",\n    \"1999999999999999998\\n\",\n    \"1999999999999999984\\n\",\n    \"1999999999999999997\\n\",\n    \"1538461538461538461.0\\n\",\n    \"1231537069224786740.0\\n\",\n    \"102\\n\",\n    \"1234.0\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}