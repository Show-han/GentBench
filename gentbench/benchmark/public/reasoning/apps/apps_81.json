{
    "problem": "You are an expert Python programmer, and here is your task: Given an array a_1, a_2, ..., a_{n} of n integers, find the largest number in the array that is not a perfect square.\n\nA number x is said to be a perfect square if there exists an integer y such that x = y^2.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} ( - 10^6 \u2264 a_{i} \u2264 10^6)\u00a0\u2014 the elements of the array.\n\nIt is guaranteed that at least one element of the array is not a perfect square.\n\n\n-----Output-----\n\nPrint the largest number in the array which is not a perfect square. It is guaranteed that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n4 2\n\nOutput\n2\n\nInput\n8\n1 2 4 8 16 32 64 576\n\nOutput\n32\n\n\n\n-----Note-----\n\nIn the first sample case, 4 is a perfect square, so the largest number in the array that is not a perfect square is 2.",
    "solution": "[\"n = int(input())\\na = [int(i) for i in input().split()]\\na.sort()\\na.reverse()\\nfor i in a:\\n    if i < 0:\\n        print(i)\\n        return\\n    if int(i ** 0.5) ** 2 != i:\\n        print(i)\\n        return\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nx = -10**7\\nfor i in a:\\n\\tif i < 0 or round(i ** 0.5) ** 2 != i:\\n\\t\\tx = max(x, i)\\nprint(x)\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nimport math\\nfor i in a:\\n\\tif i < 0:\\n\\t\\tr = i\\n\\telif int(math.sqrt(i))**2 != i:\\n\\t\\tr = i\\nprint(r)\", \"from math import sqrt\\n\\nn = int(input())\\nA = list(map(int, input().split()))\\nprint(max(a for a in A if a < 0 or int(sqrt(a))**2 != a))\\n\", \"n=int(input())\\nar=sorted(list(map(int,input().split())))\\nmx=-float('inf')\\nfor x in ar:\\n    if x<0:\\n        mx=x\\n        continue\\n    el=round(x**0.5)\\n    if el**2!=x:\\n        mx=x\\nprint(mx)\", \"n=int(input())\\nip=list(map(int,input().split()))\\nhigh=-10000000\\nfor i in ip:\\n    if i>high:\\n        if i<0:\\n            high=i\\n        else:\\n            if (i**0.5)%1==0:\\n                pass\\n            else:\\n                high=i\\nprint(high)\\n\", \"def isqrt(n):\\n    if n < 0:\\n        return None\\n    elif 0 <= n <= 1:\\n        return n\\n    x = n // 2\\n    seen = set([x])\\n    while x * x != n:\\n        x = (x + (n // x)) // 2\\n        if x in seen:\\n            return None\\n        seen.add(x)\\n    return x\\n\\ndef is_square(n):\\n    return isqrt(n) is not None\\n\\nn = int(input())\\na = [int(v) for v in input().split()]\\n\\nprint(max(v for v in a if not is_square(v)))\\n\", \"import itertools\\n\\nn = int(input())\\nvals = list(map(int, input().split()))\\n\\ndef is_square(x):\\n  if x < 0:\\n    return False\\n  for i in itertools.count():\\n    if i**2 == x:\\n      return True\\n    if i**2 > x:\\n      return False\\n\\nres = -10**6 - 1\\nfor x in vals:\\n  if x > res:\\n    if not is_square(x):\\n      res = x\\n\\nprint(res)\\n\", \"from math import *\\ndef is_it_square(x):\\n  if x<0:\\n    return False\\n  return floor(sqrt(x))**2 == x\\n\\nn=int(input())\\nl=[int(x) for x in input().split()]\\nl.sort()\\nl.reverse()\\nfor x in l:\\n  if is_it_square(x):\\n    continue\\n  print(x)\\n  return\", \"# list(map(int, input().split()))\\nfrom math import sqrt\\nn = int(input())\\nans = -1e9\\nz = list(map(int, input().split()))\\nfor t in z:\\n    if (t < 0):\\n        ans = max(t, ans)\\n    else:\\n        p = int(sqrt(t))\\n        while (p + 1) * (p + 1) <= t:\\n            p += 1\\n        while p * p > t:\\n            p -= 1\\n        if p * p != t:\\n            ans = max(ans, t)\\nprint(ans)\\n\\n\", \"import math\\n\\n_ = input()\\n\\nm = None\\naa = list(map(int, input().split()))\\n\\nprint(max([a for a in aa if a < 0 or (int(math.sqrt(a)) * int(math.sqrt(a)) != a)]))\\n\", \"def square(n):\\n    if n<0:\\n        return False\\n    lo=0\\n    hi=n\\n    while lo+1<hi:\\n        mid=(lo+hi)//2\\n        if mid*mid>n:\\n            hi=mid\\n        if mid*mid<n:\\n            lo=mid\\n        if mid*mid==n:\\n            return True\\n    if lo*lo==n or hi*hi==n:\\n        return True\\n    return False\\n\\nn=int(input())\\nline=input().split()\\n\\nbest=-10**7\\nfor i in range(n):\\n    a=int(line[i])\\n    if not square(a):\\n        best=max(best,a)\\nprint (best)\\n\", \"#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\ndef solve():\\n    n = int(input())\\n    al = set([int(i) for i in input().split()])\\n    for i in range(1001):\\n        al = al - set([i * i])\\n    print(max(al))\\n\\ndef __starting_point():\\n    solve()\\n\\n__starting_point()\", \"n = int(input())\\nx = list(map(int,input().split()))\\nx.sort()\\nfor i in range(n - 1, -1, -1):\\n\\tif x[i] < 0:\\n\\t\\tprint(x[i])\\n\\t\\tbreak\\n\\tif x[i] ** 0.5 % 1 != 0:\\n\\t\\tprint(x[i])\\n\\t\\tbreak\\n\", \"n = int(input())\\nbest = -1000000000\\nfor i in map(int,input().split()):\\n    if i<0:\\n        best = max(best,i)\\n        continue\\n    if (i**0.5!=int(i**0.5)):\\n        best = max(best,i)\\n\\n\\nprint(best)\\n\", \"input()\\nsqrs = set()\\nx = 0\\nwhile x ** 2 <= 10 ** 6:\\n    sqrs.add(x ** 2)\\n    x += 1\\n\\nprint(max([x for x in map(int, input().split()) if x not in sqrs]))\\n\", \"n=int(input())\\na=list(map(int,input().strip().split(' ')))\\nans=-10000000\\nfor i in a:\\n    if i<0:\\n        if i>ans:\\n            ans=i\\n    else:\\n        if int(i**0.5)**2!=i and i>ans:\\n            ans=i\\nprint(ans)\", \"n=int(input())\\nl=list(map(int,input().split()))\\nls=[]\\nfor i in range(n):\\n    x=0\\n    if l[i]>=0:\\n        x=int(l[i]**0.5)\\n    if l[i]!=x*x or l[i]<0:\\n        ls.append(l[i])\\nls.sort()\\nprint(ls[-1])\", \"from math import sqrt\\ninput();a=list(map(int,input().split()));max=-1000000\\nfor i in a:\\n    if i>=0:\\n        if not sqrt(i).is_integer():\\n            if i>max:\\n                max=i\\n    elif(i>max):\\n        max=i\\nprint(max)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\ndef isSquare(a):\\n  if a < 0:\\n    return False\\n  l, r = 0, 1000001\\n  while r - l > 1:\\n    mid = r + l >> 1\\n    if mid * mid > a:\\n      r = mid\\n    else :\\n      l = mid\\n  return l * l == a\\nprint(max(x for x in a if not isSquare(x)))\\n\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nmn = -100000000000000\\nfor i in a:\\n    if i < 0:\\n        mn = max(mn, i)\\n        continue\\n    v = int(i ** 0.5)\\n    if v * v != i and (v + 1) * (v + 1) != i and (v - 1) * (v - 1) != i:\\n        mn = max(mn, i)\\nprint(mn)\\n\", \"n = int(input())\\n\\nans = -10**18\\n\\nfor a in map(int, input().split()):\\n    if a < 0:\\n        ans = max(ans, a)\\n        continue\\n    t = int(a**0.5)\\n    if not ((t - 1)**2 == a or t**2 == a or (t + 1)**2 == a):\\n        ans = max(ans, a)\\n\\nprint(ans)\\n\", \"import math\\n    \\n\\n# int(input())\\n# [int(i) for i in input().split()]\\n\\nn = int(input())\\na = [int(i) for i in input().split()]\\n\\nans = -10000000\\n\\nfor x in a:\\n    if x < 0:\\n        if  x > ans: ans = x\\n        continue\\n    if int(math.sqrt(x))*int(math.sqrt(x)) != x and x > ans:\\n        ans = x\\n\\nprint(ans)\\n\", \"from sys import stdin, stdout\\n\\nn = int(stdin.readline())\\nvalues = sorted(list(map(int, stdin.readline().split())))\\n\\nans = min(values)\\n\\nfor i in range(n):\\n    \\n    if values[i] >= 0:\\n        x = values[i] ** 0.5\\n        \\n        if int(x) != x:\\n            ans = max(ans, values[i])        \\n        \\n    else:\\n        ans = values[i]\\n\\nstdout.write(str(ans))\", \"d = set([])\\nfor i in range(1002):\\n    s = i*i\\n    d.add(s)\\n\\nn = int(input())\\na = list(map(int, input().split()))\\na.sort(reverse=True)\\nfor i in a:\\n    if i not in d:\\n        print(i)\\n        break\\n\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"2\\n4 2\\n\",\n    \"8\\n1 2 4 8 16 32 64 576\\n\",\n    \"3\\n-1 -4 -9\\n\",\n    \"5\\n918375 169764 598796 76602 538757\\n\",\n    \"5\\n804610 765625 2916 381050 93025\\n\",\n    \"5\\n984065 842724 127449 525625 573049\\n\",\n    \"2\\n226505 477482\\n\",\n    \"2\\n370881 659345\\n\",\n    \"2\\n4 5\\n\",\n    \"2\\n3 4\\n\",\n    \"2\\n999999 1000000\\n\",\n    \"3\\n-1 -2 -3\\n\",\n    \"2\\n-1000000 1000000\\n\",\n    \"2\\n-1 0\\n\",\n    \"1\\n2\\n\",\n    \"1\\n-1\\n\",\n    \"35\\n-871271 -169147 -590893 -400197 -476793 0 -15745 -890852 -124052 -631140 -238569 -597194 -147909 -928925 -587628 -569656 -581425 -963116 -665954 -506797 -196044 -309770 -701921 -926257 -152426 -991371 -624235 -557143 -689886 -59804 -549134 -107407 -182016 -24153 -607462\\n\",\n    \"16\\n-882343 -791322 0 -986738 -415891 -823354 -840236 -552554 -760908 -331993 -549078 -863759 -913261 -937429 -257875 -602322\\n\",\n    \"71\\n908209 289 44521 240100 680625 274576 212521 91809 506944 499849 3844 15376 592900 58081 240100 984064 732736 257049 600625 180625 130321 580644 261121 75625 46225 853776 485809 700569 817216 268324 293764 528529 25921 399424 175561 99856 295936 20736 611524 13924 470596 574564 5329 15376 676 431649 145161 697225 41616 550564 514089 9409 227529 1681 839056 3721 552049 465124 38809 197136 659344 214369 998001 44944 3844 186624 362404 -766506 739600 10816 299209\\n\",\n    \"30\\n192721 -950059 -734656 625 247009 -423468 318096 622521 678976 777924 1444 748303 27556 62001 795664 89401 221841 -483208 467856 477109 196 -461813 831744 772641 574564 -519370 861184 67600 -717966 -259259\\n\",\n    \"35\\n628849 962361 436921 944784 444889 29241 -514806 171396 685584 -823202 -929730 6982 198025 783225 552049 -957165 782287 -659167 -414846 695556 -336330 41616 963781 71289 119639 952576 -346713 178929 232324 121802 393266 841 649636 179555 998001\\n\",\n    \"53\\n280988 756430 -515570 -248578 170649 -21608 642677 216770 827291 589500 940901 216097 -118956 -919104 -319264 -761585 289479 499613 588276 883036 480518 -323196 -274570 -406556 -381484 -956025 702135 -445274 -783543 136593 153664 897473 352651 737974 -21123 -284944 501734 898033 604429 624138 40804 248782 -786059 -304592 -209210 -312904 419820 -328648 -47331 -919227 -280955 104827 877304\\n\",\n    \"15\\n256 -227055 427717 827239 462070 66049 987533 -175306 -552810 -867915 -408251 -693957 -972981 -245827 896904\\n\",\n    \"3\\n-1 1 0\\n\",\n    \"2\\n0 -5\\n\",\n    \"3\\n-1 -2 0\\n\",\n    \"2\\n-5 0\\n\",\n    \"1\\n-439\\n\",\n    \"1\\n-1000000\\n\",\n    \"1\\n-917455\\n\",\n    \"3\\n1 1 -1\\n\",\n    \"2\\n131073 1\\n\",\n    \"2\\n99999 3\\n\",\n    \"2\\n-524272 -1000000\\n\",\n    \"2\\n15 131073\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"32\\n\",\n    \"-1\\n\",\n    \"918375\\n\",\n    \"804610\\n\",\n    \"984065\\n\",\n    \"477482\\n\",\n    \"659345\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"999999\\n\",\n    \"-1\\n\",\n    \"-1000000\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-15745\\n\",\n    \"-257875\\n\",\n    \"-766506\\n\",\n    \"748303\\n\",\n    \"963781\\n\",\n    \"940901\\n\",\n    \"987533\\n\",\n    \"-1\\n\",\n    \"-5\\n\",\n    \"-1\\n\",\n    \"-5\\n\",\n    \"-439\\n\",\n    \"-1000000\\n\",\n    \"-917455\\n\",\n    \"-1\\n\",\n    \"131073\\n\",\n    \"99999\\n\",\n    \"-524272\\n\",\n    \"131073\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}