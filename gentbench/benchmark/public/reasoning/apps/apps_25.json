{
    "problem": "You are an expert Python programmer, and here is your task: Peter had a cube with non-zero length of a side. He put the cube into three-dimensional space in such a way that its vertices lay at integer points (it is possible that the cube's sides are not parallel to the coordinate axes). Then he took a piece of paper and wrote down eight lines, each containing three integers \u2014 coordinates of cube's vertex (a single line contains coordinates of a single vertex, each vertex is written exactly once), put the paper on the table and left. While Peter was away, his little brother Nick decided to play with the numbers on the paper. In one operation Nick could swap some numbers inside a single line (Nick didn't swap numbers from distinct lines). Nick could have performed any number of such operations.\n\nWhen Peter returned and found out about Nick's mischief, he started recollecting the original coordinates. Help Peter restore the original position of the points or else state that this is impossible and the numbers were initially recorded incorrectly.\n\n\n-----Input-----\n\nEach of the eight lines contains three space-separated integers \u2014 the numbers written on the piece of paper after Nick's mischief. All numbers do not exceed 10^6 in their absolute value.\n\n\n-----Output-----\n\nIf there is a way to restore the cube, then print in the first line \"YES\". In each of the next eight lines print three integers \u2014 the restored coordinates of the points. The numbers in the i-th output line must be a permutation of the numbers in i-th input line. The numbers should represent the vertices of a cube with non-zero length of a side. If there are multiple possible ways, print any of them.\n\nIf there is no valid way, print \"NO\" (without the quotes) in the first line. Do not print anything else.\n\n\n-----Examples-----\nInput\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n\nOutput\nYES\n0 0 0\n0 0 1\n0 1 0\n1 0 0\n0 1 1\n1 0 1\n1 1 0\n1 1 1\n\nInput\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\nOutput\nNO",
    "solution": "[\"import itertools\\nfrom itertools import permutations as perm\\n\\nl = [[int(x) for x in input().split()] for i in range(8)]\\n\\ndef dist2(p0,p1):\\n    return sum([(p0[i]-p1[i])**2 for i in range(3)])\\n\\ndef check(c):\\n    dists = [[(c[i][0]-c[j][0])**2+(c[i][1]-c[j][1])**2+(c[i][2]-c[j][2])**2 for i in range(8)] for j in range(8)]\\n    s2 = min([min(l) for l in dists])\\n    return all([sorted(l) == [0,s2,s2,s2,2*s2,2*s2,2*s2,3*s2] for l in dists])\\n\\ndef sub(p0,p1):\\n    return [p0[i]-p1[i] for i in range(3)]\\n\\ndef add(p0,p1):\\n    return [p0[i]+p1[i] for i in range(3)]\\n\\ndef div(p0,x):\\n    return [p0[i]//x for i in range(3)]\\n\\ndef cross(p0,p1):\\n    return [p0[(i+1)%3]*p1[(i+2)%3]-p0[(i+2)%3]*p1[(i+1)%3] for i in range(3)]\\n\\ndef match(p0,p1):\\n    return sorted(p0) == sorted(p1)\\n\\ndef poss(i,prior,s):\\n    if i == len(l): return check(prior)\\n    for p in perm(l[i]):\\n        if i == 1: print(p)\\n        possible = True\\n        for p2 in prior:\\n            if dist2(p,p2) not in [s,2*s,3*s]:\\n                possible = False\\n                break\\n        if possible:\\n            if poss(i+1,prior+[p]): return True\\n    return False\\n\\nsolved = False\\nfor l2 in perm(l,3):\\n    p0 = l2[0]\\n    for p1 in perm(l2[1]):\\n        s2 = dist2(p0,p1)\\n        if s2 == 0: continue\\n        s = round(s2**.5)\\n        if s**2 != s2: continue\\n        for p2 in perm(l2[2]):\\n            if dist2(p0,p2) != s2 or dist2(p1,p2) != 2*s2: continue\\n            p3 = sub(add(p1,p2),p0)\\n            x = div(cross(sub(p1,p0),sub(p2,p0)),s)\\n            p4,p5,p6,p7 = add(p0,x),add(p1,x),add(p2,x),add(p3,x)\\n            l3 = [p0,p1,p2,p3,p4,p5,p6,p7]\\n            if sorted([sorted(p) for p in l]) == sorted([sorted(p) for p in l3]):\\n                print(\\\"YES\\\")\\n                used = [False for i in range(8)]\\n                for p in l:\\n                    for i in range(8):\\n                        if used[i]: continue\\n                        if match(p,l3[i]):\\n                            print(l3[i][0],l3[i][1],l3[i][2])\\n                            used[i] = True\\n                            break\\n                solved = True\\n                break\\n        if solved: break\\n    if solved: break\\n\\nif not solved: print(\\\"NO\\\")\\n#if not poss(1,[l[0]]): print(\\\"NO\\\")\\n\", \"import itertools\\nfrom itertools import permutations as perm\\n\\nl = [[int(x) for x in input().split()] for i in range(8)]\\n\\ndef dist2(p0,p1):\\n    return sum([(p0[i]-p1[i])**2 for i in range(3)])\\n\\ndef sub(p0,p1):\\n    return [p0[i]-p1[i] for i in range(3)]\\n\\ndef add(p0,p1):\\n    return [p0[i]+p1[i] for i in range(3)]\\n\\ndef div(p0,x):\\n    return [p0[i]//x for i in range(3)]\\n\\ndef cross(p0,p1):\\n    return [p0[(i+1)%3]*p1[(i+2)%3]-p0[(i+2)%3]*p1[(i+1)%3] for i in range(3)]\\n\\ndef match(p0,p1):\\n    return sorted(p0) == sorted(p1)\\n\\nsolved = False\\nfor l2 in perm(l,3):\\n    p0 = l2[0]\\n    for p1 in perm(l2[1]):\\n        s2 = dist2(p0,p1)\\n        if s2 == 0: continue\\n        s = round(s2**.5)\\n        if s**2 != s2: continue\\n        for p2 in perm(l2[2]):\\n            if dist2(p0,p2) != s2 or dist2(p1,p2) != 2*s2: continue\\n            p3 = sub(add(p1,p2),p0)\\n            x = div(cross(sub(p1,p0),sub(p2,p0)),s)\\n            p4,p5,p6,p7 = add(p0,x),add(p1,x),add(p2,x),add(p3,x)\\n            l3 = [p0,p1,p2,p3,p4,p5,p6,p7]\\n            if sorted([sorted(p) for p in l]) == sorted([sorted(p) for p in l3]):\\n                print(\\\"YES\\\")\\n                used = [False for i in range(8)]\\n                for p in l:\\n                    for i in range(8):\\n                        if used[i]: continue\\n                        if match(p,l3[i]):\\n                            print(l3[i][0],l3[i][1],l3[i][2])\\n                            used[i] = True\\n                            break\\n                solved = True\\n                break\\n        if solved: break\\n    if solved: break\\n\\nif not solved: print(\\\"NO\\\")\\n#if not poss(1,[l[0]]): print(\\\"NO\\\")\\n\", \"import itertools\\nfrom itertools import permutations as perm\\n\\nl = [[int(x) for x in input().split()] for i in range(8)]\\n\\ndef dist2(p0,p1):\\n    return sum([(p0[i]-p1[i])**2 for i in range(3)])\\n\\ndef sub(p0,p1):\\n    return [p0[i]-p1[i] for i in range(3)]\\n\\ndef add(p0,p1):\\n    return [p0[i]+p1[i] for i in range(3)]\\n\\ndef div(p0,x):\\n    return [p0[i]//x for i in range(3)]\\n\\ndef cross(p0,p1):\\n    return [p0[(i+1)%3]*p1[(i+2)%3]-p0[(i+2)%3]*p1[(i+1)%3] for i in range(3)]\\n\\ndef match(p0,p1):\\n    return sorted(p0) == sorted(p1)\\n\\nsolved = False\\nfor l2 in perm(l,3):\\n    p0 = l2[0]\\n    for p1 in perm(l2[1]):\\n        s2 = dist2(p0,p1)\\n        if s2 == 0: continue\\n        s = round(s2**.5)\\n        # if s**2 != s2: continue\\n        for p2 in perm(l2[2]):\\n            if dist2(p0,p2) != s2 or dist2(p1,p2) != 2*s2: continue\\n            p3 = sub(add(p1,p2),p0)\\n            x = div(cross(sub(p1,p0),sub(p2,p0)),s)\\n            p4,p5,p6,p7 = add(p0,x),add(p1,x),add(p2,x),add(p3,x)\\n            l3 = [p0,p1,p2,p3,p4,p5,p6,p7]\\n            if sorted([sorted(p) for p in l]) == sorted([sorted(p) for p in l3]):\\n                print(\\\"YES\\\")\\n                used = [False for i in range(8)]\\n                for p in l:\\n                    for i in range(8):\\n                        if used[i]: continue\\n                        if match(p,l3[i]):\\n                            print(l3[i][0],l3[i][1],l3[i][2])\\n                            used[i] = True\\n                            break\\n                solved = True\\n                break\\n        if solved: break\\n    if solved: break\\n\\nif not solved: print(\\\"NO\\\")\\n#if not poss(1,[l[0]]): print(\\\"NO\\\")\\n\", \"import itertools\\nfrom itertools import permutations as perm\\nimport copy\\n\\ndef getPerm(it, index):\\n\\tif index == 0:\\n\\t\\treturn it\\n\\telif index == 1:\\n\\t\\treturn [it[0], it[2], it[1]]\\n\\telif index == 2:\\n\\t\\treturn [it[1], it[0], it[2]]\\n\\telif index == 3:\\n\\t\\treturn [it[1], it[2], it[0]]\\n\\telif index == 4:\\n\\t\\treturn [it[2], it[0], it[1]]\\n\\telif index == 5:\\n\\t\\treturn [it[2], it[1], it[0]]\\n\\ndef distance(coord1, coord2):\\n\\treturn ((coord2[0] - coord1[0])**2 + (coord2[1] - coord1[1])**2 + (coord2[2] - coord1[2])**2)\\n\\ndists = ([0]*6)*7\\n\\npointList =  [[int(x) for x in input().split()] for y in range(0, 8)]\\n\\np0 = pointList[0]\\n\\nfor x in range(0, 7):\\n\\ty = 0\\n\\tfor pt in perm(pointList[x + 1], 3):\\n\\t\\t# print(pt, p0)\\n\\t\\tdists[x*6 + y] = distance(p0, pt)\\n\\t\\t# print(dists)\\n\\t\\ty += 1\\n\\n# print(pointList)\\n# print(dists)\\ndone = False\\nfinal = None\\n\\ndef same(it1, it2):\\n\\t# print(it1, it2)\\n\\tif list(it1) == list(it2):\\n\\t\\treturn True\\n\\treturn False\\n\\ndef checkNotSame(indicesSoFar, newIndex):\\n\\tnonlocal pointList\\n\\tptToComp = getPerm(pointList[len(indicesSoFar) + 1], newIndex)\\n\\tfor c in range(len(indicesSoFar)):\\n\\t\\tif same(getPerm(pointList[c + 1], indicesSoFar[c]), ptToComp):\\n\\t\\t\\t# print(getPerm(pointList[c + 1], indicesSoFar[c]), getPerm(pointList[len(indicesSoFar)], newIndex), False)\\n\\t\\t\\treturn False\\n\\treturn True\\n\\n\\n\\ndef checkCompatible(a, b):\\n\\tif a == b or a*2 == b or a == 2*b or a*3 == b or a ==3*b or 2*a == 3*b or 3*a== 2*b:\\n\\t\\treturn True\\n\\treturn False\\n\\ndef getSeven(distList, soFar, index):\\n\\tnonlocal done\\n\\tnonlocal final\\n\\tif done == True:\\n\\t\\treturn\\n\\tif index == 7:\\n\\t\\t# for h in range(0,7):\\n\\t\\t# \\tprint(getPerm(pointList[h+1], soFar[h]), end=\\\" \\\")\\n\\t\\t# print()\\n\\t\\t# for i in range(0,7):\\n\\t\\t# \\tprint(dists[i*6+soFar[i]], end=\\\" \\\")\\n\\t\\t# print()\\n\\t\\t# print(soFar)\\n\\t\\tdistsSoFar = [dists[i*6+soFar[i]] for i in range(0, 7)]\\n\\t\\t# print(distsSoFar)\\n\\t\\tlowest = min(distsSoFar)\\n\\t\\tlows = 0\\n\\t\\ttwos = 0\\n\\t\\tthrees = 0\\n\\t\\tfor a in range(0, 7):\\n\\t\\t\\tif distsSoFar[a] == lowest:\\n\\t\\t\\t\\tlows += 1\\n\\t\\t\\telif distsSoFar[a] == lowest*2:\\n\\t\\t\\t\\ttwos += 1\\n\\t\\t\\telif distsSoFar[a] == lowest*3:\\n\\t\\t\\t\\tthrees += 1\\n\\t\\tif lows == 3 and twos == 3 and threes == 1:\\n\\t\\t\\tdone = True\\n\\t\\t\\tfinal = soFar\\n\\t\\treturn\\n\\tfor x in range(0, 6):\\n\\t\\tif done == True:\\n\\t\\t\\treturn\\n\\t\\tif soFar == []:\\n\\t\\t\\tcurList = copy.copy(soFar)\\n\\t\\t\\tcurList.append(x)\\n\\t\\t\\tgetSeven(distList, curList, index + 1)\\n\\t\\telse:\\n\\t\\t\\t # and checkNotSame(soFar, x)\\n\\t\\t\\t# print(getPerm(pointList[index], soFar[index - 1]), getPerm(pointList[index + 1], x))\\n\\t\\t\\t# print(distList[x+(index)*6], distList[soFar[index - 1]+(index - 1)*6])\\n\\t\\t\\tif checkCompatible(distList[x+(index)*6], distList[soFar[index - 1]+(index-1)*6]):\\n\\t\\t\\t\\tif checkNotSame(soFar, x):\\n\\t\\t\\t\\t\\t# print(\\\"Enters\\\")\\n\\t\\t\\t\\t\\tcurList = copy.copy(soFar)\\n\\t\\t\\t\\t\\tcurList.append(x)\\n\\t\\t\\t\\t\\t# print(curList)\\n\\t\\t\\t\\t\\tgetSeven(distList, curList, index+1)\\n\\t\\t# else:\\n\\ngetSeven(dists, [], 0)\\n\\nif final is None:\\n\\tprint(\\\"NO\\\")\\nelse:\\n\\tprint(\\\"YES\\\")\\n\\tprint(p0[0], p0[1], p0[2])\\n\\tfor b in range(0, 7):\\n\\t\\tx, y, z = getPerm(pointList[b+1], final[b])\\n\\t\\tprint(x, y, z)\\n\\n\\n\\n\\n\\n\\n\\n# print(combosList)\\n\", \"from itertools import permutations as p\\n\\n\\ndef razn(a, b):\\n    return (a[0] - b[0], a[1] - b[1], a[2] - b[2])\\n\\n\\ndef sp(a, b):\\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\\n\\n\\ndef su(a, b):\\n    return (a[0] + b[0], a[1] + b[1], a[2] + b[2])\\n\\na = list(tuple(map(int, input().split())) for i in range(8))\\ncp = sorted(sorted(el) for el in a)\\nfor p1 in p(a[0]):\\n    for i in range(1, 8):\\n        for j in range(i + 1, 8):\\n            for l in range(j + 1, 8):\\n                for p2 in p(a[i]):\\n                    for p3 in p(a[j]):\\n                        for p4 in p(a[l]):\\n                            s2 = razn(p2, p1)\\n                            s3 = razn(p3, p1)\\n                            s4 = razn(p4, p1)\\n                            le = sp(s2, s2)\\n                            if le and sp(s3, s3) == le and sp(s4, s4) == le and sp(s2, s3) == 0 and sp(s2, s4) == 0 and sp(s3, s4) == 0:\\n                                mass = [su(su(s3, s4), p1), su(su(s3, s2), p1), su(su(s2, s4), p1), p1, p2, p3, p4, su(su(su(s3, s4), p1), s2)]\\n                                if sorted(sorted(el) for el in mass) == cp:\\n                                    print(\\\"YES\\\")\\n                                    for el in a:\\n                                        tmp = sorted(el)\\n                                        for kk in range(8):\\n                                            if sorted(mass[kk]) == tmp:\\n                                                print(mass[kk][0], mass[kk][1], mass[kk][2])\\n                                                mass[kk] = ()\\n                                                break\\n                                    return\\nprint(\\\"NO\\\")\"]",
    "test": "{\n  \"inputs\": [\n    \"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n\",\n    \"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\",\n    \"0 0 0\\n1 0 0\\n0 1 0\\n1 1 0\\n0 0 1\\n1 0 1\\n0 1 1\\n1 1 1\\n\",\n    \"6 -2 -2\\n-5 1 -6\\n6 -6 7\\n6 3 4\\n9 -7 8\\n-9 -2 -6\\n-9 1 6\\n-9 -1 0\\n\",\n    \"-5 -3 -8\\n-8 8 -5\\n-3 3 6\\n6 3 8\\n-8 6 -3\\n8 -8 6\\n-3 -5 3\\n-5 3 8\\n\",\n    \"-6 1 3\\n-6 1 3\\n-5 0 0\\n-3 -3 7\\n-2 6 6\\n0 4 9\\n0 4 9\\n3 3 10\\n\",\n    \"-6 -10 -13\\n2 -13 -15\\n2 -6 -10\\n2 2 -15\\n6 -1 -13\\n6 2 -1\\n11 -3 -13\\n11 2 -3\\n\",\n    \"-6 -8 0\\n-6 4 16\\n-6 8 -12\\n-6 20 4\\n14 -8 0\\n14 4 16\\n14 8 -12\\n14 20 4\\n\",\n    \"5 6 5\\n5 3 3\\n3 3 3\\n5 5 3\\n5 3 3\\n5 3 3\\n5 5 3\\n3 5 5\\n\",\n    \"5 2 0\\n3 -3 -4\\n3 -6 0\\n4 3 -4\\n-1 -2 5\\n-6 -3 1\\n-5 6 -1\\n2 0 6\\n\",\n    \"-369 846 805\\n-293 846 -369\\n729 846 805\\n-252 -369 805\\n846 -293 729\\n805 729 -252\\n-252 -369 -293\\n729 -293 -252\\n\",\n    \"-4897 -1234 2265\\n-4897 -3800 2265\\n-4897 -1234 -301\\n-3800 -2331 -301\\n-2331 -1234 2265\\n-2331 -1234 -301\\n-3800 -2331 2265\\n-4897 -3800 -301\\n\",\n    \"93 68 15\\n93 43 23\\n40 40 -30\\n43 40 23\\n93 -2 -5\\n68 40 15\\n93 40 -30\\n40 -2 -5\\n\",\n    \"887691 577079 -337\\n-193088 -342950 -683216\\n740176 -59645 -120545\\n592743 -30828 -283642\\n724594 652051 -193925\\n87788 -179853 -845476\\n665286 -133780 -846313\\n828383 -75309 -786168\\n\",\n    \"-745038 -470013 -245590\\n168756 -684402 -45561\\n-75879 -670042 -603554\\n-168996 -611497 -184954\\n-609406 -27512 -217363\\n207089 -195060 33124\\n-542918 348573 -255696\\n229392 -187045 -108360\\n\",\n    \"-407872 -56765 -493131\\n188018 -394436 -612309\\n62413 -209242 162348\\n-705817 -294501 -652655\\n88703 241800 -871148\\n-413679 -990326 -109927\\n-533477 360978 -507187\\n-275258 386648 43170\\n\",\n    \"411586 -316610 -430676\\n-305714 -461321 402733\\n-451106 423163 -312524\\n-339083 407500 -437486\\n391156 -440891 -309800\\n387070 -332273 -447701\\n-468131 -328187 398647\\n-334997 419077 -457916\\n\",\n    \"-604518 -792421 -794968\\n-639604 -845386 -664545\\n-668076 -739456 -703162\\n-770475 -692569 -880696\\n-933661 -784375 -706917\\n-774006 -756127 -774766\\n-600987 -731410 -898351\\n-847933 -827731 -710448\\n\",\n    \"-83163 759234 174591\\n77931 -88533 920334\\n72567 974034 158481\\n18861 169227 893484\\n-61689 8127 839784\\n678684 34971 13497\\n174597 115521 732384\\n77937 255141 812934\\n\",\n    \"-845276 245666 -196657\\n-353213 152573 375200\\n-725585 -73510 322004\\n-565997 524945 282107\\n228911 298862 -938369\\n-103564 -126706 -632492\\n99377 -50368 -260120\\n-143461 471749 -472904\\n\",\n    \"554547 757123 -270279\\n935546 -159145 137545\\n-160481 19278 -805548\\n655167 -983971 121234\\n119898 315968 -261101\\n833590 -576147 -592458\\n-58525 452591 -91856\\n-694414 17942 -397724\\n\",\n    \"36924 92680 350843\\n697100 521211 -77688\\n-351925 -610088 36924\\n867468 -160261 -98984\\n-181557 697100 -780456\\n-588792 -133444 329547\\n207292 -330629 71384\\n526732 -759160 499915\\n\",\n    \"-593659 350000 928723\\n620619 638757 388513\\n620619 -882416 -632172\\n600244 312515 -843903\\n292140 -535799 -881388\\n-940276 -573284 -574312\\n330653 696617 -573284\\n-265180 658104 -901763\\n\",\n    \"861017 -462500 -274005\\n652263 66796 629450\\n232201 -329899 -968706\\n497126 89886 993064\\n-197575 -694067 -406329\\n463768 728693 -836382\\n-164771 -429142 519939\\n-561466 761497 -42438\\n\",\n    \"484554 -73939 147289\\n333153 -73939 -152694\\n-737739 33170 970401\\n670418 784537 -73939\\n333153 -152694 -737739\\n-737739 670418 784537\\n33170 -73939 970401\\n-737739 484555 147289\\n\",\n    \"-37445 372374 21189\\n398542 125861 400869\\n479373 -209864 -50773\\n-364789 163030 67227\\n505541 -260117 189198\\n374701 -520 335205\\n41059 -155444 -236032\\n-26688 230533 -63613\\n\",\n    \"163459 129764 357112\\n277260 476888 633667\\n476888 504608 -146791\\n163459 633667 277260\\n705 476888 781163\\n163459 781163 705\\n-146791 163459 504608\\n357112 129764 476888\\n\",\n    \"486623 24823 303304\\n-389873 -376490 -388969\\n170755 -644350 631652\\n291143 -838926 -571066\\n984320 -169753 36666\\n-157910 -911574 643812\\n365331 -194393 -49365\\n-716998 -37204 292047\\n\",\n    \"120639 -932662 -1032\\n983000 -56439 15066\\n-322992 -369232 -780849\\n339080 -136928 -886422\\n419570 845049 337026\\n900456 201129 -288742\\n-700359 578496 274688\\n764559 -224350 -564462\\n\",\n    \"-223515 128661 119249\\n-83250 119249 203469\\n278216 128661 -223515\\n-298323 268926 278216\\n278216 -158058 343734\\n119249 -158058 343734\\n-83250 278216 203469\\n119249 -298323 -391850\\n\",\n    \"802442 276413 311941\\n132940 -916927 26771\\n-629566 336080 371608\\n-165395 813416 86438\\n-404063 742775 288571\\n848944 86438 -200923\\n-689233 -344396 -379924\\n97412 26771 -881399\\n\",\n    \"830446 -93089 -271247\\n50376 285279 761701\\n509464 371358 90913\\n-242554 -825792 165148\\n-552177 744367 417385\\n-403353 -293940 446078\\n-437405 141814 -586870\\n101762 55735 -896493\\n\",\n    \"-110591 329051 328269\\n611888 45432 657925\\n493733 776570 273666\\n163587 -119250 273667\\n392312 557286 877991\\n557286 -220671 265008\\n713309 173028 -55989\\n891924 227630 429690\\n\",\n    \"-431644 -468238 -47168\\n-152500 38126 -96046\\n-507008 604168 -871390\\n33597 -320912 410318\\n231976 -765065 -282142\\n90050 317270 -485921\\n-693104 -301158 -245547\\n-134816 689462 -299825\\n\",\n    \"-1 1 1\\n0 1 1\\n1 1 0\\n1 0 0\\n0 1 0\\n1 1 1\\n0 0 0\\n0 0 1\\n\",\n    \"-1000000 1000000 1000000\\n-1000000 -1000000 -1000000\\n-1000000 1000000 -1000000\\n1000000 1000000 1000000\\n1000000 -1000000 -1000000\\n-1000000 1000000 1000000\\n-1000000 -1000000 1000000\\n1000000 1000000 -1000000\\n\",\n    \"-1000000 1000000 1000000\\n-1000000 1000000 -1000000\\n-1000000 1000000 -1000000\\n1000000 -1000000 1000000\\n1000000 1000000 1000000\\n-1000000 -1000000 1000000\\n999999 1000000 -1000000\\n-1000000 -1000000 -1000000\\n\",\n    \"-96608 -96608 100000\\n100000 100000 -96608\\n100000 -96608 -96608\\n-96608 -96608 -96608\\n-96608 100000 100000\\n100000 100000 100000\\n100000 100000 -96608\\n-96608 -96608 100000\\n\",\n    \"65536 0 65536\\n65536 0 0\\n0 65536 0\\n65536 65536 65536\\n65536 0 65536\\n0 0 0\\n0 0 65536\\n65536 0 65536\\n\",\n    \"-524288 -524288 -524288\\n-524288 524288 -524288\\n-524288 -524288 524288\\n-524288 524288 524288\\n524288 -524288 -524288\\n-524288 524288 524288\\n524288 524288 524288\\n524288 524288 -524288\\n\",\n    \"524288 -524288 524288\\n-524288 -524288 -524288\\n524288 -524288 -524288\\n524288 524288 -524288\\n524288 -524288 524288\\n524288 524288 524288\\n-524288 524288 -524288\\n-524289 524288 -524288\\n\",\n    \"0 0 0\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\\n\",\n    \"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n\",\n    \"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n\",\n    \"1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\",\n    \"0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n\",\n    \"0 0 0\\n0 0 939177\\n0 0 939177\\n0 0 939177\\n0 939177 939177\\n0 939177 939177\\n0 939177 939177\\n939177 939177 939177\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1\\n\",\n    \"NO\\n\",\n    \"YES\\n0 0 0\\n0 0 1\\n0 1 0\\n0 1 1\\n1 0 0\\n1 0 1\\n1 1 0\\n1 1 1\\n\",\n    \"NO\\n\",\n    \"YES\\n-8 -5 -3\\n-8 -5 8\\n3 6 -3\\n3 6 8\\n-8 6 -3\\n-8 6 8\\n3 -5 -3\\n3 -5 8\\n\",\n    \"YES\\n-6 1 3\\n3 1 -6\\n0 -5 0\\n-3 7 -3\\n6 -2 6\\n0 4 9\\n9 4 0\\n3 10 3\\n\",\n    \"YES\\n-13 -10 -6\\n-13 2 -15\\n2 -10 -6\\n2 2 -15\\n-13 -1 6\\n2 -1 6\\n-13 11 -3\\n2 11 -3\\n\",\n    \"YES\\n-8 -6 0\\n4 -6 16\\n8 -6 -12\\n20 -6 4\\n-8 14 0\\n4 14 16\\n8 14 -12\\n20 14 4\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n-369 805 846\\n-369 -293 846\\n729 805 846\\n-369 805 -252\\n729 -293 846\\n729 805 -252\\n-369 -293 -252\\n729 -293 -252\\n\",\n    \"YES\\n-4897 -1234 2265\\n-4897 -3800 2265\\n-4897 -1234 -301\\n-2331 -3800 -301\\n-2331 -1234 2265\\n-2331 -1234 -301\\n-2331 -3800 2265\\n-4897 -3800 -301\\n\",\n    \"YES\\n15 68 93\\n43 23 93\\n-30 40 40\\n43 23 40\\n-2 -5 93\\n15 68 40\\n-30 40 93\\n-2 -5 40\\n\",\n    \"YES\\n-337 577079 887691\\n-193088 -683216 -342950\\n-59645 740176 -120545\\n592743 -30828 -283642\\n652051 -193925 724594\\n-845476 87788 -179853\\n-133780 -846313 665286\\n-786168 -75309 828383\\n\",\n    \"YES\\n-745038 -470013 -245590\\n-684402 -45561 168756\\n-603554 -75879 -670042\\n-168996 -611497 -184954\\n-27512 -217363 -609406\\n33124 207089 -195060\\n-542918 348573 -255696\\n-108360 -187045 229392\\n\",\n    \"YES\\n-493131 -407872 -56765\\n-612309 188018 -394436\\n162348 -209242 62413\\n-294501 -705817 -652655\\n241800 88703 -871148\\n-413679 -109927 -990326\\n360978 -507187 -533477\\n43170 386648 -275258\\n\",\n    \"YES\\n-430676 -316610 411586\\n-461321 -305714 402733\\n-451106 -312524 423163\\n-437486 -339083 407500\\n-440891 -309800 391156\\n-447701 -332273 387070\\n-468131 -328187 398647\\n-457916 -334997 419077\\n\",\n    \"YES\\n-794968 -792421 -604518\\n-639604 -845386 -664545\\n-703162 -739456 -668076\\n-692569 -880696 -770475\\n-784375 -933661 -706917\\n-756127 -774766 -774006\\n-731410 -898351 -600987\\n-847933 -827731 -710448\\n\",\n    \"YES\\n-83163 174591 759234\\n-88533 77931 920334\\n72567 158481 974034\\n169227 18861 893484\\n8127 -61689 839784\\n13497 34971 678684\\n174597 115521 732384\\n77937 255141 812934\\n\",\n    \"YES\\n-845276 -196657 245666\\n-353213 375200 152573\\n-725585 322004 -73510\\n-565997 282107 524945\\n-938369 228911 298862\\n-632492 -103564 -126706\\n-260120 -50368 99377\\n-472904 -143461 471749\\n\",\n    \"YES\\n-270279 554547 757123\\n137545 -159145 935546\\n-805548 19278 -160481\\n-983971 121234 655167\\n315968 -261101 119898\\n-576147 -592458 833590\\n-91856 452591 -58525\\n-397724 -694414 17942\\n\",\n    \"YES\\n36924 92680 350843\\n697100 -77688 521211\\n36924 -610088 -351925\\n867468 -98984 -160261\\n697100 -780456 -181557\\n-133444 -588792 329547\\n207292 71384 -330629\\n526732 -759160 499915\\n\",\n    \"YES\\n-593659 350000 928723\\n638757 388513 620619\\n-632172 -882416 620619\\n600244 -843903 312515\\n292140 -535799 -881388\\n-940276 -574312 -573284\\n330653 696617 -573284\\n-901763 658104 -265180\\n\",\n    \"YES\\n-462500 -274005 861017\\n66796 652263 629450\\n232201 -968706 -329899\\n993064 89886 497126\\n-694067 -406329 -197575\\n463768 -836382 728693\\n-164771 519939 -429142\\n761497 -42438 -561466\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n129764 163459 357112\\n277260 476888 633667\\n-146791 476888 504608\\n277260 163459 633667\\n705 476888 781163\\n705 163459 781163\\n-146791 163459 504608\\n129764 476888 357112\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n-1000000 1000000 1000000\\n-1000000 -1000000 -1000000\\n-1000000 -1000000 1000000\\n1000000 1000000 1000000\\n-1000000 1000000 -1000000\\n1000000 -1000000 1000000\\n1000000 -1000000 -1000000\\n1000000 1000000 -1000000\\n\",\n    \"NO\\n\",\n    \"YES\\n-96608 -96608 100000\\n-96608 100000 100000\\n-96608 100000 -96608\\n-96608 -96608 -96608\\n100000 -96608 100000\\n100000 100000 100000\\n100000 100000 -96608\\n100000 -96608 -96608\\n\",\n    \"YES\\n0 65536 65536\\n0 0 65536\\n0 65536 0\\n65536 65536 65536\\n65536 0 65536\\n0 0 0\\n65536 0 0\\n65536 65536 0\\n\",\n    \"YES\\n-524288 -524288 -524288\\n-524288 -524288 524288\\n-524288 524288 -524288\\n-524288 524288 524288\\n524288 -524288 -524288\\n524288 -524288 524288\\n524288 524288 524288\\n524288 524288 -524288\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n0 0 0\\n0 0 939177\\n0 939177 0\\n939177 0 0\\n0 939177 939177\\n939177 0 939177\\n939177 939177 0\\n939177 939177 939177\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}