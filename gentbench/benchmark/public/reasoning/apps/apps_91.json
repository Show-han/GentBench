{
    "problem": "You are an expert Python programmer, and here is your task: A monster is attacking the Cyberland!\n\nMaster Yang, a braver, is going to beat the monster. Yang and the monster each have 3 attributes: hitpoints (HP), offensive power (ATK) and defensive power (DEF).\n\nDuring the battle, every second the monster's HP decrease by max(0, ATK_{Y} - DEF_{M}), while Yang's HP decreases by max(0, ATK_{M} - DEF_{Y}), where index Y denotes Master Yang and index M denotes monster. Both decreases happen simultaneously Once monster's HP \u2264 0 and the same time Master Yang's HP > 0, Master Yang wins.\n\nMaster Yang can buy attributes from the magic shop of Cyberland: h bitcoins per HP, a bitcoins per ATK, and d bitcoins per DEF.\n\nNow Master Yang wants to know the minimum number of bitcoins he can spend in order to win.\n\n\n-----Input-----\n\nThe first line contains three integers HP_{Y}, ATK_{Y}, DEF_{Y}, separated by a space, denoting the initial HP, ATK and DEF of Master Yang.\n\nThe second line contains three integers HP_{M}, ATK_{M}, DEF_{M}, separated by a space, denoting the HP, ATK and DEF of the monster.\n\nThe third line contains three integers h, a, d, separated by a space, denoting the price of 1\u00a0HP, 1\u00a0ATK and 1\u00a0DEF.\n\nAll numbers in input are integer and lie between 1 and 100 inclusively.\n\n\n-----Output-----\n\nThe only output line should contain an integer, denoting the minimum bitcoins Master Yang should spend in order to win.\n\n\n-----Examples-----\nInput\n1 2 1\n1 100 1\n1 100 100\n\nOutput\n99\n\nInput\n100 100 100\n1 1 1\n1 1 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nFor the first sample, prices for ATK and DEF are extremely high. Master Yang can buy 99 HP, then he can beat the monster with 1 HP left.\n\nFor the second sample, Master Yang is strong enough to beat the monster, so he doesn't need to buy anything.",
    "solution": "[\"H_y,A_y,D_y = list(map(int,input().split()))\\nH_m,A_m,D_m = list(map(int,input().split()))\\nh,a,d = list(map(int,input().split()))\\nans = 10**20\\nfor A_buy in range(max(0,H_m+D_m-A_y)+1):\\n  for D_buy in range(max(0,A_m-D_y)+1):\\n    damage = A_y + A_buy - D_m\\n    cost = A_buy * a + D_buy * d\\n    if damage > 0 and cost < ans:\\n      time = (H_m+damage-1)//damage\\n      H_left = H_y - time * max(0, A_m - D_y - D_buy)\\n      if H_left <= 0: cost += h * (1-H_left)\\n      if cost < ans: \\n        ans = cost\\nprint(ans)\\n\", \"R=lambda:list(map(int,input().split()))\\nyH,yA,yD=R()\\nmH,mA,mD=R()\\nh,a,d=R()\\nQ=10**20\\nfor A in range(max(0,mD-yA+1),max(0,mH+mD-yA)+1):\\n for D in range(max(0,mA-yD)+1):\\n  H=yH-((mH+yA+A-mD-1)//(yA+A-mD))*max(0,mA-yD-D)\\n  Q=min(A*a+D*d+max(0,h*(1-H)),Q)\\nprint(Q)\\n\", \"hy, ay, dy = map(int, input().split())\\nhm, am, dm = map(int, input().split())\\nh, a, d = map(int, input().split())\\ns = 1 << 30\\nfor da in range(max(0, dm - ay + 1), max(0, hm - ay + dm) + 1):\\n    for dd in range(max(0, am - dy) + 1):\\n        dh = max(0, ((am - dy - dd) * ((hm - 1) // (ay + da - dm) + 1) - hy + 1))\\n        s = min(s, h * dh + a * da + d * dd)\\nprint(s)\", \"R=lambda:map(int,input().split())\\nyH,yA,yD=R()\\nmH,mA,mD=R()\\nh,a,d=R()\\nQ=10**20\\nfor A in range(max(0,mD-yA+1),max(0,mH+mD-yA)+1):\\n for D in range(max(0,mA-yD)+1):\\n  H=yH-((mH+yA+A-mD-1)//(yA+A-mD))*max(0,mA-yD-D)\\n  Q=min(A*a+D*d+max(0,h*(1-H)),Q)\\nprint(Q)\", \"R=lambda:map(int,input().split())\\nyH,yA,yD=R()\\nmH,mA,mD=R()\\nh,a,d=R()\\nQ=10**20\\nfor A in range(max(0,mD-yA+1),max(0,mH+mD-yA)+1):\\n for D in range(max(0,mA-yD)+1):\\n  H=yH-((mH+yA+A-mD-1)//(yA+A-mD))*max(0,mA-yD-D)\\n  Q=min(A*a+D*d+max(0,h*(1-H)),Q)\\nprint(Q)\", \"from operator import itemgetter\\n\\ndef bin_search(lo, hi, key):\\n    while (lo < hi):\\n        md = (hi + lo) // 2\\n        if (md >= key(md)):\\n            hi = md\\n            #print(\\\"new hi:\\\", hi)\\n        else:\\n            lo = md + 1\\n            #print(\\\"new lo:\\\", lo)\\n    return lo   #or hi, they're equal at this point\\n\\ndef key_func(budget, prices):\\n    for k in range(1 + budget//prices[2]):\\n        budget2 = budget - k*prices[2]\\n        for j in range(1 + budget2//prices[1]):\\n            budget3 = budget2 - j*prices[1]\\n            i = budget3//prices[0]\\n            if survive(i, j, k):\\n                return budget - 1\\n    return budget + 1\\n\\ndef survive(i, j, k):\\n    #nonlocal y, m, p, penumsorted\\n    toadd = [i, j, k]\\n    newy = list(y)\\n    newmhp = m[0]\\n    for i, item in enumerate(penumsorted):\\n        newy[item[0]] = y[item[0]] + toadd[i]\\n    #print(vars())\\n    while newy[0] > 0 and newmhp > 0:\\n        oldmhp = newmhp;\\n        newy[0] -= max(0, m[1] - newy[2])\\n        newmhp -= max(0, newy[1] - m[2])\\n        if oldmhp == newmhp:\\n            newy[0] = 0\\n    if newmhp <= 0 and newy[0] > 0:\\n        return True\\n    else:\\n        return False\\n\\ny = list(map(int, input().split()))\\nm = list(map(int, input().split()))\\np = list(map(int, input().split()))\\npsorted = sorted(p)\\npenum = list(enumerate(p))\\npenumsorted = sorted(penum, key=itemgetter(1))\\nprint(bin_search(0, 20000, lambda x: key_func(x, psorted)))\\n\", \"I=lambda:list(map(int,input().split()))\\nR=list(range(999))\\nq,w,e=I()\\nr,t,y=I()\\na,b,c=I()\\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\\n\", \"I=lambda:list(map(int,input().split()))\\nR=list(range(999))\\nq,w,e=I()\\nr,t,y=I()\\na,b,c=I()\\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\\n\", \"I=lambda:list(map(int,input().split()))\\nR=list(range(999))\\nq,w,e=I()\\nr,t,y=I()\\na,b,c=I()\\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\\n\", \"I=lambda:list(map(int,input().split()))\\nR=list(range(999))\\nq,w,e=I()\\nr,t,y=I()\\na,b,c=I()\\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\\n\", \"I=lambda:list(map(int,input().split()))\\nR=list(range(999))\\nq,w,e=I()\\nr,t,y=I()\\na,b,c=I()\\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\\n\", \"I=lambda:list(map(int,input().split()))\\nR=list(range(999))\\nq,w,e=I()\\nr,t,y=I()\\na,b,c=I()\\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\\n\", \"I=lambda:list(map(int,input().split()))\\nR=list(range(999))\\nq,w,e=I()\\nr,t,y=I()\\na,b,c=I()\\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\\n\", \"I=lambda:list(map(int,input().split()))\\nR=list(range(999))\\nq,w,e=I()\\nr,t,y=I()\\na,b,c=I()\\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\\n\", \"import math\\nhpy, atky, defy = list(map(int, input().split()))\\nhpm, atkm, defm = list(map(int, input().split()))\\nh,a,d = list(map(int, input().split()))\\n\\n\\nans = math.inf\\nfor i in range(defy, 101):\\n    for j in range(max(atky, defm+1), 201):\\n        xx = math.ceil(hpm / (j - defm)) * max(0,(atkm-i))\\n        hh = max(xx+1, hpy)\\n        ans = min(ans, (i -defy)*d + (j-atky)*a + (hh-hpy)*h)\\n\\nif ans >= math.inf:\\n    print(0)\\nelse:\\n    print(ans)\\n        \\n\\n\", \"R=lambda:list(map(int,input().split()))\\n\\nyH,yA,yD=R()\\n\\nmH,mA,mD=R()\\n\\nh,a,d=R()\\n\\nQ=10**20\\n\\nfor A in range(max(0,mD-yA+1),max(0,mH+mD-yA)+1):\\n\\n for D in range(max(0,mA-yD)+1):\\n\\n  H=yH-((mH+yA+A-mD-1)//(yA+A-mD))*max(0,mA-yD-D)\\n\\n  Q=min(A*a+D*d+max(0,h*(1-H)),Q)\\n\\nprint(Q)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"import math\\nimport sys\\nfrom bisect import bisect_right, bisect_left\\nfrom collections import Counter, defaultdict\\nfrom heapq import heappop, heappush\\nfrom itertools import accumulate\\nfrom sys import stdout\\n\\nR = lambda: map(int, input().split())\\nhy, ay, dy = R()\\nhm, am, dm = R()\\nch, ca, cd = R()\\nres = math.inf\\nfor ayp in range(1000):\\n    if ay + ayp > dm:\\n        k = (hm + ay + ayp - dm - 1) // (ay + ayp - dm)\\n        for dyp in range(1000):\\n            hyp = max(0, k * max(0, am - dy - dyp) - hy + 1)\\n            res = min(res, hyp * ch + dyp * cd + ayp * ca)\\nprint(res)\", \"hy, ay, dy = map(int, input().split())\\nhm, am, dm = map(int, input().split())\\nh, a, d = map(int, input().split())\\ns = 1 << 30\\nfor da in range(max(0, dm - ay + 1), max(0, hm - ay + dm) + 1):\\n    for dd in range(max(0, am - dy) + 1):\\n        dh = max(0, ((am - dy - dd) * ((hm - 1) // (ay + da - dm) + 1) - hy + 1))\\n        s = min(s, h * dh + a * da + d * dd)\\nprint(s)\", \"import math\\nx, y, z = map(int, input().split())\\na, b, c = map(int, input().split())\\ns, rs, ls = map(int, input().split())\\ndef rec(ss):\\n    for i in range(0, 205, 1):\\n        for j in range(0, 105, 1):\\n            if(i * rs + j * ls <= ss):\\n                q = y + i;p = z + j; pq = x + ((int)((ss - i * rs - j *ls) / s))\\n                an1 = 1000000000000.0;an2 = 1000000000000.0\\n                if(b - p > 0):\\n                    an1 = math.ceil(((float) (pq)) / ((float)(b - p)))\\n                if(q - c > 0):\\n                    an2 = math.ceil(((float) (a)) / ((float)(q - c)))\\n                if(q > c and p >= b or an1 > an2):\\n                    return True\\n    return False\\nst = 0; en = 100000; mid = 0\\nwhile(st <= en):\\n    mid = (int)((st + en) / 2)\\n    if(rec(mid) == True):\\n        en = mid - 1\\n    else:\\n        st = mid + 1\\nprint(en + 1)\", \"import math\\nx, y, z = map(int, input().split())\\na, b, c = map(int, input().split())\\ns, rs, ls = map(int, input().split())\\ndef rec(ss):\\n    for i in range(0, 205, 1):\\n        for j in range(0, 105, 1):\\n            if(i * rs + j * ls <= ss):\\n                q = y + i;p = z + j; pq = x + ((int)((ss - i * rs - j *ls) / s))\\n                an1 = 1000000000000.0;an2 = 1000000000000.0\\n                if(b - p > 0):\\n                    an1 = math.ceil(((float) (pq)) / ((float)(b - p)))\\n                if(q - c > 0):\\n                    an2 = math.ceil(((float) (a)) / ((float)(q - c)))\\n                if(q > c and p >= b or an1 > an2):\\n                    return True\\n    return False\\nst = 0; en = 100000; mid = 0\\nwhile(st <= en):\\n    mid = (int)((st + en) / 2)\\n    if(rec(mid) == True):\\n        en = mid - 1\\n    else:\\n        st = mid + 1\\nprint(en + 1)\"]",
    "test": "{\n  \"inputs\": [\n    \"1 2 1\\n1 100 1\\n1 100 100\\n\",\n    \"100 100 100\\n1 1 1\\n1 1 1\\n\",\n    \"50 80 92\\n41 51 56\\n75 93 12\\n\",\n    \"76 63 14\\n89 87 35\\n20 15 56\\n\",\n    \"12 59 66\\n43 15 16\\n12 18 66\\n\",\n    \"51 89 97\\n18 25 63\\n22 91 74\\n\",\n    \"72 16 49\\n5 21 84\\n48 51 88\\n\",\n    \"74 89 5\\n32 76 99\\n62 95 36\\n\",\n    \"39 49 78\\n14 70 41\\n3 33 23\\n\",\n    \"11 82 51\\n90 84 72\\n98 98 43\\n\",\n    \"65 6 5\\n70 78 51\\n88 55 78\\n\",\n    \"14 61 87\\n11 78 14\\n5 84 92\\n\",\n    \"1 28 47\\n31 60 38\\n14 51 77\\n\",\n    \"99 32 20\\n89 72 74\\n1 100 39\\n\",\n    \"1 10 29\\n1 1 43\\n1 1 100\\n\",\n    \"1 1 100\\n1 1 1\\n100 1 100\\n\",\n    \"79 1 1\\n1 1 10\\n1 1 100\\n\",\n    \"10 10 100\\n1 100 100\\n10 100 90\\n\",\n    \"10 10 100\\n1 10 1\\n1 1 100\\n\",\n    \"1 100 1\\n1 1 1\\n1 1 1\\n\",\n    \"11 1 1\\n100 1 1\\n100 1 1\\n\",\n    \"1 100 100\\n1 1 1\\n87 100 43\\n\",\n    \"10 100 1\\n1 100 100\\n100 1 9\\n\",\n    \"10 100 55\\n100 100 1\\n1 1 1\\n\",\n    \"11 1 1\\n10 1 10\\n100 50 1\\n\",\n    \"10 100 1\\n100 1 1\\n1 100 1\\n\",\n    \"1 10 10\\n1 10 100\\n1 1 61\\n\",\n    \"1 1 1\\n1 1 1\\n1 1 1\\n\",\n    \"1 1 1\\n1 1 1\\n100 100 100\\n\",\n    \"1 1 1\\n100 100 100\\n100 100 100\\n\",\n    \"100 100 100\\n1 1 1\\n1 1 1\\n\",\n    \"100 100 100\\n100 100 100\\n100 100 100\\n\",\n    \"1 1 1\\n1 1 100\\n100 100 1\\n\",\n    \"50 100 51\\n100 100 100\\n1 100 100\\n\",\n    \"1 1 1\\n100 100 100\\n1 2 3\\n\",\n    \"100 1 1\\n100 100 100\\n100 1 100\\n\",\n    \"1 100 1\\n100 100 100\\n1 100 100\\n\",\n    \"100 100 1\\n100 100 100\\n1 100 100\\n\",\n    \"1 1 1\\n100 100 100\\n1 100 100\\n\",\n    \"20 1 1\\n100 100 100\\n1 100 100\\n\",\n    \"25 38 49\\n84 96 42\\n3 51 92\\n\",\n    \"2 1 1\\n100 2 100\\n100 1 100\\n\",\n    \"1 97 1\\n100 99 98\\n1 51 52\\n\",\n    \"1 1 1\\n100 100 100\\n1 1 100\\n\",\n    \"1 100 1\\n100 100 99\\n1 100 100\\n\",\n    \"100 1 1\\n100 100 100\\n1 100 100\\n\"\n  ],\n  \"outputs\": [\n    \"99\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"915\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"3519\\n\",\n    \"3529\\n\",\n    \"0\\n\",\n    \"1376\\n\",\n    \"7027\\n\",\n    \"0\\n\",\n    \"1562\\n\",\n    \"5478\\n\",\n    \"34\\n\",\n    \"1\\n\",\n    \"10\\n\",\n    \"9100\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"811\\n\",\n    \"37\\n\",\n    \"500\\n\",\n    \"0\\n\",\n    \"91\\n\",\n    \"1\\n\",\n    \"100\\n\",\n    \"19900\\n\",\n    \"0\\n\",\n    \"100\\n\",\n    \"10000\\n\",\n    \"1384\\n\",\n    \"496\\n\",\n    \"199\\n\",\n    \"1990\\n\",\n    \"1891\\n\",\n    \"11890\\n\",\n    \"11871\\n\",\n    \"1692\\n\",\n    \"199\\n\",\n    \"1498\\n\",\n    \"298\\n\",\n    \"1890\\n\",\n    \"11791\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}