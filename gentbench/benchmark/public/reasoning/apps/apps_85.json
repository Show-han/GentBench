{
    "problem": "You are an expert Python programmer, and here is your task: Recently, the Fair Nut has written $k$ strings of length $n$, consisting of letters \"a\" and \"b\". He calculated $c$\u00a0\u2014 the number of strings that are prefixes of at least one of the written strings. Every string was counted only one time.\n\nThen, he lost his sheet with strings. He remembers that all written strings were lexicographically not smaller than string $s$ and not bigger than string $t$. He is interested: what is the maximum value of $c$ that he could get.\n\nA string $a$ is lexicographically smaller than a string $b$ if and only if one of the following holds: $a$ is a prefix of $b$, but $a \\ne b$; in the first position where $a$ and $b$ differ, the string $a$ has a letter that appears earlier in the alphabet than the corresponding letter in $b$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\leq n \\leq 5 \\cdot 10^5$, $1 \\leq k \\leq 10^9$).\n\nThe second line contains a string $s$ ($|s| = n$)\u00a0\u2014 the string consisting of letters \"a\" and \"b.\n\nThe third line contains a string $t$ ($|t| = n$)\u00a0\u2014 the string consisting of letters \"a\" and \"b.\n\nIt is guaranteed that string $s$ is lexicographically not bigger than $t$.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 maximal value of $c$.\n\n\n-----Examples-----\nInput\n2 4\naa\nbb\n\nOutput\n6\n\nInput\n3 3\naba\nbba\n\nOutput\n8\n\nInput\n4 5\nabbb\nbaaa\n\nOutput\n8\n\n\n\n-----Note-----\n\nIn the first example, Nut could write strings \"aa\", \"ab\", \"ba\", \"bb\". These $4$ strings are prefixes of at least one of the written strings, as well as \"a\" and \"b\". Totally, $6$ strings.\n\nIn the second example, Nut could write strings \"aba\", \"baa\", \"bba\".\n\nIn the third example, there are only two different strings that Nut could write. If both of them are written, $c=8$.",
    "solution": "[\"def ii():\\n    return int(input())\\ndef mi():\\n    return list(map(int, input().split()))\\ndef li():\\n    return list(mi())\\n\\n# B. The Fair Nut and Strings\\n\\nn, k = mi()\\ns = input().strip()\\nt = input().strip()\\n\\nans = 0\\njj = 0\\nfor i in range(n):\\n    if s[i] == t[i]:\\n        ans += 1\\n        jj = i + 1\\n    else:\\n        break\\ncur = 2\\nfor j in range(jj, n):\\n    if s[j] == 'b':\\n        cur -= 1\\n    if t[j] == 'a':\\n        cur -= 1\\n    if cur >= k:\\n        ans += k * (n - j)\\n        break\\n    ans += cur\\n    cur *= 2\\n\\nprint(ans)\\n\", \"n,k=map(int,input().split())\\ns,t,cu=input(),input(),[1]\\nfor i in range(n):\\n    cu+=[cu[-1]*2-(s[i]=='b')-(t[i]=='a')]\\n    if cu[-1]>=k:cu[-1]=k;break\\nprint(sum(cu)+(n-i-1)*k-1)\", \"n, k = map(int, input().split())\\na = input()\\nb = input()\\nres = 0\\nans = 0\\nfor i in range(0, n):\\n    res = min(res * 2 + (b[i] == 'b') - (a[i] == 'b'), k)\\n    ans += min(res + 1, k)\\nprint(ans)\", \"import sys\\nreadline = sys.stdin.readline\\n\\nN, K = list(map(int, readline().split()))\\nS = [1 if s == 'b' else 0 for s in readline().strip()]\\nT = [1 if s == 'b' else 0 for s in readline().strip()]\\n\\ndiff = 0\\nfor s, t in zip(S, T):\\n    if diff > K:\\n        break\\n    if s == t:\\n        diff <<= 1\\n    elif s == 1:\\n        diff = (diff << 1) - 1\\n    else:\\n        diff = (diff << 1) + 1\\n\\nK = min(K, diff + 1)\\n\\nans = 0\\ncnt = 1\\nans = 0\\nfor s, t in zip(S, T):\\n    if cnt == K:\\n        ans += cnt\\n        continue\\n    if cnt == 1:\\n        if s == t:\\n            ans += cnt\\n        else:\\n            cnt += 1\\n            cnt = min(K, cnt)\\n            ans += cnt\\n        continue\\n    else:\\n        cnt *= 2\\n        if s == 1:\\n            cnt -= 1\\n        if t == 0:\\n            cnt -= 1\\n        cnt = min(K, cnt)\\n        ans += cnt\\n    \\nprint(ans)\\n\", \"n,k=map(int,input().split())\\ns=input()\\nt=input()\\nres,tp=0,1\\nfor i in range(n):\\n    tp*=2\\n    if s[i]=='b':\\n        tp-=1\\n    if t[i]=='a':\\n        tp-=1\\n    res+=min(tp,k)\\n    tp=min(tp,1e9)\\nprint(res)\", \"# x = int(input())\\n# m, n = map(int, input().split())\\n# nums = list(map(int, input().split()))\\nn,k=list(map(int,input().split()))\\ns1=input()\\ns2=input()\\ncnt=1\\nans=0\\nfor i in range(n):\\n    cnt*=2\\n    if s1[i]=='b':\\n        cnt-=1\\n    if s2[i]=='a':\\n        cnt-=1\\n    cnt=min(1e18+7,cnt)\\n    ans+=min(cnt,k)\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\ns = input()\\nt = input()\\nSum = -1\\npos = 0\\nans = 0\\nwhile pos < n and s[pos] == t[pos]:\\n    pos += 1\\n    ans += 1\\nfor i in range(pos, n):\\n    Sum = Sum * 2 + 1 - ord(s[i]) + ord(t[i])\\n    if Sum + 2 >= k:\\n        ans += (n - i) * k\\n        break\\n    else:\\n        ans += Sum + 2\\nprint(ans)\\n\\n\", \"n, k = map(int, input().split())\\na = input()\\nb = input()\\nres = 0\\nans = 0\\nfor i in range(0, n):\\n    res = min(res * 2 + (b[i] == 'b') - (a[i] == 'b'), k)\\n    ans += min(res + 1, k)\\nprint(ans)\", \"n, k = map(int, input().split())\\ns = input()\\nt = input()\\nres = 0\\nans = 0\\nfor i in range(0, n):\\n    res = min(res * 2 - (s[i] == 'b') + (t[i] == 'b'), k);\\n    ans += min(res + 1, k)\\nprint(ans)\"]",
    "test": "{\n  \"inputs\": [\n    \"2 4\\naa\\nbb\\n\",\n    \"3 3\\naba\\nbba\\n\",\n    \"4 5\\nabbb\\nbaaa\\n\",\n    \"1 1\\na\\na\\n\",\n    \"1 1000000000\\na\\na\\n\",\n    \"10 1\\nbbbaaaabbb\\nbbbbaaabbb\\n\",\n    \"10 10\\naabaaaabba\\naabbaaabba\\n\",\n    \"10 100\\naabaaaaaab\\naabbaaabab\\n\",\n    \"10 1\\nbaaabaaaaa\\nbaaabaaaab\\n\",\n    \"10 10\\nbabbbbbaaa\\nbabbbbbaab\\n\",\n    \"10 100\\nababaaaaba\\nababaaaabb\\n\",\n    \"10 1\\naaaaaaaaba\\nbaabaaaaba\\n\",\n    \"10 10\\naaaaaaaaba\\nbaaaaabbaa\\n\",\n    \"10 100\\naaaaaaaaab\\nbaabbbabaa\\n\",\n    \"10 1\\naaaabbabaa\\nbaaaaaaaba\\n\",\n    \"10 10\\naaaababbbb\\nbaaaaaaaaa\\n\",\n    \"10 100\\naaabaabaaa\\nbaaaaaaaaa\\n\",\n    \"100 1\\naaaaaababbbbaaaaababbabbaaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababbbbabbbaabbaaaaaabaabaaaa\\naaaaaababbbbaaaaababbabbaaababbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaabbbbbaaaaaaaaaabaaaababbbba\\n\",\n    \"100 100\\nabaaaaaabababbbbbbaabbbbabaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaabababbaaabababbbaabbbaabbb\\nabaaaaaabababbbbbbaabbbbabaaabbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaabaabbbbbabaaabbbbaabbaabba\\n\",\n    \"100 10000\\nbbaabaabbaaabbaaabbaaabababaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbaaaabbbbaaabbbabbbbabaaa\\nbbaabaabbaaabbaaabbaaabababaabbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbabaaababaabaaababaaaabbab\\n\",\n    \"100 1000000\\nabbabbabbbbaabababbaabbbaaaabbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbabbababbbababaabbbba\\nabbabbabbbbaabababbaabbbaaaabbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababaaaaababaababbabbaaabbab\\n\",\n    \"100 1000000000\\nbbabbaabbbaaaaabbabbbaaabbbbabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaabbbbabaabbbabbaaaaabbbbaab\\nbbabbaabbbaaaaabbabbbaaabbbbabbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababbbabbbbaaaaabbaaaaaaaab\\n\",\n    \"100 1\\nabaaabbababbbabbbbbbbabaababbbabaabbbabaabbabbbbabaaaabbbbabbabababababbaabbbaabababbbabbabbbababbbb\\nbbaaabbabbabbbbaabaaaaaaaaabbabaaababbabbabbabbbbbbbbbbabaaabbabaaaaababbaababbbabaabbbbabababbaabab\\n\",\n    \"100 100\\nabbbbbbbbbabbbabbbabaabaabaabbabbbbbbbbbbababbbbababbbaabbbbabaababaaaabbabaaabaaababbaabbabaaaaaaba\\nbabbabbaabbabaaaabbabbababbabbabbbaaaabbbbbbabaaaaaaaabaababbbbbaabbbaaaaabbaaababaaaaaababbbababbab\\n\",\n    \"100 10000\\nababbabaaabababbabbaaabbbaaabbbbbbaabbbbaabbabbaabbbaaaaaaababaabaaaaaaaababbaabbbaabaababbbaababbba\\nbbbbabbabbbbbabbbbbbbbabaaabbbbababbababaabaaabbbabbababbabaabbababbabbaaaaabbababaaababbaabaaaababb\\n\",\n    \"100 1000000\\nabaabbaabaaaabbbbabaabbabbaaabbababaabbbabbaaabbbaaabababbabbbaaaaaabbbbbbbaabaaaaabbabbbbabababbaaa\\nbbbbaababaabbbbbbbbbbaaababbaaaabaaabbaaabbbbbbbbbbaabbabaaaababaabababbabaabbabbbbaaabababaaaabaabb\\n\",\n    \"100 1000000000\\nabbbbabababaabaabaabbababaabbbbabababbaabbaaaabbaabababbabbbbaabbbbaaabaabbaabbbbabaaaaababbbbabbbba\\nbaababababbaabbbbabbabaabbbabbbbaaabbaabbaaaaababaaaabababbababbabbabbbbababbababbbbbabababbbabbabba\\n\",\n    \"100 1\\nabbaabababbbbbbaaabaaaabbbabbbaababaaaaaaabbbbbaabaaabbbabbbaaabbbaabaaabaaaabbaabbbaaaabbbbbababbba\\nabbaabababbbbbbaaabaaaabbbabbbaababaaaaaaabbbbbaabaaabbbabbbaaabbbaabaaabaaaabbaabbbaaaabbbbbababbbb\\n\",\n    \"100 100\\nbbaabbabbaabaaabbababaababbabbaaabbaabaaabbbbaaabaaabababbabaabbbbaaaabbbaabbaaaabaaababbbabaababaaa\\nbbaabbabbaabaaabbababaababbabbaaabbaabaaabbbbaaabaaabababbabaabbbbaaaabbbaabbaaaabaaababbbabaababaab\\n\",\n    \"100 10000\\nabaabbabbababbbbbbbbbaaaaabababaabbbbbababbaaaabbbababbaaabbbbbbbbbababbbbbbababbbaaaababbbbaabaaaaa\\nabaabbabbababbbbbbbbbaaaaabababaabbbbbababbaaaabbbababbaaabbbbbbbbbababbbbbbababbbaaaababbbbaabaaaab\\n\",\n    \"100 1000000\\nabbababbbbabaabaababbbaaabbbabbbaabbabaaaababaaabbaabbababbbbbbbabbbbbaaababaabaababaaaabbbbabbbbbaa\\nabbababbbbabaabaababbbaaabbbabbbaabbabaaaababaaabbaabbababbbbbbbabbbbbaaababaabaababaaaabbbbabbbbbab\\n\",\n    \"100 1000000000\\nbbababbabbbaaaaaabaaaaabbabbbbabaabbabbaaaababaaaabababbabababbababaaabaabaaaaabbababbbbababbabbaaaa\\nbbababbabbbaaaaaabaaaaabbabbbbabaabbabbaaaababaaaabababbabababbababaaabaabaaaaabbababbbbababbabbaaab\\n\",\n    \"100 1\\naaaaaaaaaaaaaababbbbababaabbabaabbbbbaabbbaaaabaabaabbaabbbbabbabbababbbbbabbbaaababbbbababbabbbbaab\\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaabab\\n\",\n    \"100 100\\naaaaaaaaaaabbababaabbabbbbababbbbbbbbaabaababaaaaabbbbbbbaabbabaabaaabbbbbabbaaaabbaaaababaabbbbaaaa\\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababbabaab\\n\",\n    \"100 10000\\naaaaaaaaaababbabaaabbbaabbaababaabababbaaabaaaaabbaaaaabaabbbaaaaabbaabbbbbabaaabbababbbbabaababaabb\\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababababba\\n\",\n    \"100 1000000\\naaaaaaaaaabaaabbbabbbbaaaaaabbbabbbbbaaabaaaabbaabbaabbbbabbbaabbbbbbabbbabababababaabaabaaabbaaabab\\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaababa\\n\",\n    \"100 1000000000\\naaaaaaaaaaabbaaaaabbbababaaaabaabaabbbbbbaaababbaaabbabbbbbababbbabaabaaabaaabaabaabbbabbbabaaaaabab\\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbaabb\\n\",\n    \"100 1\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababaaababb\\nbaaaaaaaaaabbabbbbbbbababaabababbbaaabababbababbbbabbbbababaaabaaabaaaabbbaababaaaabababaabbababbaaa\\n\",\n    \"100 100\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbabaabaaa\\nbaaaaaaaaaaaabaabbbaaabaabbbabbaabaabaaabaabbbbabbbbbbbabbbbaaaaaabbaaababbbbbaabbbabbbbabbaabababbb\\n\",\n    \"100 10000\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbabbaabab\\nbaaaaaaaaabbaaaabaaaaaabbbbbbaaaabaabbbbaaabbaaababbbbababbbabaaabbbaabbbaaabbbbaabaabbbaabbabbbbaaa\\n\",\n    \"100 1000000\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababbabaaba\\nbaaaaaaaaaabaabbaaaaabbbbaaaaaaabbbaaaabbbabaabaabbbbaabaabbaaabbbabbaaaabbbaaaaaaababbbaabababbabba\\n\",\n    \"100 1000000000\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaabaabbb\\nbaaaaaaaaababbbbaaabbbbbababbbbabbbabbaaaaabaabbaabbbbabaaaabbaaaabaaabaabbbabbbbbbbbabaaabbababbabb\\n\",\n    \"100 1\\nbabbbabbbbbabbaabbbbbbbbbabababaabbbabaaabababaabbbababababaaaaabbbbbbabbbbbaaaabbaabbbabbaabbaaabaa\\nbabbbabbbbbabbaabbbbbbbbbabababaabbbabaaabababaabbbababababaaaaabbbbbbabbbbbaaaabbaabbbabbaabbaaabaa\\n\",\n    \"100 100\\naabbbaababbababaaabbaabaaababbbaabbabaaaaaabaaaababbbabbbbbbaabbaaaaabababababbbaabbbaabbaabbaabbbaa\\naabbbaababbababaaabbaabaaababbbaabbabaaaaaabaaaababbbabbbbbbaabbaaaaabababababbbaabbbaabbaabbaabbbaa\\n\",\n    \"100 10000\\naaaaaaaaabbbaaabbbabaabaaabbaabbaaabbaabaaabbaabbabababbbabbabbbaaaabbbbaaaabbaabbaaabaabbabaaaabbab\\naaaaaaaaabbbaaabbbabaabaaabbaabbaaabbaabaaabbaabbabababbbabbabbbaaaabbbbaaaabbaabbaaabaabbabaaaabbab\\n\",\n    \"100 1000000\\naabbbbbbaaabbbbaababbbaaababaababbabbbabaaabababbbbbabbabaaaabaaaaaabbbababbabbbbaaaaaabbbabbbbabaab\\naabbbbbbaaabbbbaababbbaaababaababbabbbabaaabababbbbbabbabaaaabaaaaaabbbababbabbbbaaaaaabbbabbbbabaab\\n\",\n    \"100 1000000000\\nbababaaabbbbbbaaaaaabaaababaabbabaaabbbaaabbabbabbbbababbaaabbbbbabaaabbaaaabbabbabaaabaabbbabaaabaa\\nbababaaabbbbbbaaaaaabaaababaabbabaaabbbaaabbabbabbbbababbaaabbbbbabaaabbaaaabbabbabaaabaabbbabaaabaa\\n\"\n  ],\n  \"outputs\": [\n    \"6\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"1\",\n    \"1\",\n    \"10\\n\",\n    \"52\\n\",\n    \"144\\n\",\n    \"10\\n\",\n    \"11\\n\",\n    \"11\\n\",\n    \"10\\n\",\n    \"79\\n\",\n    \"459\\n\",\n    \"10\\n\",\n    \"79\\n\",\n    \"418\\n\",\n    \"100\\n\",\n    \"6464\\n\",\n    \"576427\\n\",\n    \"51048625\\n\",\n    \"41073741883\\n\",\n    \"100\\n\",\n    \"9320\\n\",\n    \"880044\\n\",\n    \"81360664\\n\",\n    \"68795975521\\n\",\n    \"100\\n\",\n    \"101\\n\",\n    \"101\\n\",\n    \"101\\n\",\n    \"101\\n\",\n    \"100\\n\",\n    \"9434\\n\",\n    \"876378\\n\",\n    \"81047459\\n\",\n    \"71072947939\\n\",\n    \"100\\n\",\n    \"9434\\n\",\n    \"876419\\n\",\n    \"81049200\\n\",\n    \"71075285949\\n\",\n    \"100\",\n    \"100\",\n    \"100\",\n    \"100\",\n    \"100\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}