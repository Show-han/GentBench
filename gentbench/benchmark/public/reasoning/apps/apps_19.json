{
    "problem": "You are an expert Python programmer, and here is your task: A game field is a strip of 1 \u00d7 n square cells. In some cells there are Packmen, in some cells\u00a0\u2014 asterisks, other cells are empty.\n\nPackman can move to neighboring cell in 1 time unit. If there is an asterisk in the target cell then Packman eats it. Packman doesn't spend any time to eat an asterisk.\n\nIn the initial moment of time all Packmen begin to move. Each Packman can change direction of its move unlimited number of times, but it is not allowed to go beyond the boundaries of the game field. Packmen do not interfere with the movement of other packmen; in one cell there can be any number of packmen moving in any directions.\n\nYour task is to determine minimum possible time after which Packmen can eat all the asterisks.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the length of the game field.\n\nThe second line contains the description of the game field consisting of n symbols. If there is symbol '.' in position i \u2014 the cell i is empty. If there is symbol '*' in position i \u2014 in the cell i contains an asterisk. If there is symbol 'P' in position i \u2014 Packman is in the cell i.\n\nIt is guaranteed that on the game field there is at least one Packman and at least one asterisk.\n\n\n-----Output-----\n\nPrint minimum possible time after which Packmen can eat all asterisks.\n\n\n-----Examples-----\nInput\n7\n*..P*P*\n\nOutput\n3\n\nInput\n10\n.**PP.*P.*\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example Packman in position 4 will move to the left and will eat asterisk in position 1. He will spend 3 time units on it. During the same 3 time units Packman in position 6 will eat both of neighboring with it asterisks. For example, it can move to the left and eat asterisk in position 5 (in 1 time unit) and then move from the position 5 to the right and eat asterisk in the position 7 (in 2 time units). So in 3 time units Packmen will eat all asterisks on the game field.\n\nIn the second example Packman in the position 4 will move to the left and after 2 time units will eat asterisks in positions 3 and 2. Packmen in positions 5 and 8 will move to the right and in 2 time units will eat asterisks in positions 7 and 10, respectively. So 2 time units is enough for Packmen to eat all asterisks on the game field.",
    "solution": "[\"from sys import stdin, stdout\\n\\nn = int(stdin.readline())\\ns = stdin.readline().strip()\\n\\nmins = []\\npacks = []\\n\\nfor i in range(len(s)):\\n    if s[i] == '*':\\n        mins.append(i)\\n    elif s[i] == 'P':\\n        packs.append(i)\\n\\nl, r = -1, 2 * len(s) + 1\\nwhile r - l > 1:\\n    m = (l + r) >> 1\\n    \\n    test1 = mins[:]\\n    test2 = packs[:]\\n    \\n    \\n    while test2 and test1:\\n        cnt = m\\n        pos = test2.pop()\\n        \\n        if pos > test1[-1]:\\n            while test1 and abs(pos - test1[-1]) <= cnt:\\n                cnt -= abs(pos - test1[-1])\\n                pos = test1[-1]\\n                test1.pop()\\n        else:\\n            cntl, cntr = 0, 0\\n            \\n            if abs(test1[-1] - pos) > m:\\n                break\\n            \\n            lpos = (m + pos - test1[-1]) // 2\\n            rpos = m - 2 * abs(test1[-1] - pos)\\n            \\n            lb, rb = -1, len(test1)\\n            while rb - lb > 1:\\n                mb = (lb + rb) >> 1\\n                \\n                if pos - test1[mb] <= lpos:\\n                    rb = mb\\n                else:\\n                    lb = mb\\n            \\n            cntl = len(test1) - rb\\n            \\n            lb, rb = -1, len(test1)\\n            while rb - lb > 1:\\n                mb = (lb + rb) >> 1\\n                \\n                if pos - test1[mb] <= rpos:\\n                    rb = mb\\n                else:\\n                    lb = mb\\n            \\n            cntr = len(test1) - rb\\n            \\n            cnt = max(cntl, cntr)\\n            while test1 and cnt:\\n                test1.pop()\\n                cnt -= 1\\n    \\n    \\n    if not test1:\\n        r = m\\n    else:\\n        l = m\\n    \\nstdout.write(str(r))\", \"import bisect\\n\\nn = int(input())\\ns = input()\\npackmans = []\\nstars = []\\nfor i in range(n):\\n    if s[i] == '*':\\n        stars.append(i)\\n    elif s[i] == 'P':\\n        packmans.append(i)\\n\\nif len(stars) == 0:\\n    print(0)\\n    return\\n\\n\\ndef check(t):\\n    first_to_eat = 0\\n    for i in range(len(packmans)):\\n        x = stars[first_to_eat]\\n        if packmans[i] > x:\\n            if packmans[i] - x > t:\\n                return False\\n            d1 = t - 2 * (packmans[i] - x)\\n            d2 = (t - (packmans[i] - x)) // 2\\n            first_to_eat = bisect.bisect_right(stars, packmans[i] + max(d1, d2))\\n            if first_to_eat < len(stars) and stars[first_to_eat] == packmans[i] + max(d1, d2):\\n                first_to_eat += 1\\n\\n        else:\\n            j = bisect.bisect_right(stars, packmans[i] + t)\\n            if first_to_eat < len(stars) and stars[first_to_eat] == packmans[i] + t:\\n                first_to_eat += 1\\n            first_to_eat = max(j, first_to_eat)\\n        if first_to_eat >= len(stars):\\n            return True\\n    return first_to_eat >= len(stars)\\n\\n\\nl = 0\\nr = 2 * n + 1\\n\\nwhile r - l > 1:\\n    m = (l + r) // 2\\n    if check(m):\\n        r = m\\n    else:\\n        l = m\\nprint(r)\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"7\\n*..P*P*\\n\",\n    \"10\\n.**PP.*P.*\\n\",\n    \"19\\n**P.*..*..P..*.*P**\\n\",\n    \"12\\nP**.*P*P*P**\\n\",\n    \"17\\n.*P*P**P**.**P...\\n\",\n    \"58\\n..P.P*.P*.P...PPP...P*....*..*.**......*P.*P.....**P...*P*\\n\",\n    \"10\\n..P*.P.*.*\\n\",\n    \"10\\n***.*.*..P\\n\",\n    \"15\\nP***..PPP..P*.P\\n\",\n    \"15\\n*.*....*P......\\n\",\n    \"20\\n.P**P**P**PP.PP**PP*\\n\",\n    \"20\\n.....*.**..........P\\n\",\n    \"25\\nP*P*P.**.PPPP.*.P.*..P...\\n\",\n    \"25\\n...*..**..*.....*..*...P.\\n\",\n    \"30\\n*P.*...*.**..P**...***.*...**.\\n\",\n    \"30\\n.*...*.......................P\\n\",\n    \"35\\n..PP.P....*PP.*.PPPP.*P.P.PPPP.*.P.\\n\",\n    \"35\\n....*..*.*.*.....*.*..P*...*...*...\\n\",\n    \"40\\n...**P*P*...P.*PP***.*..P..**.**PP**.*.*\\n\",\n    \"40\\nP*....*.*....*...*..*.......*...**..***.\\n\",\n    \"45\\nP.P*..P....*P.*PP*PP*.**P...PP*PP*.P.P..PP.PP\\n\",\n    \"45\\n*.*.*..*.*.**.*..**..*.....**.**P....*****.**\\n\",\n    \"50\\n*PP....PPPP*....*P*P..PPPPPP...***P*P.........PP..\\n\",\n    \"50\\n*..***.*.****.*....P*.**...***.......**....*.***..\\n\",\n    \"55\\n......P.*.....P*.*P....*..P*.P.P....**....*..........*.\\n\",\n    \"55\\n*.....*.*..**..*...***..**.**.*.*.P..*.*.**...**.*..*.*\\n\",\n    \"60\\n.P...P.PPP.P....P...PP.*......**...P.*.P.P*P.*...P*P..P.P..P\\n\",\n    \"60\\n..*....*...***....P...........*............*....**....*...**\\n\",\n    \"65\\n......PP..PP**.***.*.P.P..PP.....**PP*PP.....P..P*PP.*.*P..P*P*..\\n\",\n    \"65\\n.....*..*....*.*......P....*.....**....*.........*...............\\n\",\n    \"70\\n*P.*..**P*P.....*PP.......*..PP...P...P.**..P.*......*P*.**.P..*P.....\\n\",\n    \"70\\n*..***.**..**....***........*.**...*...**.**..*.......**P*..*.......**\\n\",\n    \"75\\n..***P*.**.P.**P.**.***.P*..**P.P*.P*.**.....*PP..P***....**PPP..**P..P..P*\\n\",\n    \"75\\n...*.*...**.*..*..*P.*......*...*....**..*..**..*..*......*....*..*.*......\\n\",\n    \"80\\n**.P...*....*P...*....P............**....*..*.*....*..........*.*.*.............\\n\",\n    \"80\\n*..**..*...*....*.*.**.*.*..*..P..*..**.**..*..**.*.*.*.*.***...*.*..**.*....**.\\n\",\n    \"85\\n.*.....*.....**..........*P*..........*.........*...*..*...****..*..*P*..*..P.***...*\\n\",\n    \"85\\n*...*.*.....*..*.*.*.*.**....*...*...*.*..*..*.*......**...*.*.P..*.....*.*....*.*...\\n\",\n    \"90\\n......P.*.PPP...*.P.**P..*.*.*..*P**PP**..***.PPP....P..**P*.*.*..*.P*P.*PP*.....P.*.**P**\\n\",\n    \"90\\n.**.*..*........****...*.*..*.*.*...........***..*.*.*.P**...**..*..**..***.....*..*.**...\\n\",\n    \"95\\n.*..P****....****.*.***P..*.*.**P..*.***.PP.**.**....*****P**..*..*..***...*P..P****.*.P...*..*\\n\",\n    \"95\\n.*.***...*...P**...*.**.*..*.*..*...****..*.*.*..*.****.*....*...*..*..**.**.********..*.*...**\\n\",\n    \"100\\n.....PP..*...P.P.PPPP.....P*...P..P.*....*P.*..*..*...........P..PP..P.....*P.....P......*.*..PP....\\n\",\n    \"100\\n........*P**...*.*.*.*..*.*.**...*.*.....*..............*..**.............*..........*.*..*..*.**...\\n\",\n    \"100\\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP*PPPPPPPPPPPPP\\n\",\n    \"100\\n************************************************************P***************************************\\n\",\n    \"100\\n..........*...............................P..........P.......P.......P..*............P.......**.....\\n\",\n    \"100\\n.....................P............P....P....*.............*.......**.P.................P........*...\\n\",\n    \"100\\n......*....*...P*P*.....**.......P.P..........*........*....PP.................P......*.P.P.......*.\\n\",\n    \"100\\n........................................P..........*...................P.........*.....P.......P....\\n\",\n    \"100\\n**.**.**.........P*..P**.*.******.***.....***..*.*P.*.***.*.*..*.***..*********.*...***..*..*...P*..\\n\",\n    \"100\\n.PPP....PPPP.*...P...PPP..*P...P.*P.PP..P.P...PPPPP..PP.P..P..P..P...P.......P..PP..P..PPPPPP.P.PPPP\\n\",\n    \"100\\n...............................................*P.........*..P.........P.P....P..P.................*\\n\",\n    \"100\\n...........*.........*.....P...P...............P........P..........P.....*......*.....*P...*.P......\\n\",\n    \"2\\n*P\\n\",\n    \"2\\nP*\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"2\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"4\\n\",\n    \"9\\n\",\n    \"3\\n\",\n    \"8\\n\",\n    \"2\\n\",\n    \"14\\n\",\n    \"2\\n\",\n    \"20\\n\",\n    \"15\\n\",\n    \"28\\n\",\n    \"2\\n\",\n    \"36\\n\",\n    \"6\\n\",\n    \"38\\n\",\n    \"2\\n\",\n    \"56\\n\",\n    \"3\\n\",\n    \"66\\n\",\n    \"22\\n\",\n    \"74\\n\",\n    \"5\\n\",\n    \"73\\n\",\n    \"5\\n\",\n    \"61\\n\",\n    \"4\\n\",\n    \"82\\n\",\n    \"6\\n\",\n    \"81\\n\",\n    \"44\\n\",\n    \"109\\n\",\n    \"31\\n\",\n    \"99\\n\",\n    \"5\\n\",\n    \"116\\n\",\n    \"12\\n\",\n    \"105\\n\",\n    \"8\\n\",\n    \"89\\n\",\n    \"1\\n\",\n    \"138\\n\",\n    \"32\\n\",\n    \"11\\n\",\n    \"11\\n\",\n    \"11\\n\",\n    \"26\\n\",\n    \"2\\n\",\n    \"18\\n\",\n    \"16\\n\",\n    \"1\\n\",\n    \"1\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}