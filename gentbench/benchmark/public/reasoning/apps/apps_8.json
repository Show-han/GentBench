{
    "problem": "You are an expert Python programmer, and here is your task: Soon there will be held the world's largest programming contest, but the testing system still has m bugs. The contest organizer, a well-known university, has no choice but to attract university students to fix all the bugs. The university has n students able to perform such work. The students realize that they are the only hope of the organizers, so they don't want to work for free: the i-th student wants to get c_{i} 'passes' in his subjects (regardless of the volume of his work).\n\nBugs, like students, are not the same: every bug is characterized by complexity a_{j}, and every student has the level of his abilities b_{i}. Student i can fix a bug j only if the level of his abilities is not less than the complexity of the bug: b_{i} \u2265 a_{j}, and he does it in one day. Otherwise, the bug will have to be fixed by another student. Of course, no student can work on a few bugs in one day. All bugs are not dependent on each other, so they can be corrected in any order, and different students can work simultaneously.\n\nThe university wants to fix all the bugs as quickly as possible, but giving the students the total of not more than s passes. Determine which students to use for that and come up with the schedule of work saying which student should fix which bug.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers: n, m and s (1 \u2264 n, m \u2264 10^5, 0 \u2264 s \u2264 10^9)\u00a0\u2014 the number of students, the number of bugs in the system and the maximum number of passes the university is ready to give the students.\n\nThe next line contains m space-separated integers a_1, a_2,\u00a0..., a_{m} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the bugs' complexities.\n\nThe next line contains n space-separated integers b_1, b_2,\u00a0..., b_{n} (1 \u2264 b_{i} \u2264 10^9)\u00a0\u2014 the levels of the students' abilities.\n\nThe next line contains n space-separated integers c_1, c_2,\u00a0..., c_{n} (0 \u2264 c_{i} \u2264 10^9)\u00a0\u2014 the numbers of the passes the students want to get for their help.\n\n\n-----Output-----\n\nIf the university can't correct all bugs print \"NO\".\n\nOtherwise, on the first line print \"YES\", and on the next line print m space-separated integers: the i-th of these numbers should equal the number of the student who corrects the i-th bug in the optimal answer. The bugs should be corrected as quickly as possible (you must spend the minimum number of days), and the total given passes mustn't exceed s. If there are multiple optimal answers, you can output any of them.\n\n\n-----Examples-----\nInput\n3 4 9\n1 3 1 2\n2 1 3\n4 3 6\n\nOutput\nYES\n2 3 2 3\n\nInput\n3 4 10\n2 3 1 2\n2 1 3\n4 3 6\n\nOutput\nYES\n1 3 1 3\n\nInput\n3 4 9\n2 3 1 2\n2 1 3\n4 3 6\n\nOutput\nYES\n3 3 2 3\n\nInput\n3 4 5\n1 3 1 2\n2 1 3\n5 3 6\n\nOutput\nNO\n\n\n\n-----Note-----\n\nConsider the first sample.\n\nThe third student (with level 3) must fix the 2nd and 4th bugs (complexities 3 and 2 correspondingly) and the second student (with level 1) must fix the 1st and 3rd bugs (their complexity also equals 1). Fixing each bug takes one day for each student, so it takes 2 days to fix all bugs (the students can work in parallel).\n\nThe second student wants 3 passes for his assistance, the third student wants 6 passes. It meets the university's capabilities as it is ready to give at most 9 passes.",
    "solution": "[\"from sys import stdin\\nimport heapq\\n\\nn,m,s = [int(x) for x in stdin.readline().split()]\\n\\nbugs = [int(x) for x in stdin.readline().split()]\\nbugs = sorted([(bugs[x],x) for x in range(m)])\\n\\norder = [x[1] for x in bugs]\\nbugs = [x[0] for x in bugs]\\n\\nstudents = [int(x) for x in stdin.readline().split()]\\nrate = [int(x) for x in stdin.readline().split()]\\n\\nvalid = False\\nfor x in range(n):\\n  if students[x] >= bugs[-1] and rate[x] <= s:\\n    valid = True\\nif not valid:\\n  print('NO')\\nelse:\\n  print('YES')\\n  #print(students)\\n  for i,x in enumerate(students):\\n    low = 0\\n    high = m-1\\n    while high >= low:\\n      mid = (high+low)//2\\n      if bugs[mid] > x:\\n        high = mid-1\\n      else:\\n        low = mid+1\\n    #print(x,high)\\n    students[i] = high\\n  \\n  students = sorted([(students[x]+1,rate[x], x+1) for x in range(n)],reverse=True)\\n  #print(students)\\n  l1 = 1\\n  high = m\\n\\n  lastValid = []\\n  lastD = 100000\\n  \\n  while l1 <= high:\\n    mid = (l1+high)//2\\n    shift = (mid-(m%mid))%mid\\n    segs = m//mid\\n    if shift > 0:\\n      segs += 1\\n    ind = 0\\n    q = []\\n\\n    total = 0\\n\\n    group = []\\n\\n    for x in range(segs,0,-1):\\n      while ind<n:\\n        if (students[ind][0]+shift)//mid >= x:\\n          heapq.heappush(q,(students[ind][1],students[ind][2]))\\n          ind += 1\\n        else:\\n          break\\n      if q:\\n        r,i = heapq.heappop(q)\\n        group.append((x,i))\\n        total += r\\n      else:\\n        break\\n    if len(group) == segs and total <= s:\\n      #print(mid,total)\\n      high = mid-1\\n      lastValid = group\\n      lastD = mid\\n    else:\\n      l1 = mid+1\\n  complete = [0 for x in range(m)]\\n  lastValid.sort()\\n  mid = lastD\\n  shift = (mid-(m%mid))%mid\\n  skill = 1\\n  for bruh,i in lastValid:\\n    end = skill*mid-shift\\n    start = max(0,end-mid)\\n    for x in range(start,end):\\n      complete[x] = i\\n    skill += 1\\n  c2 = [0 for x in range(m)]\\n  for i,x in enumerate(complete):\\n    c2[order[i]] = x\\n  print(' '.join([str(x) for x in c2]))\\n  \\n  \\n  \\n        \\n    \\n    \\n\"]",
    "test": "{\n  \"inputs\": [\n    \"3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6\\n\",\n    \"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\\n\",\n    \"3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6\\n\",\n    \"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\\n\",\n    \"3 4 9\\n1 3 1 1\\n2 1 3\\n4 3 6\\n\",\n    \"5 6 10\\n2 4 6 5 4 3\\n4 2 5 3 6\\n3 2 5 3 7\\n\",\n    \"2 2 10\\n1 2\\n1 2\\n5 5\\n\",\n    \"2 2 10\\n1 2\\n1 2\\n6 5\\n\",\n    \"5 6 13\\n2 4 6 5 4 3\\n4 2 5 3 6\\n3 2 5 3 7\\n\",\n    \"5 6 12\\n2 4 6 5 4 3\\n4 2 5 3 6\\n3 2 5 3 7\\n\",\n    \"5 6 9\\n2 4 6 5 4 3\\n4 2 5 3 6\\n3 2 5 3 7\\n\",\n    \"5 6 100\\n2 4 7 5 4 3\\n4 2 5 3 6\\n3 2 5 3 7\\n\",\n    \"5 6 9\\n3 4 7 5 4 3\\n4 2 5 3 7\\n3 2 5 3 7\\n\",\n    \"1 1 10\\n1\\n1\\n10\\n\",\n    \"1 1 10\\n2\\n1\\n10\\n\",\n    \"1 1 9\\n1\\n1\\n10\\n\",\n    \"2 2 0\\n1 2\\n1 2\\n0 0\\n\",\n    \"2 2 10\\n1 2\\n1 2\\n7 4\\n\",\n    \"3 2 5\\n1 2\\n1 2 3\\n7 4 0\\n\",\n    \"3 2 6\\n3 2\\n1 2 3\\n7 5 0\\n\",\n    \"3 2 6\\n3 1\\n1 2 3\\n6 7 0\\n\",\n    \"4 2 11\\n1 4\\n1 2 3 4\\n6 8 7 5\\n\",\n    \"6 3 15\\n1 2 6\\n1 2 3 4 5 6\\n2 5 3 4 5 10\\n\",\n    \"4 4 9\\n1 1 3 3\\n1 2 3 4\\n3 5 5 3\\n\",\n    \"8 4 3\\n1 1 3 8\\n1 2 3 1 2 3 1 8\\n2 4 3 2 1 3 4 2\\n\",\n    \"4 6 10\\n1 2 3 4 5 6\\n2 4 5 6\\n2 4 3 4\\n\",\n    \"6 12 10\\n2 3 3 2 6 6 3 1 5 5 4 6\\n1 6 2 2 5 1\\n7 7 3 3 2 3\\n\",\n    \"5 10 10\\n2 1 4 5 3 3 1 2 3 2\\n5 1 2 4 6\\n10 4 1 1 1\\n\",\n    \"5 15 10\\n2 5 3 2 4 4 4 3 2 3 1 6 3 1 5\\n4 4 4 2 1\\n11 13 13 12 15\\n\",\n    \"10 15 10\\n3 4 2 4 5 3 3 1 2 3 6 1 2 5 4\\n6 1 2 1 6 1 4 2 6 6\\n0 3 7 3 2 9 3 2 11 15\\n\",\n    \"5 10 10\\n2 5 3 6 6 2 5 6 5 2\\n4 2 5 6 4\\n9 3 13 13 4\\n\",\n    \"5 15 10\\n2 4 5 5 3 1 6 1 6 6 2 6 3 4 5\\n5 1 1 5 5\\n6 8 1 7 6\\n\",\n    \"20 50 70\\n5 4 4 3 2 5 4 10 5 2 8 3 10 9 8 9 3 8 9 6 4 8 10 10 8 5 5 8 7 10 9 7 5 3 10 3 1 2 2 1 8 9 9 5 3 7 1 8 7 5\\n3 7 1 9 3 6 11 3 6 3 10 4 10 1 4 8 3 6 1 5\\n10 6 4 6 2 9 10 4 5 5 0 6 8 6 4 5 4 7 5 8\\n\",\n    \"20 30 50\\n1 8 6 9 2 5 9 7 4 7 1 5 2 9 10 1 6 4 6 1 3 2 6 10 5 4 1 1 2 9\\n5 6 5 1 1 2 9 9 8 6 4 6 10 5 11 5 1 4 10 6\\n8 5 14 4 5 4 10 14 11 14 10 15 0 15 15 2 0 2 11 3\\n\",\n    \"40 50 70\\n4 3 5 4 6 2 4 8 7 9 9 7 10 2 3 1 10 4 7 5 4 1 1 6 2 10 8 8 1 5 8 8 7 3 5 10 5 1 9 9 8 8 4 9 3 1 2 4 5 8\\n11 3 8 11 1 7 5 6 3 4 8 1 6 8 9 4 7 9 6 7 4 10 10 1 7 5 7 5 3 9 2 5 2 3 4 4 7 4 5 7\\n5 6 20 16 1 14 19 17 11 14 5 17 2 18 16 7 0 4 10 4 10 14 4 10 7 2 10 2 4 15 16 3 1 17 6 9 11 15 19 8\\n\",\n    \"20 50 70\\n10 4 9 6 3 4 10 4 3 7 4 8 6 10 3 8 1 8 5 10 9 2 5 4 8 5 5 7 9 5 8 3 2 10 5 7 6 5 1 3 7 6 2 4 3 1 5 7 3 3\\n5 11 7 5 3 11 7 5 7 10 6 9 6 11 10 11 7 7 10 5\\n9 23 5 8 8 18 20 5 9 24 9 8 10 9 9 6 4 2 8 25\\n\",\n    \"20 30 50\\n4 3 3 2 9 4 5 5 2 2 10 3 1 3 3 8 8 2 1 4 3 5 2 4 8 8 8 4 2 9\\n7 10 8 7 6 2 11 5 7 7 10 6 6 10 9 4 11 10 11 7\\n0 27 16 13 25 5 23 4 22 18 11 3 2 19 8 25 22 9 23 26\\n\",\n    \"40 50 70\\n4 5 8 7 3 9 9 2 10 5 7 4 8 1 6 2 6 5 4 7 8 9 6 8 10 8 5 9 4 9 3 4 9 10 1 1 6 3 3 3 7 3 8 8 3 5 1 10 7 6\\n2 5 3 4 1 1 4 6 8 9 11 4 3 10 5 6 10 7 4 11 9 1 3 7 8 9 9 2 1 11 9 9 10 10 3 6 11 7 1 8\\n26 7 12 28 6 29 30 29 27 30 17 32 9 9 14 30 27 0 17 13 18 25 28 8 32 18 26 34 33 14 0 35 4 28 31 33 31 18 35 23\\n\",\n    \"1 2 100\\n5 6\\n10\\n10\\n\",\n    \"3 3 1000000000\\n1 1 1\\n1 1 1\\n1000000000 1000000000 1000000000\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n2 3 2 3\\n\",\n    \"YES\\n1 3 1 3\\n\",\n    \"YES\\n3 3 2 3\\n\",\n    \"NO\\n\",\n    \"YES\\n2 3 2 3\\n\",\n    \"YES\\n1 1 5 5 5 1\\n\",\n    \"YES\\n1 2\\n\",\n    \"YES\\n2 2\\n\",\n    \"YES\\n4 1 5 5 1 4\\n\",\n    \"YES\\n1 1 5 5 5 1\\n\",\n    \"YES\\n2 5 5 5 5 5\\n\",\n    \"NO\\n\",\n    \"YES\\n5 5 5 5 5 5\\n\",\n    \"YES\\n1\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1 2\\n\",\n    \"YES\\n2 2\\n\",\n    \"YES\\n2 3\\n\",\n    \"YES\\n3 2\\n\",\n    \"YES\\n3 1\\n\",\n    \"YES\\n1 4\\n\",\n    \"YES\\n1 3 6\\n\",\n    \"YES\\n1 1 4 4\\n\",\n    \"YES\\n5 5 8 8\\n\",\n    \"YES\\n1 1 3 3 4 4\\n\",\n    \"YES\\n5 5 5 5 2 2 5 5 2 2 2 2\\n\",\n    \"YES\\n3 2 5 5 4 4 3 3 5 4\\n\",\n    \"NO\\n\",\n    \"YES\\n7 5 8 5 1 7 5 8 7 5 1 8 7 1 1\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n20 15 20 5 8 18 20 13 18 8 7 5 13 4 7 4 5 7 4 9 20 7 11 11 16 18 18 16 2 11 4 2 9 15 11 15 3 8 5 3 16 13 13 9 15 2 8 16 2 9\\n\",\n    \"YES\\n4 9 2 7 6 16 7 9 18 9 4 2 6 7 13 4 20 16 20 17 18 6 20 13 2 16 17 17 18 13\\n\",\n    \"YES\\n28 32 26 28 17 33 28 22 17 1 18 22 23 33 32 20 23 28 22 13 26 20 5 17 33 23 11 11 5 13 11 11 22 32 13 23 13 5 18 18 1 1 26 18 32 5 33 26 17 1\\n\",\n    \"YES\\n16 4 12 17 5 8 16 8 5 18 8 19 17 16 5 19 1 19 3 16 12 1 3 8 12 3 3 18 12 3 12 5 1 16 17 18 18 17 1 4 19 18 5 8 4 1 17 19 4 4\\n\",\n    \"YES\\n13 8 8 6 18 13 1 1 6 6 18 12 11 12 12 15 15 6 11 13 12 1 8 13 15 15 18 1 8 18\\n\",\n    \"YES\\n20 2 14 18 13 31 31 13 33 2 18 2 14 5 24 13 24 24 2 18 14 31 24 14 33 14 24 31 2 33 13 2 33 33 5 13 18 20 20 20 18 20 31 31 20 24 13 33 14 18\\n\",\n    \"YES\\n1 1\\n\",\n    \"YES\\n1 1 1\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}