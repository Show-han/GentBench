{
    "problem": "You are an expert Python programmer, and here is your task: You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is x^{k}. \n\nOutput the sum of costs over all non-empty subsets of people.\n\n\n-----Input-----\n\nOnly line of input contains two integers N (1 \u2264 N \u2264 10^9) representing total number of people and k (1 \u2264 k \u2264 5000).\n\n\n-----Output-----\n\nOutput the sum of costs for all non empty subsets modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n1 1\n\nOutput\n1\n\nInput\n3 2\n\nOutput\n24\n\n\n\n-----Note-----\n\nIn the first example, there is only one non-empty subset {1} with cost 1^1 = 1.\n\nIn the second example, there are seven non-empty subsets.\n\n- {1} with cost 1^2 = 1\n\n- {2} with cost 1^2 = 1\n\n- {1, 2} with cost 2^2 = 4\n\n- {3} with cost 1^2 = 1\n\n- {1, 3} with cost 2^2 = 4\n\n- {2, 3} with cost 2^2 = 4\n\n- {1, 2, 3} with cost 3^2 = 9\n\nThe total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.",
    "solution": "[\"n, k = list(map(int, input().split()))\\nm = 0x3b9aca07\\nv = 500000004\\nr = 0\\np = pow(2, n, m)\\na = [1] + [0] * k\\nfor i in range(k):\\n    for j in range(i, -1, -1):\\n        a[j + 1] += a[j]\\n        a[j] = a[j] * j % m\\nfor i in range(k + 1):\\n    r = (r + p * a[i]) % m\\n    p = p * v * (n - i) % m\\nprint(r)\\n\", \"n, k = map(int, input().split())\\nm = int(1e9 + 7)\\nr = 0\\np = pow(2, n, m)\\na = [1] + [0] * k\\nfor i in range(k):\\n    for j in range(i, -1, -1):\\n        a[j + 1] += a[j]\\n        a[j] = a[j] * j % m\\nfor i in range(k + 1):\\n    r = (r + p * a[i]) % m\\n    p = p * 500000004 * (n - i) % m\\nprint(r)\", \"n, k = map(int, input().split())\\nm = 0x3b9aca07\\nr = 0\\np = pow(2, n, m)\\na = [1] + [0] * k\\nfor i in range(k):\\n    for j in range(i, -1, -1):\\n        a[j + 1] += a[j]\\n        a[j] = a[j] * j % m\\nfor i in range(k + 1):\\n    r = (r + p * a[i]) % m\\n    p = p * 500000004 * (n - i) % m\\nprint(r)\", \"n, k = map(int, input().split())\\nm = 0x3b9aca07\\nr = 0\\np = pow(2, n, m)\\na = [1] + [0] * k\\nfor i in range(k):\\n    for j in range(i, -1, -1):\\n        a[j + 1] += a[j]\\n        a[j] = a[j] * j % m\\nfor i in range(k + 1):\\n    r += p * a[i]\\n    p = p * 500000004 * (n - i) % m\\nprint(r % m)\", \"n, k = map(int, input().split())\\nm = int(1e9+7)\\nr = 0\\np = pow(2, n, m)\\na = [1] + [0] * k\\nfor i in range(k):\\n    for j in range(i, -1, -1):\\n        a[j+1] += a[j]\\n        a[j] = a[j]*j % m\\nfor i in range(k + 1):\\n    r += p*a[i]\\n    p = p*500000004*(n - i) % m\\nprint(r % m)\"]",
    "test": "{\n  \"inputs\": [\n    \"1 1\\n\",\n    \"3 2\\n\",\n    \"5 3\\n\",\n    \"12 4\\n\",\n    \"20 5\\n\",\n    \"522 4575\\n\",\n    \"1426 4445\\n\",\n    \"81 3772\\n\",\n    \"629 3447\\n\",\n    \"2202 3497\\n\",\n    \"2775 4325\\n\",\n    \"3982 4784\\n\",\n    \"2156 3417\\n\",\n    \"902 1932\\n\",\n    \"728 3537\\n\",\n    \"739 3857\\n\",\n    \"1918 4211\\n\",\n    \"3506 4679\\n\",\n    \"1000000000 5000\\n\",\n    \"2500 5000\\n\",\n    \"158260522 4575\\n\",\n    \"602436426 4445\\n\",\n    \"861648772 81\\n\",\n    \"433933447 629\\n\",\n    \"262703497 2202\\n\",\n    \"971407775 4325\\n\",\n    \"731963982 4784\\n\",\n    \"450968417 2156\\n\",\n    \"982631932 902\\n\",\n    \"880895728 3537\\n\",\n    \"4483 4938\\n\",\n    \"4278 3849\\n\",\n    \"3281 4798\\n\",\n    \"12195 4781\\n\",\n    \"5092 4809\\n\",\n    \"2511 4990\\n\",\n    \"9896 4771\\n\",\n    \"493 4847\\n\",\n    \"137 4733\\n\",\n    \"6399 4957\\n\",\n    \"999999376 642\\n\",\n    \"999997777 645\\n\",\n    \"999998604 448\\n\",\n    \"999974772 208\\n\",\n    \"999980457 228\\n\",\n    \"999999335 1040\\n\",\n    \"999976125 157\\n\",\n    \"999974335 786\\n\",\n    \"999985549 266\\n\",\n    \"999999648 34\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"24\\n\",\n    \"800\\n\",\n    \"8067072\\n\",\n    \"87486873\\n\",\n    \"558982611\\n\",\n    \"503519668\\n\",\n    \"420178413\\n\",\n    \"989788663\\n\",\n    \"682330518\\n\",\n    \"434053861\\n\",\n    \"987043323\\n\",\n    \"216656956\\n\",\n    \"78732216\\n\",\n    \"957098547\\n\",\n    \"836213774\\n\",\n    \"972992457\\n\",\n    \"130374558\\n\",\n    \"642932262\\n\",\n    \"416584034\\n\",\n    \"875142289\\n\",\n    \"582490088\\n\",\n    \"939143440\\n\",\n    \"396606775\\n\",\n    \"813734619\\n\",\n    \"905271522\\n\",\n    \"7722713\\n\",\n    \"634922960\\n\",\n    \"262226561\\n\",\n    \"266659411\\n\",\n    \"371059472\\n\",\n    \"183616686\\n\",\n    \"467929252\\n\",\n    \"628055652\\n\",\n    \"587575377\\n\",\n    \"622898200\\n\",\n    \"388524304\\n\",\n    \"414977957\\n\",\n    \"279404197\\n\",\n    \"639782892\\n\",\n    \"842765934\\n\",\n    \"31545099\\n\",\n    \"642283867\\n\",\n    \"268825720\\n\",\n    \"848255312\\n\",\n    \"585378634\\n\",\n    \"300682474\\n\",\n    \"754709460\\n\",\n    \"607440620\\n\",\n    \"378413808\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}