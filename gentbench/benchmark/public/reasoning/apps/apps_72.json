{
    "problem": "You are an expert Python programmer, and here is your task: Let's call an array consisting of n integer numbers a_1, a_2, ..., a_{n}, beautiful if it has the following property:\n\n  consider all pairs of numbers x, y (x \u2260 y), such that number x occurs in the array a and number y occurs in the array a;  for each pair x, y must exist some position j (1 \u2264 j < n), such that at least one of the two conditions are met, either a_{j} = x, a_{j} + 1 = y, or a_{j} = y, a_{j} + 1 = x. \n\nSereja wants to build a beautiful array a, consisting of n integers. But not everything is so easy, Sereja's friend Dima has m coupons, each contains two integers q_{i}, w_{i}. Coupon i costs w_{i} and allows you to use as many numbers q_{i} as you want when constructing the array a. Values q_{i} are distinct. Sereja has no coupons, so Dima and Sereja have made the following deal. Dima builds some beautiful array a of n elements. After that he takes w_{i} rubles from Sereja for each q_{i}, which occurs in the array a. Sereja believed his friend and agreed to the contract, and now he is wondering, what is the maximum amount of money he can pay.\n\nHelp Sereja, find the maximum amount of money he can pay to Dima.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 2\u00b710^6, 1 \u2264 m \u2264 10^5). Next m lines contain pairs of integers. The i-th line contains numbers q_{i}, w_{i} (1 \u2264 q_{i}, w_{i} \u2264 10^5).\n\nIt is guaranteed that all q_{i} are distinct.\n\n\n-----Output-----\n\nIn a single line print maximum amount of money (in rubles) Sereja can pay.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n5 2\n1 2\n2 3\n\nOutput\n5\n\nInput\n100 3\n1 2\n2 1\n3 1\n\nOutput\n4\n\nInput\n1 2\n1 1\n2 100\n\nOutput\n100\n\n\n\n-----Note-----\n\nIn the first sample Sereja can pay 5 rubles, for example, if Dima constructs the following array: [1, 2, 1, 2, 2]. There are another optimal arrays for this test.\n\nIn the third sample Sereja can pay 100 rubles, if Dima constructs the following array: [2].",
    "solution": "[\"import itertools\\n\\ndef f(n):\\n    return n * (n - 1) / 2 + 1 if n % 2 else n * (n - 1) / 2 + n / 2\\n\\nn, m = list(map(int, input().split()))\\ntable = sorted([int(input().split()[1]) for _ in range(m)], reverse = True)\\nans = 1\\nwhile f(ans) <= n:\\n    ans += 1\\nans -= 1\\nprint(list(itertools.accumulate(table))[min(ans - 1, m - 1)])\\n\", \"n,m = list(map(int,input().split()))\\nq = [0] * (m)\\nw = [0] * (m)\\nfor i in range(m):\\n    q[i],w[i] = [int(x) for x in input().split()]\\n    #print(q[i],w[i])\\nw.sort(reverse = True)\\n#print(*w)\\ns = 0\\nv = 0\\n#print(\\\"n=\\\",n)\\nfor i in range(m):\\n    i=i+1\\n    if (i % 2 == 1): v = i*(i-1)//2 + 1\\n    else: v=i*i//2\\n    i=i-1\\n    #print(\\\"i=\\\",i,\\\" v=\\\",v,\\\"w[i]=\\\",w[i])\\n    if(v>n): break\\n    s+=w[i]\\nprint(s)\\n\", \"def Fun(n):\\n    if(n%2): return n*(n-1)//2+1\\n    return n*n//2\\n\\nn,m = list(map(int,input().split()))\\nq = [0] * (m)\\nw = [0] * (m)\\nfor i in range(m):\\n    q[i],w[i] = [int(x) for x in input().split()]\\n    #print(q[i],w[i])\\nw.sort(reverse = True)\\n#print(*w)\\ns = 0\\nv = 0\\n#print(\\\"n=\\\",n)\\nfor i in range(m):\\n    #print(\\\"i=\\\",i,\\\" v=\\\",v,\\\"w[i]=\\\",w[i])\\n    if(Fun(i+1)>n): break\\n    s+=w[i]\\nprint(s)\\n\", \"def Fun(n):\\n\\n    if(n%2): return n*(n-1)//2+1\\n\\n    return n*n//2\\n\\n\\n\\nn,m = list(map(int,input().split()))\\n\\nq = [0] * (m)\\n\\nw = [0] * (m)\\n\\nfor i in range(m):\\n\\n    q[i],w[i] = [int(x) for x in input().split()]\\n\\n    #print(q[i],w[i])\\n\\nw.sort(reverse = True)\\n\\n#print(*w)\\n\\ns = 0\\n\\nv = 0\\n\\n#print(\\\"n=\\\",n)\\n\\nfor i in range(m):\\n\\n    #print(\\\"i=\\\",i,\\\" v=\\\",v,\\\"w[i]=\\\",w[i])\\n\\n    if(Fun(i+1)>n): break\\n\\n    s+=w[i]\\n\\nprint(s)\\n\\n\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"import sys, bisect\\n(n, m), *s = [map(int, s.split()) for s in sys.stdin.readlines()]\\ng = [n * (n - 1) // 2 + (n - 1) % 2 * (n // 2 - 1) for n in range(1, 2002)]\\nprint(sum(sorted([w for _, w in s], reverse=True)[:min(m, bisect.bisect_left(g, n))]))\"]",
    "test": "{\n  \"inputs\": [\n    \"5 2\\n1 2\\n2 3\\n\",\n    \"100 3\\n1 2\\n2 1\\n3 1\\n\",\n    \"1 2\\n1 1\\n2 100\\n\",\n    \"25 29\\n82963 53706\\n63282 73962\\n14996 48828\\n84392 31903\\n96293 41422\\n31719 45448\\n46772 17870\\n9668 85036\\n36704 83323\\n73674 63142\\n80254 1548\\n40663 44038\\n96724 39530\\n8317 42191\\n44289 1041\\n63265 63447\\n75891 52371\\n15007 56394\\n55630 60085\\n46757 84967\\n45932 72945\\n72627 41538\\n32119 46930\\n16834 84640\\n78705 73978\\n23674 57022\\n66925 10271\\n54778 41098\\n7987 89162\\n\",\n    \"53 1\\n16942 81967\\n\",\n    \"58 38\\n6384 48910\\n97759 90589\\n28947 5031\\n45169 32592\\n85656 26360\\n88538 42484\\n44042 88351\\n42837 79021\\n96022 59200\\n485 96735\\n98000 3939\\n3789 64468\\n10894 58484\\n26422 26618\\n25515 95617\\n37452 5250\\n39557 66304\\n79009 40610\\n80703 60486\\n90344 37588\\n57504 61201\\n62619 79797\\n51282 68799\\n15158 27623\\n28293 40180\\n9658 62192\\n2889 3512\\n66635 24056\\n18647 88887\\n28434 28143\\n9417 23999\\n22652 77700\\n52477 68390\\n10713 2511\\n22870 66689\\n41790 76424\\n74586 34286\\n47427 67758\\n\",\n    \"90 27\\n30369 65426\\n63435 75442\\n14146 41719\\n12140 52280\\n88688 50550\\n3867 68194\\n43298 40287\\n84489 36456\\n6115 63317\\n77787 20314\\n91186 96913\\n57833 44314\\n20322 79647\\n24482 31197\\n11130 57536\\n11174 24045\\n14293 65254\\n94155 24746\\n81187 20475\\n6169 94788\\n77959 22203\\n26478 57315\\n97335 92373\\n99834 47488\\n11519 81774\\n41764 93193\\n23103 89214\\n\",\n    \"44 25\\n65973 66182\\n23433 87594\\n13032 44143\\n35287 55901\\n92361 46975\\n69171 50834\\n77761 76668\\n32551 93695\\n61625 10126\\n53695 82303\\n94467 18594\\n57485 4465\\n31153 18088\\n21927 24758\\n60316 62228\\n98759 53110\\n41087 83488\\n78475 25628\\n59929 64521\\n78963 60597\\n97262 72526\\n56261 72117\\n80327 82772\\n77548 17521\\n94925 37764\\n\",\n    \"59 29\\n93008 65201\\n62440 8761\\n26325 69109\\n30888 54851\\n42429 3385\\n66541 80705\\n52357 33351\\n50486 15217\\n41358 45358\\n7272 37362\\n85023 54113\\n62697 44042\\n60130 32566\\n96933 1856\\n12963 17735\\n44973 38370\\n26964 26484\\n63636 66849\\n12939 58143\\n34512 32176\\n5826 89871\\n63935 91784\\n17399 50702\\n88735 10535\\n93994 57706\\n94549 92301\\n32642 84856\\n55463 82878\\n679 82444\\n\",\n    \"73 19\\n21018 52113\\n53170 12041\\n44686 99498\\n73991 59354\\n66652 2045\\n56336 99193\\n85265 20504\\n51776 85293\\n21550 17562\\n70468 38130\\n7814 88602\\n84216 64214\\n69825 55393\\n90671 24028\\n98076 67499\\n46288 36605\\n17222 21707\\n25011 99490\\n92165 51620\\n\",\n    \"6 26\\n48304 25099\\n17585 38972\\n70914 21546\\n1547 97770\\n92520 48290\\n10866 3246\\n84319 49602\\n57133 31153\\n12571 45902\\n10424 75601\\n22016 80029\\n1348 18944\\n6410 21050\\n93589 44609\\n41222 85955\\n30147 87950\\n97431 40749\\n48537 74036\\n47186 25854\\n39225 55924\\n20258 16945\\n83319 57412\\n20356 54550\\n90585 97965\\n52076 32143\\n93949 24427\\n\",\n    \"27 13\\n30094 96037\\n81142 53995\\n98653 82839\\n25356 81132\\n77842 2012\\n88187 81651\\n5635 86354\\n25453 63263\\n61455 12635\\n10257 47125\\n48214 12029\\n21081 92859\\n24156 67265\\n\",\n    \"1 1\\n1 1\\n\",\n    \"47 10\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\n\",\n    \"2 5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n\",\n    \"3 3\\n1 1\\n2 1\\n3 1\\n\",\n    \"17 6\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n\",\n    \"7 4\\n1 2\\n2 3\\n3 4\\n4 5\\n\",\n    \"7 4\\n1 1\\n2 1\\n3 1\\n4 1\\n\",\n    \"7 5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n\",\n    \"17 9\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n\",\n    \"2 2\\n1 1\\n2 1\\n\",\n    \"8 7\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n\",\n    \"11 5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n\",\n    \"31 8\\n1 1\\n2 2\\n3 4\\n4 8\\n5 16\\n6 32\\n7 64\\n8 128\\n\",\n    \"10 6\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n\",\n    \"11 10\\n1 5\\n2 5\\n3 5\\n4 5\\n5 5\\n6 5\\n7 5\\n8 5\\n9 5\\n10 5\\n\",\n    \"8 10\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\n\"\n  ],\n  \"outputs\": [\n    \"5\\n\",\n    \"4\\n\",\n    \"100\\n\",\n    \"575068\\n\",\n    \"81967\\n\",\n    \"910310\\n\",\n    \"1023071\\n\",\n    \"717345\\n\",\n    \"864141\\n\",\n    \"860399\\n\",\n    \"283685\\n\",\n    \"588137\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"20\\n\",\n    \"12\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"254\\n\",\n    \"4\\n\",\n    \"25\\n\",\n    \"4\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}