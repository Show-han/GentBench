{
    "problem": "You are an expert Python programmer, and here is your task: You are given an integer $x$ of $n$ digits $a_1, a_2, \\ldots, a_n$, which make up its decimal notation in order from left to right.\n\nAlso, you are given a positive integer $k < n$.\n\nLet's call integer $b_1, b_2, \\ldots, b_m$ beautiful if $b_i = b_{i+k}$ for each $i$, such that $1 \\leq i \\leq m - k$.\n\nYou need to find the smallest beautiful integer $y$, such that $y \\geq x$. \n\n\n-----Input-----\n\nThe first line of input contains two integers $n, k$ ($2 \\leq n \\leq 200\\,000, 1 \\leq k < n$): the number of digits in $x$ and $k$.\n\nThe next line of input contains $n$ digits $a_1, a_2, \\ldots, a_n$ ($a_1 \\neq 0$, $0 \\leq a_i \\leq 9$): digits of $x$.\n\n\n-----Output-----\n\nIn the first line print one integer $m$: the number of digits in $y$.\n\nIn the next line print $m$ digits $b_1, b_2, \\ldots, b_m$ ($b_1 \\neq 0$, $0 \\leq b_i \\leq 9$): digits of $y$.\n\n\n-----Examples-----\nInput\n3 2\n353\n\nOutput\n3\n353\n\nInput\n4 2\n1234\n\nOutput\n4\n1313",
    "solution": "[\"import sys\\nreader = (s.rstrip() for s in sys.stdin)\\ninput = reader.__next__\\n\\nn,k = list(map(int, input().split()))\\na = list(map(int, input()))\\nb = a[:k]\\nc = [b[i%k] for i in range(n)]\\nif tuple(a)>tuple(c):\\n    d = int(\\\"\\\".join(map(str, b)))\\n    d += 1\\n    b = list(map(int, str(d)))\\n    c = [b[i%k] for i in range(n)]\\nprint(len(c))\\nprint(\\\"\\\".join(map(str, c)))\\n\\n\", \"import sys\\n\\nn, k = sys.stdin.readline().strip().split()\\nn = int(n)\\nk = int(k)\\nx = sys.stdin.readline().strip()\\nX = [0] * n\\nfor i in range (0, n):\\n    X[i] = int(x[i])\\nv = 0\\nw = 0\\nfor i in range (0, n):\\n    if v == 0 and (X[i] > X[i % k]):\\n        v = -1\\n    elif v == 0 and (X[i] < X[i % k]):\\n        v = 1\\nans = []\\nif v == -1:\\n    i = k - 1\\n    while X[i] == 9:\\n        i = i - 1\\n    while i < k:\\n        X[i] = (X[i] + 1) % 10\\n        i = i + 1\\nfor i in range (0, n):\\n    ans.append(str(X[i % k]))\\nprint(n)\\nprint(\\\"\\\".join(ans))\\n\", \"n, k = list(map(int, input().split()))\\ns = input()\\n\\nnum = s[:k]*(n//k) + s[:n%k]\\n\\nprint(n)\\nif s <= num:\\n    print(num)\\nelse:\\n    v = str(int(s[:k]) + 1)\\n    num  = v * (n//k)+ v[:n%k]\\n    print(num)\\n\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nn,k=list(map(int,input().split()))\\nA=input().strip()\\n\\n\\nA+=\\\"0\\\"*(k-n%k)\\n\\nx=A[:k]\\nflag=0\\n\\nfor i in range(0,len(A),k):\\n    #print(int(A[i:i+k]))\\n    if A[i:i+k]>x:\\n        flag=1\\n        break\\n    elif A[i:i+k]==x:\\n        continue\\n    else:\\n        break\\n\\nif flag==0:\\n    ANS=(x*(len(A)//k))[:n]\\nelse:\\n    ANS=(str(int(x)+1)*(len(A)//k))[:n]\\n\\nprint(len(ANS))\\nprint(ANS)\\nprint()\\n\", \"import sys\\ninput = sys.stdin.readline\\n \\nn, k = list(map(int, input().split()))\\na = list(input())\\n \\nfor i in range(n):\\n    a[i] = int(a[i])\\n \\nfor i in range(n):\\n    if a[i] < a[i % k]:\\n        b = [0] * n\\n        for i in range(n):\\n            b[i] = a[i % k]\\n        print(n)\\n        print(\\\"\\\".join(map(str, b)))\\n        return\\n    if a[i] > a[i % k]:\\n        break\\nelse:\\n    b = [0] * n\\n    for i in range(n):\\n        b[i] = a[i % k]\\n    print(n)\\n    print(\\\"\\\".join(map(str, b)))\\n    return\\n \\nfor i in range(k)[::-1]:\\n    if i == k-1 and a[i] != 9:\\n        a[i] += 1\\n        break\\n    if a[i] == 9:\\n        a[i] = 0\\n    else:\\n        a[i] += 1\\n        break\\nfor i in range(n):\\n    a[i] = a[i % k]\\nprint(n)\\nprint(\\\"\\\".join(map(str, a)))\\n\", \"n, k = map(int, input().split())\\na = input()\\nd = a[0:k]\\nc = int(d)\\nb=d*(n//k)\\nprint(n)\\nb+=d[0:n%k]\\nif(b>=a):\\n    print(b)\\nelse:\\n    c+=1\\n    d=str(c)\\n    b=d*(n//k)\\n    b+=d[0:n%k]\\n    print(b)\"]",
    "test": "{\n  \"inputs\": [\n    \"3 2\\n353\\n\",\n    \"4 2\\n1234\\n\",\n    \"5 4\\n99999\\n\",\n    \"5 4\\n41242\\n\",\n    \"5 2\\n16161\\n\",\n    \"2 1\\n33\\n\",\n    \"2 1\\n99\\n\",\n    \"2 1\\n31\\n\",\n    \"2 1\\n33\\n\",\n    \"5 1\\n99999\\n\",\n    \"5 1\\n26550\\n\",\n    \"5 1\\n22222\\n\",\n    \"5 2\\n99999\\n\",\n    \"5 2\\n16137\\n\",\n    \"5 3\\n99999\\n\",\n    \"5 3\\n91471\\n\",\n    \"5 3\\n91491\\n\",\n    \"5 4\\n41244\\n\",\n    \"3 2\\n192\\n\",\n    \"6 2\\n333423\\n\",\n    \"9 3\\n199299299\\n\",\n    \"4 2\\n1314\\n\",\n    \"4 2\\n8999\\n\",\n    \"4 2\\n1215\\n\",\n    \"6 3\\n129130\\n\",\n    \"4 2\\n1920\\n\",\n    \"8 4\\n11891198\\n\",\n    \"6 3\\n299398\\n\",\n    \"4 3\\n1992\\n\",\n    \"9 3\\n100199999\\n\",\n    \"5 3\\n18920\\n\",\n    \"8 4\\n11992222\\n\",\n    \"3 2\\n112\\n\",\n    \"4 1\\n1020\\n\",\n    \"6 2\\n111122\\n\",\n    \"4 2\\n1921\\n\",\n    \"4 2\\n1924\\n\",\n    \"3 1\\n123\\n\",\n    \"4 2\\n1999\\n\",\n    \"3 2\\n899\\n\",\n    \"10 4\\n1229339959\\n\",\n    \"4 2\\n1929\\n\",\n    \"5 2\\n15160\\n\",\n    \"3 1\\n112\\n\",\n    \"6 3\\n199244\\n\",\n    \"4 3\\n1999\\n\",\n    \"4 2\\n1011\\n\",\n    \"4 2\\n7988\\n\",\n    \"6 3\\n109222\\n\",\n    \"6 3\\n199911\\n\",\n    \"4 2\\n2829\\n\",\n    \"6 3\\n119120\\n\",\n    \"4 3\\n1293\\n\",\n    \"4 2\\n7778\\n\",\n    \"6 3\\n599766\\n\",\n    \"10 3\\n1992991991\\n\",\n    \"5 2\\n49792\\n\",\n    \"4 2\\n2939\\n\",\n    \"10 5\\n1999920000\\n\",\n    \"4 2\\n2933\\n\",\n    \"6 2\\n899999\\n\",\n    \"5 3\\n93918\\n\",\n    \"9 3\\n888887999\\n\",\n    \"4 2\\n2930\\n\",\n    \"6 3\\n199200\\n\",\n    \"5 3\\n23924\\n\",\n    \"6 3\\n589766\\n\",\n    \"6 3\\n345346\\n\",\n    \"3 2\\n798\\n\",\n    \"5 3\\n12945\\n\",\n    \"4 2\\n1923\\n\",\n    \"6 3\\n123130\\n\",\n    \"4 2\\n5675\\n\",\n    \"6 3\\n889999\\n\",\n    \"6 3\\n299300\\n\",\n    \"5 2\\n39494\\n\",\n    \"6 3\\n989999\\n\",\n    \"6 2\\n222225\\n\",\n    \"5 3\\n89999\\n\",\n    \"10 5\\n1999999999\\n\",\n    \"6 3\\n569579\\n\",\n    \"20 10\\n21474836472147483648\\n\",\n    \"12 2\\n121212121216\\n\",\n    \"6 2\\n417171\\n\",\n    \"6 2\\n129999\\n\",\n    \"5 3\\n12999\\n\",\n    \"4 1\\n1021\\n\",\n    \"5 1\\n78656\\n\",\n    \"6 3\\n789999\\n\",\n    \"9 3\\n129129222\\n\",\n    \"5 3\\n12933\\n\",\n    \"3 1\\n107\\n\",\n    \"4 1\\n2221\\n\",\n    \"6 3\\n199299\\n\",\n    \"5 3\\n12943\\n\",\n    \"6 2\\n191929\\n\",\n    \"6 3\\n849859\\n\",\n    \"6 5\\n179992\\n\",\n    \"10 3\\n9879879999\\n\",\n    \"4 3\\n8999\\n\",\n    \"9 3\\n100100200\\n\",\n    \"6 3\\n999000\\n\",\n    \"4 2\\n3999\\n\",\n    \"4 2\\n7999\\n\",\n    \"3 2\\n193\\n\",\n    \"5 2\\n55546\\n\",\n    \"6 2\\n222228\\n\",\n    \"5 3\\n33334\\n\",\n    \"7 3\\n3993994\\n\",\n    \"6 3\\n189888\\n\",\n    \"6 3\\n899999\\n\",\n    \"3 2\\n799\\n\",\n    \"6 2\\n123456\\n\",\n    \"8 2\\n20202019\\n\",\n    \"5 3\\n22923\\n\",\n    \"6 3\\n209210\\n\",\n    \"3 2\\n229\\n\",\n    \"6 3\\n288298\\n\",\n    \"6 3\\n178183\\n\",\n    \"6 3\\n129229\\n\",\n    \"7 4\\n8999999\\n\",\n    \"6 3\\n909999\\n\",\n    \"7 4\\n1299681\\n\",\n    \"5 3\\n12345\\n\",\n    \"6 3\\n123114\\n\",\n    \"5 3\\n39484\\n\",\n    \"6 3\\n356456\\n\",\n    \"6 3\\n789876\\n\",\n    \"9 5\\n912999999\\n\",\n    \"5 3\\n78989\\n\",\n    \"6 2\\n199999\\n\",\n    \"3 2\\n399\\n\",\n    \"6 2\\n199119\\n\",\n    \"4 2\\n6972\\n\",\n    \"4 3\\n3195\\n\",\n    \"6 3\\n129151\\n\",\n    \"6 5\\n477596\\n\",\n    \"12 7\\n129679930099\\n\",\n    \"3 1\\n898\\n\",\n    \"9 3\\n229333333\\n\",\n    \"6 3\\n301301\\n\",\n    \"4 2\\n8990\\n\",\n    \"4 2\\n8997\\n\",\n    \"2 1\\n12\\n\",\n    \"6 4\\n819999\\n\",\n    \"4 2\\n2934\\n\",\n    \"5 2\\n50400\\n\",\n    \"20 19\\n19999999999999999999\\n\",\n    \"6 3\\n799824\\n\",\n    \"6 3\\n129999\\n\",\n    \"5 3\\n29999\\n\",\n    \"10 3\\n8768769766\\n\",\n    \"6 3\\n179234\\n\",\n    \"4 2\\n1102\\n\",\n    \"5 3\\n19920\\n\",\n    \"6 2\\n252611\\n\",\n    \"4 2\\n1719\\n\",\n    \"7 2\\n3999999\\n\",\n    \"4 2\\n9192\\n\",\n    \"9 3\\n179179234\\n\",\n    \"5 3\\n42345\\n\",\n    \"5 3\\n49999\\n\",\n    \"7 2\\n1213000\\n\",\n    \"6 3\\n129987\\n\",\n    \"9 3\\n899899999\\n\",\n    \"4 2\\n3940\\n\",\n    \"5 3\\n22321\\n\",\n    \"9 3\\n987987999\\n\",\n    \"5 4\\n22223\\n\",\n    \"6 2\\n129131\\n\",\n    \"5 2\\n69699\\n\",\n    \"8 4\\n12341334\\n\",\n    \"4 2\\n8998\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n353\\n\",\n    \"4\\n1313\\n\",\n    \"5\\n99999\\n\",\n    \"5\\n41244\\n\",\n    \"5\\n16161\\n\",\n    \"2\\n33\\n\",\n    \"2\\n99\\n\",\n    \"2\\n33\\n\",\n    \"2\\n33\\n\",\n    \"5\\n99999\\n\",\n    \"5\\n33333\\n\",\n    \"5\\n22222\\n\",\n    \"5\\n99999\\n\",\n    \"5\\n16161\\n\",\n    \"5\\n99999\\n\",\n    \"5\\n91491\\n\",\n    \"5\\n91491\\n\",\n    \"5\\n41244\\n\",\n    \"3\\n202\\n\",\n    \"6\\n343434\\n\",\n    \"9\\n200200200\\n\",\n    \"4\\n1414\\n\",\n    \"4\\n9090\\n\",\n    \"4\\n1313\\n\",\n    \"6\\n130130\\n\",\n    \"4\\n2020\\n\",\n    \"8\\n11901190\\n\",\n    \"6\\n300300\\n\",\n    \"4\\n2002\\n\",\n    \"9\\n101101101\\n\",\n    \"5\\n19019\\n\",\n    \"8\\n12001200\\n\",\n    \"3\\n121\\n\",\n    \"4\\n1111\\n\",\n    \"6\\n121212\\n\",\n    \"4\\n2020\\n\",\n    \"4\\n2020\\n\",\n    \"3\\n222\\n\",\n    \"4\\n2020\\n\",\n    \"3\\n909\\n\",\n    \"10\\n1230123012\\n\",\n    \"4\\n2020\\n\",\n    \"5\\n16161\\n\",\n    \"3\\n222\\n\",\n    \"6\\n200200\\n\",\n    \"4\\n2002\\n\",\n    \"4\\n1111\\n\",\n    \"4\\n8080\\n\",\n    \"6\\n110110\\n\",\n    \"6\\n200200\\n\",\n    \"4\\n2929\\n\",\n    \"6\\n120120\\n\",\n    \"4\\n1301\\n\",\n    \"4\\n7878\\n\",\n    \"6\\n600600\\n\",\n    \"10\\n2002002002\\n\",\n    \"5\\n50505\\n\",\n    \"4\\n3030\\n\",\n    \"10\\n2000020000\\n\",\n    \"4\\n3030\\n\",\n    \"6\\n909090\\n\",\n    \"5\\n93993\\n\",\n    \"9\\n888888888\\n\",\n    \"4\\n3030\\n\",\n    \"6\\n200200\\n\",\n    \"5\\n24024\\n\",\n    \"6\\n590590\\n\",\n    \"6\\n346346\\n\",\n    \"3\\n808\\n\",\n    \"5\\n13013\\n\",\n    \"4\\n2020\\n\",\n    \"6\\n124124\\n\",\n    \"4\\n5757\\n\",\n    \"6\\n890890\\n\",\n    \"6\\n300300\\n\",\n    \"5\\n40404\\n\",\n    \"6\\n990990\\n\",\n    \"6\\n232323\\n\",\n    \"5\\n90090\\n\",\n    \"10\\n2000020000\\n\",\n    \"6\\n570570\\n\",\n    \"20\\n21474836482147483648\\n\",\n    \"12\\n131313131313\\n\",\n    \"6\\n424242\\n\",\n    \"6\\n131313\\n\",\n    \"5\\n13013\\n\",\n    \"4\\n1111\\n\",\n    \"5\\n88888\\n\",\n    \"6\\n790790\\n\",\n    \"9\\n130130130\\n\",\n    \"5\\n13013\\n\",\n    \"3\\n111\\n\",\n    \"4\\n2222\\n\",\n    \"6\\n200200\\n\",\n    \"5\\n13013\\n\",\n    \"6\\n202020\\n\",\n    \"6\\n850850\\n\",\n    \"6\\n180001\\n\",\n    \"10\\n9889889889\\n\",\n    \"4\\n9009\\n\",\n    \"9\\n101101101\\n\",\n    \"6\\n999999\\n\",\n    \"4\\n4040\\n\",\n    \"4\\n8080\\n\",\n    \"3\\n202\\n\",\n    \"5\\n55555\\n\",\n    \"6\\n232323\\n\",\n    \"5\\n33433\\n\",\n    \"7\\n4004004\\n\",\n    \"6\\n190190\\n\",\n    \"6\\n900900\\n\",\n    \"3\\n808\\n\",\n    \"6\\n131313\\n\",\n    \"8\\n20202020\\n\",\n    \"5\\n23023\\n\",\n    \"6\\n210210\\n\",\n    \"3\\n232\\n\",\n    \"6\\n289289\\n\",\n    \"6\\n179179\\n\",\n    \"6\\n130130\\n\",\n    \"7\\n9000900\\n\",\n    \"6\\n910910\\n\",\n    \"7\\n1300130\\n\",\n    \"5\\n12412\\n\",\n    \"6\\n123123\\n\",\n    \"5\\n39539\\n\",\n    \"6\\n357357\\n\",\n    \"6\\n790790\\n\",\n    \"9\\n913009130\\n\",\n    \"5\\n79079\\n\",\n    \"6\\n202020\\n\",\n    \"3\\n404\\n\",\n    \"6\\n202020\\n\",\n    \"4\\n7070\\n\",\n    \"4\\n3203\\n\",\n    \"6\\n130130\\n\",\n    \"6\\n477604\\n\",\n    \"12\\n129680012968\\n\",\n    \"3\\n999\\n\",\n    \"9\\n230230230\\n\",\n    \"6\\n301301\\n\",\n    \"4\\n9090\\n\",\n    \"4\\n9090\\n\",\n    \"2\\n22\\n\",\n    \"6\\n820082\\n\",\n    \"4\\n3030\\n\",\n    \"5\\n50505\\n\",\n    \"20\\n20000000000000000002\\n\",\n    \"6\\n800800\\n\",\n    \"6\\n130130\\n\",\n    \"5\\n30030\\n\",\n    \"10\\n8778778778\\n\",\n    \"6\\n180180\\n\",\n    \"4\\n1111\\n\",\n    \"5\\n20020\\n\",\n    \"6\\n262626\\n\",\n    \"4\\n1818\\n\",\n    \"7\\n4040404\\n\",\n    \"4\\n9292\\n\",\n    \"9\\n180180180\\n\",\n    \"5\\n42442\\n\",\n    \"5\\n50050\\n\",\n    \"7\\n1313131\\n\",\n    \"6\\n130130\\n\",\n    \"9\\n900900900\\n\",\n    \"4\\n4040\\n\",\n    \"5\\n22322\\n\",\n    \"9\\n988988988\\n\",\n    \"5\\n22232\\n\",\n    \"6\\n131313\\n\",\n    \"5\\n70707\\n\",\n    \"8\\n12351235\\n\",\n    \"4\\n9090\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}