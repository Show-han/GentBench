{
    "problem": "You are an expert Python programmer, and here is your task: Tarly has two different type of items, food boxes and wine barrels. There are f food boxes and w wine barrels. Tarly stores them in various stacks and each stack can consist of either food boxes or wine barrels but not both. The stacks are placed in a line such that no two stacks of food boxes are together and no two stacks of wine barrels are together.\n\nThe height of a stack is defined as the number of items in the stack. Two stacks are considered different if either their heights are different or one of them contains food and other contains wine.\n\nJon Snow doesn't like an arrangement if any stack of wine barrels has height less than or equal to h. What is the probability that Jon Snow will like the arrangement if all arrangement are equiprobably?\n\nTwo arrangement of stacks are considered different if exists such i, that i-th stack of one arrangement is different from the i-th stack of the other arrangement.\n\n\n-----Input-----\n\nThe first line of input contains three integers f, w, h (0 \u2264 f, w, h \u2264 10^5) \u2014 number of food boxes, number of wine barrels and h is as described above. It is guaranteed that he has at least one food box or at least one wine barrel.\n\n\n-----Output-----\n\nOutput the probability that Jon Snow will like the arrangement. The probability is of the form [Image], then you need to output a single integer p\u00b7q^{ - 1} mod (10^9 + 7).\n\n\n-----Examples-----\nInput\n1 1 1\n\nOutput\n0\n\nInput\n1 2 1\n\nOutput\n666666672\n\n\n\n-----Note-----\n\nIn the first example f  =  1, w = 1 and h = 1, there are only two possible arrangement of stacks and Jon Snow doesn't like any of them.\n\nIn the second example f = 1, w = 2 and h = 1, there are three arrangements. Jon Snow likes the (1) and (3) arrangement. So the probabilty is $\\frac{2}{3}$. [Image]",
    "solution": "[\"def build_fac():\\n   nonlocal mod\\n   fac = [1] * int(3e5 + 1)\\n   for i in range(1, int(3e5)):\\n      fac[i] = i*fac[i-1] % mod\\n   return fac\\n\\ndef inv(x):\\n   nonlocal mod\\n   return pow(x, mod-2, mod)\\n\\ndef ncr(n, r):\\n   nonlocal fac\\n   if n < 0 or n < r: return 0\\n   return fac[n]*inv(fac[r])*inv(fac[n-r]) % mod\\n\\ndef cf(f, w, h):\\n   nonlocal mod\\n   if w == 0: return 1\\n   rs = 0\\n   for k in range(1, min(w//(h+1),f+1)+1):\\n      rs += ncr(f+1, k) * ncr(w-k*h-1, k-1) % mod\\n      rs %= mod\\n   return rs\\n\\nf, w, h = map(int,input().split(' '))\\nmod = int(1e9 + 7)\\n\\nfac = build_fac()\\ncnt = cf(f, w, h)\\nrs = cnt*inv(ncr(f+w, w)) % mod\\n\\nprint(rs)\", \"import sys\\ndef factorial():\\n    nonlocal mod\\n    fac = [1] * int(3e5 + 1)\\n    for i in range(1, int(3e5)):\\n        fac[i] = i*fac[i-1] % mod\\n    return fac\\ndef inverse(x):\\n    nonlocal mod\\n    return pow(x, mod-2, mod)\\ndef C(n, r):\\n    nonlocal fac\\n    if n < 0 or n < r:\\n        return 0\\n    return fac[n]*inverse(fac[r])*inverse(fac[n-r]) % mod\\ndef calc(f, w, h):\\n    nonlocal mod\\n    if w == 0:\\n        return 1\\n    ans = 0\\n    for k in range(1, min(w//(h+1),f+1)+1):\\n        ans += C(f+1, k) * C(w-k*h-1, k-1) % mod\\n        ans %= mod\\n    return ans\\nf, w, h = list(map(int,sys.stdin.readline().split(' ')))\\nmod = int(1e9 + 7)\\nfac = factorial()\\ncnt = calc(f, w, h)\\nsys.stdout.write(str(cnt*inverse(C(f+w, w)) % mod))\\n\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"1 1 1\\n\",\n    \"1 2 1\\n\",\n    \"6 5 7\\n\",\n    \"12 12 24\\n\",\n    \"20 12 32\\n\",\n    \"21 32 10\\n\",\n    \"30 12 20\\n\",\n    \"23 22 14\\n\",\n    \"589 505 50\\n\",\n    \"499 599 100\\n\",\n    \"40000 40000 40000\\n\",\n    \"40000 40000 4000\\n\",\n    \"4346 1611 880\\n\",\n    \"546 1895 4881\\n\",\n    \"4138 4245 30\\n\",\n    \"1454 4484 2579\\n\",\n    \"532 1670 830\\n\",\n    \"4066 1109 4375\\n\",\n    \"1910 3945 1026\\n\",\n    \"298 282 2458\\n\",\n    \"4146 1303 3218\\n\",\n    \"1186 2952 2228\\n\",\n    \"158 7298 8839\\n\",\n    \"2390 4197 2086\\n\",\n    \"7271 3335 1331\\n\",\n    \"3653 1141 815\\n\",\n    \"6232 1674 3837\\n\",\n    \"3414 2092 6298\\n\",\n    \"2789 4002 243\\n\",\n    \"168 5652 1877\\n\",\n    \"2626 6150 9532\\n\",\n    \"2196 3689 2484\\n\",\n    \"4424 3847 6135\\n\",\n    \"3263 6237 332\\n\",\n    \"5349 9860 19\\n\",\n    \"3032 3513 1160\\n\",\n    \"199 6097 9186\\n\",\n    \"4036 9511 1278\\n\",\n    \"334 8652 1633\\n\",\n    \"6929 8820 7285\\n\",\n    \"8807 7798 3436\\n\",\n    \"8339 9994 7125\\n\",\n    \"7176 4418 7324\\n\",\n    \"9663 4033 3561\\n\",\n    \"0 1 0\\n\",\n    \"0 1 1\\n\",\n    \"1 0 0\\n\",\n    \"1 0 1\\n\",\n    \"1 1 0\\n\",\n    \"100000 100000 100000\\n\",\n    \"100000 100000 10000\\n\",\n    \"100000 100000 1000\\n\",\n    \"100000 100000 100\\n\",\n    \"100000 100000 10\\n\",\n    \"100000 100000 1\\n\",\n    \"100000 10000 100000\\n\",\n    \"100000 1000 100000\\n\",\n    \"100000 100 100000\\n\",\n    \"100000 10 100000\\n\",\n    \"100000 1 100000\\n\",\n    \"10000 100000 100000\\n\",\n    \"1000 100000 100000\\n\",\n    \"100 100000 100000\\n\",\n    \"10 100000 100000\\n\",\n    \"1 100000 100000\\n\",\n    \"0 1000 0\\n\",\n    \"0 1000 1000\\n\",\n    \"1000 0 0\\n\",\n    \"1000 0 1000\\n\",\n    \"1000 1000 0\\n\",\n    \"1000 1000 1000\\n\",\n    \"10 0 1\\n\"\n  ],\n  \"outputs\": [\n    \"0\\n\",\n    \"666666672\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"683999264\\n\",\n    \"0\\n\",\n    \"232993157\\n\",\n    \"488424469\\n\",\n    \"351473179\\n\",\n    \"0\\n\",\n    \"252698087\\n\",\n    \"637045115\\n\",\n    \"0\\n\",\n    \"105072868\\n\",\n    \"84820391\\n\",\n    \"89538673\\n\",\n    \"0\\n\",\n    \"897761503\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"342427135\\n\",\n    \"0\\n\",\n    \"894614062\\n\",\n    \"891081674\\n\",\n    \"222226067\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"27429439\\n\",\n    \"935398810\\n\",\n    \"0\\n\",\n    \"253646282\\n\",\n    \"0\\n\",\n    \"834785824\\n\",\n    \"768938832\\n\",\n    \"369745924\\n\",\n    \"0\\n\",\n    \"630584028\\n\",\n    \"291702475\\n\",\n    \"279944101\\n\",\n    \"630539546\\n\",\n    \"556967054\\n\",\n    \"0\\n\",\n    \"596440646\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"308343288\\n\",\n    \"402115033\\n\",\n    \"638785433\\n\",\n    \"161612114\\n\",\n    \"532446698\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}