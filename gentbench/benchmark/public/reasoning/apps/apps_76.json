{
    "problem": "You are an expert Python programmer, and here is your task: The Tower of Hanoi is a well-known mathematical puzzle. It consists of three rods, and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks in a neat stack in ascending order of size on one rod, the smallest at the top, thus making a conical shape.\n\nThe objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules:   Only one disk can be moved at a time.  Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e. a disk can only be moved if it is the uppermost disk on a stack.  No disk may be placed on top of a smaller disk. \n\nWith three disks, the puzzle can be solved in seven moves. The minimum number of moves required to solve a Tower of Hanoi puzzle is 2^{n} - 1, where n is the number of disks. (c) Wikipedia.\n\nSmallY's puzzle is very similar to the famous Tower of Hanoi. In the Tower of Hanoi puzzle you need to solve a puzzle in minimum number of moves, in SmallY's puzzle each move costs some money and you need to solve the same puzzle but for minimal cost. At the beginning of SmallY's puzzle all n disks are on the first rod. Moving a disk from rod i to rod j (1 \u2264 i, j \u2264 3) costs t_{ij} units of money. The goal of the puzzle is to move all the disks to the third rod.\n\nIn the problem you are given matrix t and an integer n. You need to count the minimal cost of solving SmallY's puzzle, consisting of n disks.\n\n\n-----Input-----\n\nEach of the first three lines contains three integers \u2014 matrix t. The j-th integer in the i-th line is t_{ij} (1 \u2264 t_{ij} \u2264 10000;\u00a0i \u2260 j). The following line contains a single integer n (1 \u2264 n \u2264 40) \u2014 the number of disks.\n\nIt is guaranteed that for all i (1 \u2264 i \u2264 3), t_{ii} = 0.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum cost of solving SmallY's puzzle.\n\n\n-----Examples-----\nInput\n0 1 1\n1 0 1\n1 1 0\n3\n\nOutput\n7\n\nInput\n0 2 2\n1 0 100\n1 2 0\n3\n\nOutput\n19\n\nInput\n0 2 1\n1 0 100\n1 2 0\n5\n\nOutput\n87",
    "solution": "[\"#\\t!/bin/env python3\\n#\\tcoding: UTF-8\\n\\n\\n#\\t\\u272a H4WK3yE\\u4e61\\n#\\tMohd. Farhan Tahir\\n#\\tIndian Institute Of Information Technology and Management,Gwalior\\n\\n#\\tQuestion Link\\n#\\thttps://codeforces.com/problemset/problem/392/B\\n#\\n\\n# ///==========Libraries, Constants and Functions=============///\\n\\n\\nimport sys\\n\\ninf = float(\\\"inf\\\")\\nmod = 1000000007\\n\\n\\ndef get_array(): return list(map(int, sys.stdin.readline().split()))\\n\\n\\ndef get_ints(): return list(map(int, sys.stdin.readline().split()))\\n\\n\\ndef input(): return sys.stdin.readline()\\n\\n# ///==========MAIN=============///\\n\\n\\ndef main():\\n    dp = [[[0 for _ in range(3)] for _ in range(3)] for _ in range(43)]\\n    matrix = [[0 for _ in range(3)] for _ in range(3)]\\n    for i in range(3):\\n        matrix[i] = get_array()\\n    n = int(input())\\n    for i in range(1, n+1):\\n        for frm in range(3):\\n            for to in range(3):\\n                other = 3-frm-to\\n                if frm == to:\\n                    continue\\n                dp[i][frm][to] = dp[i-1][frm][other]+matrix[frm][to]+dp[i-1][other][to]\\n                c = dp[i-1][frm][to]+matrix[frm][other] + \\\\\\n                    dp[i-1][to][frm]+matrix[other][to]+dp[i-1][frm][to]\\n                dp[i][frm][to] = min(c, dp[i][frm][to])\\n    print(dp[n][0][2])\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\"]",
    "test": "{\n  \"inputs\": [\n    \"0 1 1\\n1 0 1\\n1 1 0\\n3\\n\",\n    \"0 2 2\\n1 0 100\\n1 2 0\\n3\\n\",\n    \"0 2 1\\n1 0 100\\n1 2 0\\n5\\n\",\n    \"0 5835 1487\\n6637 0 9543\\n6961 6820 0\\n7\\n\",\n    \"0 3287 5433\\n6796 0 5787\\n1445 6158 0\\n26\\n\",\n    \"0 4449 3122\\n6816 0 8986\\n1048 1468 0\\n4\\n\",\n    \"0 913 8129\\n8352 0 4408\\n9073 7625 0\\n30\\n\",\n    \"0 8392 3430\\n5262 0 6256\\n8590 8091 0\\n29\\n\",\n    \"0 6593 2887\\n9821 0 7109\\n8501 917 0\\n11\\n\",\n    \"0 2957 4676\\n9787 0 1241\\n5147 8582 0\\n8\\n\",\n    \"0 4085 4623\\n1929 0 2793\\n902 8722 0\\n11\\n\",\n    \"0 1404 2399\\n3960 0 9399\\n7018 4159 0\\n34\\n\",\n    \"0 1429 1052\\n4984 0 2116\\n4479 782 0\\n21\\n\",\n    \"0 3844 8950\\n8110 0 8591\\n5977 4462 0\\n7\\n\",\n    \"0 7336 3824\\n3177 0 6795\\n4491 7351 0\\n28\\n\",\n    \"0 8518 8166\\n799 0 266\\n7987 4940 0\\n15\\n\",\n    \"0 2990 3624\\n5985 0 9822\\n3494 6400 0\\n15\\n\",\n    \"0 3003 1005\\n4320 0 1463\\n4961 5563 0\\n40\\n\",\n    \"0 9916 3929\\n5389 0 6509\\n2557 4099 0\\n38\\n\",\n    \"0 2653 5614\\n9654 0 8668\\n6421 133 0\\n40\\n\",\n    \"0 6103 5951\\n3308 0 8143\\n3039 2918 0\\n40\\n\",\n    \"0 1655 1941\\n7562 0 6518\\n8541 184 0\\n38\\n\",\n    \"0 7561 1463\\n7621 0 9485\\n1971 1024 0\\n38\\n\",\n    \"0 5903 6945\\n5521 0 2812\\n8703 8684 0\\n38\\n\",\n    \"0 5382 7365\\n7671 0 679\\n3183 2634 0\\n40\\n\",\n    \"0 3448 4530\\n6398 0 5321\\n1302 139 0\\n39\\n\",\n    \"0 5105 2640\\n1902 0 9380\\n302 3014 0\\n38\\n\",\n    \"0 9756 5922\\n9233 0 8371\\n6826 8020 0\\n40\\n\",\n    \"0 1177 7722\\n4285 0 8901\\n3880 8549 0\\n40\\n\",\n    \"0 3792 500\\n1183 0 3169\\n1357 9914 0\\n40\\n\",\n    \"0 7600 9420\\n2996 0 974\\n2995 3111 0\\n39\\n\",\n    \"0 65 3859\\n6032 0 555\\n6731 9490 0\\n38\\n\",\n    \"0 3341 2142\\n452 0 4434\\n241 8379 0\\n38\\n\",\n    \"0 2975 131\\n4408 0 8557\\n7519 8541 0\\n40\\n\",\n    \"0 5638 2109\\n3346 0 1684\\n2770 8831 0\\n40\\n\",\n    \"0 649 576\\n2780 0 6415\\n7629 1233 0\\n38\\n\",\n    \"0 5222 6817\\n8403 0 6167\\n2424 2250 0\\n39\\n\",\n    \"0 9628 4599\\n6755 0 5302\\n5753 1995 0\\n39\\n\",\n    \"0 9358 745\\n7093 0 7048\\n1767 5267 0\\n39\\n\",\n    \"0 4405 3533\\n8676 0 3288\\n1058 5977 0\\n38\\n\",\n    \"0 1096 1637\\n5625 0 4364\\n8026 7246 0\\n39\\n\",\n    \"0 8494 3561\\n8215 0 9313\\n1980 9423 0\\n39\\n\",\n    \"0 3461 4834\\n1096 0 3259\\n8158 3363 0\\n40\\n\",\n    \"0 2986 6350\\n59 0 9863\\n8674 1704 0\\n40\\n\",\n    \"0 7829 1008\\n2914 0 2636\\n4439 8654 0\\n39\\n\",\n    \"0 6991 1482\\n1274 0 6332\\n7588 5049 0\\n38\\n\",\n    \"0 4499 7885\\n6089 0 8400\\n8724 2588 0\\n40\\n\",\n    \"0 9965 5863\\n5956 0 3340\\n9497 5040 0\\n38\\n\",\n    \"0 5125 2904\\n763 0 4213\\n4171 3367 0\\n38\\n\",\n    \"0 328 3888\\n3730 0 760\\n9382 6574 0\\n38\\n\",\n    \"0 6082 5094\\n2704 0 991\\n7522 6411 0\\n40\\n\",\n    \"0 655 1599\\n4254 0 7484\\n3983 9099 0\\n39\\n\",\n    \"0 1099 3412\\n9261 0 3868\\n758 8489 0\\n38\\n\",\n    \"0 8246 1436\\n8823 0 5285\\n8283 7277 0\\n39\\n\",\n    \"0 1446 2980\\n9298 0 9679\\n7865 6963 0\\n38\\n\",\n    \"0 10000 10000\\n10000 0 10000\\n10000 10000 0\\n40\\n\",\n    \"0 1 1\\n1 0 1\\n1 1 0\\n1\\n\",\n    \"0 1 10\\n1 0 1\\n10 1 0\\n1\\n\",\n    \"0 1 10\\n1 0 1\\n10 1 0\\n1\\n\",\n    \"0 1 100\\n1 0 1\\n100 1 0\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"7\\n\",\n    \"19\\n\",\n    \"87\\n\",\n    \"723638\\n\",\n    \"293974120391\\n\",\n    \"73486\\n\",\n    \"6310499935698\\n\",\n    \"3388490535940\\n\",\n    \"11231429\\n\",\n    \"1162341\\n\",\n    \"7450335\\n\",\n    \"79409173073874\\n\",\n    \"5047111802\\n\",\n    \"875143\\n\",\n    \"1538910647942\\n\",\n    \"162320667\\n\",\n    \"175936803\\n\",\n    \"3633519425831590\\n\",\n    \"1482783056079892\\n\",\n    \"6216516575480675\\n\",\n    \"5710985562714285\\n\",\n    \"1280396561454826\\n\",\n    \"1219526376186314\\n\",\n    \"1709923833066384\\n\",\n    \"4417349048592850\\n\",\n    \"1967209554081624\\n\",\n    \"912380857210937\\n\",\n    \"8928156585485415\\n\",\n    \"5921725291311720\\n\",\n    \"3176855596478157\\n\",\n    \"2526066880932431\\n\",\n    \"1040962633462383\\n\",\n    \"740490539331253\\n\",\n    \"5516494172354496\\n\",\n    \"4211129534337070\\n\",\n    \"731862427166001\\n\",\n    \"2978027243887585\\n\",\n    \"2894220024221629\\n\",\n    \"2711090254202573\\n\",\n    \"1089982526985246\\n\",\n    \"2596191288960748\\n\",\n    \"3798507254080314\\n\",\n    \"4092687698447757\\n\",\n    \"4350584259212361\\n\",\n    \"2446779875619187\\n\",\n    \"1272852690054827\\n\",\n    \"7298008429373546\\n\",\n    \"1907744300121994\\n\",\n    \"1013123610034430\\n\",\n    \"1073001180618872\\n\",\n    \"5301967237043705\\n\",\n    \"2158371867244476\\n\",\n    \"975259178289234\\n\",\n    \"3474823247533881\\n\",\n    \"1747643190259529\\n\",\n    \"10995116277750000\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}