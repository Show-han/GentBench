{
    "problem": "You are an expert Python programmer, and here is your task: A team of students from the city S is sent to the All-Berland Olympiad in Informatics. Traditionally, they go on the train. All students have bought tickets in one carriage, consisting of n compartments (each compartment has exactly four people). We know that if one compartment contain one or two students, then they get bored, and if one compartment contain three or four students, then the compartment has fun throughout the entire trip.\n\nThe students want to swap with other people, so that no compartment with students had bored students. To swap places with another person, you need to convince him that it is really necessary. The students can not independently find the necessary arguments, so they asked a sympathetic conductor for help. The conductor can use her life experience to persuade any passenger to switch places with some student.\n\nHowever, the conductor does not want to waste time persuading the wrong people, so she wants to know what is the minimum number of people necessary to persuade her to change places with the students. Your task is to find the number. \n\nAfter all the swaps each compartment should either have no student left, or have a company of three or four students. \n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^6) \u2014 the number of compartments in the carriage. The second line contains n integers a_1, a_2, ..., a_{n} showing how many students ride in each compartment (0 \u2264 a_{i} \u2264 4). It is guaranteed that at least one student is riding in the train.\n\n\n-----Output-----\n\nIf no sequence of swapping seats with other people leads to the desired result, print number \"-1\" (without the quotes). In another case, print the smallest number of people you need to persuade to swap places.\n\n\n-----Examples-----\nInput\n5\n1 2 2 4 3\n\nOutput\n2\n\nInput\n3\n4 1 1\n\nOutput\n2\n\nInput\n4\n0 3 0 4\n\nOutput\n0",
    "solution": "[\"#! /usr/bin/env python\\n\\nn = int(input())\\ncounts = [0] * 5\\nnums = [int(x) for x in input().split()]\\nfor x in nums:\\n    counts[x] += 1\\n\\ns = sum(nums)\\nif s > 2 and s != 5:\\n    ans = 0\\n    if counts[1] >= counts[2]:\\n        ans += counts[2]\\n        counts[3] += counts[2]\\n        counts[1] -= counts[2]\\n        ans += 2 * (counts[1] // 3)\\n        counts[3] += counts[1] // 3\\n        counts[1] %= 3\\n        if counts[3] > 0:\\n            ans += counts[1]\\n        elif counts[1] != 0:\\n            ans += 2\\n    else:\\n        ans += counts[1]\\n        counts[2] -= counts[1]\\n        ans += 2 * (counts[2] // 3)\\n        counts[2] %= 3\\n        if counts[4] > 0:\\n            ans += counts[2]\\n        elif counts[2] != 0:\\n            ans += 2\\n    print(ans)\\nelse:\\n    print(-1)\\n\", \"#! /usr/bin/env python\\n\\nn = int(input())\\ncounts = [0] * 5\\ns = 0\\nfor x in [int(x) for x in input().split()]:\\n    counts[x] += 1\\n    s += x\\n\\nif s > 2 and s != 5:\\n    ans = 0\\n    if counts[1] >= counts[2]:\\n        ans += counts[2]\\n        counts[3] += counts[2]\\n        counts[1] -= counts[2]\\n        ans += 2 * (counts[1] // 3)\\n        counts[3] += counts[1] // 3\\n        counts[1] %= 3\\n        if counts[3] > 0:\\n            ans += counts[1]\\n        elif counts[1] != 0:\\n            ans += 2\\n    else:\\n        ans += counts[1]\\n        counts[2] -= counts[1]\\n        ans += 2 * (counts[2] // 3)\\n        counts[2] %= 3\\n        if counts[4] > 0:\\n            ans += counts[2]\\n        elif counts[2] != 0:\\n            ans += 2\\n    print(ans)\\nelse:\\n    print(-1)\\n\", \"n = int(input())\\nA = [0, 0, 0, 0, 0]\\nB = list(map(int, input().split(' ')))\\n\\nfor i in B:\\n\\tA[i] += 1\\n\\nres = min(A[1], A[2])\\nA[1] -= res\\nA[2] -= res\\nA[3] += res\\n\\nres += 2 * (A[1] // 3)\\nA[3] += A[1] // 3\\nA[1] %= 3\\n\\nres += 2 * (A[2] // 3)\\nA[3] += 2 * (A[2] // 3)\\nA[2] %= 3\\n\\nassert(A[1] == 0 or A[2] == 0)\\n\\nif (A[1] == 1):\\n\\tif (A[3] > 0):\\n\\t\\tres += 1 #; A[1] = 0; A[3] -= 1; A[4] += 1\\n\\telif (A[4] > 1):\\n\\t\\tres += 2 #; A[1] = 0; A[4] -= 2; A[3] += 3\\n\\telse:\\n\\t\\tprint(-1)\\n\\t\\treturn\\nelif (A[1] == 2):\\n\\tif (A[4] > 0):\\n\\t\\tres += 2 #; A[1] = 0; A[4] -= 1; A[3] += 1\\n\\telif (A[3] > 1):\\n\\t\\tres += 2 #; A[1] = 0; A[3] -= 2; A[4] += 2\\n\\telse:\\n\\t\\tprint(-1)\\n\\t\\treturn\\n\\nif (A[2] == 1):\\n\\tif (A[4] > 0):\\n\\t\\tres += 1 #; A[4] -= 1; A[2] = 0; A[3] += 1\\n\\telif (A[3] > 1):\\n\\t\\tres += 2; #; A[2] = 0; A[3] -= 2; A[4] += 2\\n\\telse:\\n\\t\\tprint(-1)\\n\\t\\treturn\\nelif (A[2] == 2):\\n\\tres += 2 #; A[2] = 0; A[4] += 1\\n\\t\\nprint(res)\\n\\n\", \"#! /usr/bin/env python\\n\\nn = int(input())\\ncounts = [0] * 5\\nnums = [int(x) for x in input().split()]\\nfor x in nums:\\n    counts[x] += 1\\n\\ns = sum(nums)\\nif s > 2 and s != 5:\\n    ans = 0\\n    if counts[1] >= counts[2]:\\n        ans += counts[2]\\n        counts[3] += counts[2]\\n        counts[1] -= counts[2]\\n        ans += 2 * (counts[1] // 3)\\n        counts[3] += counts[1] // 3\\n        counts[1] %= 3\\n        if counts[3] > 0:\\n            ans += counts[1]\\n        elif counts[1] != 0:\\n            ans += 2\\n    else:\\n        ans += counts[1]\\n        counts[2] -= counts[1]\\n        ans += 2 * (counts[2] // 3)\\n        counts[2] %= 3\\n        if counts[4] > 0:\\n            ans += counts[2]\\n        elif counts[2] != 0:\\n            ans += 2\\n    print(ans)\\nelse:\\n    print(-1)\\n\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"n = int(input())\\nseq = list(map(int, input().split(\\\" \\\")))\\n\\nif sum(seq) < 3 or sum(seq) == 5:\\n\\tprint(-1)\\n\\nelse:\\n\\tarr = [0,0,0,0,0]\\n\\tfor s in seq:\\n\\t\\tarr[s] += 1\\n\\t#print(arr)\\n\\t\\n\\tans = 0\\n\\tif arr[2] >= arr[1]:\\n\\t\\tans += arr[1]\\n\\t\\tarr[2] -= arr[1]\\n\\t\\tarr[3] += arr[1]\\n\\t\\tarr[1] = 0\\n\\telse:\\n\\t\\tans += arr[2]\\n\\t\\tarr[1] -= arr[2]\\n\\t\\tarr[3] += arr[2]\\n\\t\\tarr[2] = 0\\n\\t#print(arr, ans)\\n\\t\\n\\n\\tans += 2*(arr[1]//3)\\n\\tarr[3] += arr[1]//3\\n\\tarr[1] %= 3\\n\\t#print(arr, ans)\\n\\t\\n\\tif (arr[3] >= arr[1]):\\n\\t\\tans += arr[1]\\n\\t\\tarr[4] += arr[1]\\n\\t\\tarr[3] -= arr[1]\\n\\t\\tarr[1] = 0\\n\\telse:\\n\\t\\tif arr[1] < 2:\\n\\t\\t\\tans += arr[3]\\n\\t\\t\\tarr[4] += arr[3]\\n\\t\\t\\tarr[1] -= arr[3]\\n\\t\\t\\tarr[3] = 0\\n\\t#print(arr, ans)\\n\\t\\n\\tif arr[1] > 0:\\n\\t\\tif arr[1] == 2:\\n\\t\\t\\tans += arr[1]\\n\\t\\t\\tarr[4] -= 1\\n\\t\\t\\tarr[3] += 2\\n\\t\\t\\tarr[1] = 0\\n\\t\\telse:\\n\\t\\t\\tans += 2\\n\\t\\t\\tarr[4] -= 2\\n\\t\\t\\tarr[3] += 2\\n\\t\\t\\tarr[1] = 0\\n\\t\\n\\tans += 2*(arr[2]//3)\\n\\tarr[3] += 2*(arr[2]//3)\\n\\tarr[2] %= 3\\n\\t#print(arr, ans)\\n\\t\\n\\tif arr[2] > 0:\\n\\t\\tif (arr[4] >= arr[2]):\\n\\t\\t\\tans += arr[2]\\n\\t\\t\\tarr[4] -= arr[2]\\n\\t\\t\\tarr[3] += 2*arr[2]\\n\\t\\t\\tarr[2] = 0\\n\\t\\t\\t#print(arr, ans)\\n\\t\\t\\t\\n\\t\\t\\tans += 2*(arr[2])\\n\\t\\t\\tarr[4] += 2*arr[2]\\n\\t\\t\\tarr[3] -= arr[2]\\n\\t\\t\\tarr[2] = 0\\n\\t\\t\\t#print(arr, ans)\\n\\t\\telse:\\n\\t\\t\\tif (arr[4] > 0):\\n\\t\\t\\t\\tans += arr[2]\\n\\t\\t\\t\\tarr[4] -= arr[2]\\n\\t\\t\\t\\tarr[3] += 2*arr[2]\\n\\t\\t\\t\\tarr[2] = 0\\n\\t\\t\\t\\t#print(arr, ans)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tif arr[2] == 1:\\n\\t\\t\\t\\t\\tans += 2*arr[2]\\n\\t\\t\\t\\t\\tarr[3] += 2\\n\\t\\t\\t\\t\\tarr[2] = 0\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tans += arr[2]\\n\\t\\t\\t\\t\\tarr[4] += 1\\n\\t\\t\\t\\t\\tarr[2] = 0\\n\\t\\n\\tprint(ans)\", \"n = int(input())\\nseq = list(map(int, input().split(\\\" \\\")))\\n\\nif sum(seq) < 3 or sum(seq) == 5:\\n\\tprint(-1)\\n\\nelse:\\n\\tarr = [0,0,0,0,0]\\n\\tfor s in seq:\\n\\t\\tarr[s] += 1\\n\\t#print(arr)\\n\\t\\n\\tans = 0\\n\\tif arr[2] >= arr[1]:\\n\\t\\tans += arr[1]\\n\\t\\tarr[2] -= arr[1]\\n\\t\\tarr[3] += arr[1]\\n\\t\\tarr[1] = 0\\n\\telse:\\n\\t\\tans += arr[2]\\n\\t\\tarr[1] -= arr[2]\\n\\t\\tarr[3] += arr[2]\\n\\t\\tarr[2] = 0\\n\\t#print(arr, ans)\\n\\t\\n\\n\\tans += 2*(arr[1]//3)\\n\\tarr[3] += arr[1]//3\\n\\tarr[1] %= 3\\n\\t#print(arr, ans)\\n\\t\\n\\tif (arr[3] >= arr[1]):\\n\\t\\tans += arr[1]\\n\\t\\tarr[4] += arr[1]\\n\\t\\tarr[3] -= arr[1]\\n\\t\\tarr[1] = 0\\n\\telse:\\n\\t\\tif arr[1] < 2:\\n\\t\\t\\tans += arr[3]\\n\\t\\t\\tarr[4] += arr[3]\\n\\t\\t\\tarr[1] -= arr[3]\\n\\t\\t\\tarr[3] = 0\\n\\t#print(arr, ans)\\n\\t\\n\\tif arr[1] > 0:\\n\\t\\tif arr[1] == 2:\\n\\t\\t\\tans += arr[1]\\n\\t\\t\\tarr[4] -= 1\\n\\t\\t\\tarr[3] += 2\\n\\t\\t\\tarr[1] = 0\\n\\t\\telse:\\n\\t\\t\\tans += 2\\n\\t\\t\\tarr[4] -= 2\\n\\t\\t\\tarr[3] += 2\\n\\t\\t\\tarr[1] = 0\\n\\t\\n\\tans += 2*(arr[2]//3)\\n\\tarr[3] += 2*(arr[2]//3)\\n\\tarr[2] %= 3\\n\\t#print(arr, ans)\\n\\t\\n\\tif arr[2] > 0:\\n\\t\\tif (arr[4] >= arr[2]):\\n\\t\\t\\tans += arr[2]\\n\\t\\t\\tarr[4] -= arr[2]\\n\\t\\t\\tarr[3] += 2*arr[2]\\n\\t\\t\\tarr[2] = 0\\n\\t\\t\\t#print(arr, ans)\\n\\t\\t\\t\\n\\t\\t\\tans += 2*(arr[2])\\n\\t\\t\\tarr[4] += 2*arr[2]\\n\\t\\t\\tarr[3] -= arr[2]\\n\\t\\t\\tarr[2] = 0\\n\\t\\t\\t#print(arr, ans)\\n\\t\\telse:\\n\\t\\t\\tif (arr[4] > 0):\\n\\t\\t\\t\\tans += arr[2]\\n\\t\\t\\t\\tarr[4] -= arr[2]\\n\\t\\t\\t\\tarr[3] += 2*arr[2]\\n\\t\\t\\t\\tarr[2] = 0\\n\\t\\t\\t\\t#print(arr, ans)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tif arr[2] == 1:\\n\\t\\t\\t\\t\\tans += 2*arr[2]\\n\\t\\t\\t\\t\\tarr[3] += 2\\n\\t\\t\\t\\t\\tarr[2] = 0\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tans += arr[2]\\n\\t\\t\\t\\t\\tarr[4] += 1\\n\\t\\t\\t\\t\\tarr[2] = 0\\n\\t\\n\\tprint(ans)\", \"a = [0] * 5\\ntot, ans = 0, 0\\n\\ninput()\\nfor x in list(map(int, input().split())):\\n  a[x] += 1\\n  tot += x\\n\\nif tot < 3 or tot == 5:\\n  print(-1);return()\\n\\nmn = min(a[1], a[2])\\na[1] -= mn\\na[2] -= mn\\na[3] += mn\\nans += mn\\n\\nif a[1]:\\n  add = a[1] // 3\\n  a[1] %= 3\\n  a[3] += add\\n  ans += 2 * add\\n  ans += 1 if a[1] == 1 and a[3] else 2 if a[1] else 0\\n\\nif a[2]:\\n  add = a[2] // 3\\n  a[2] %= 3\\n  a[3] += 2 * add\\n  ans += 2 * add\\n  ans += 1 if a[2] == 1 and a[4] else 2 if a[2] else 0\\n\\nprint(ans)\"]",
    "test": "{\n  \"inputs\": [\n    \"5\\n1 2 2 4 3\\n\",\n    \"3\\n4 1 1\\n\",\n    \"4\\n0 3 0 4\\n\",\n    \"5\\n4 4 3 3 1\\n\",\n    \"5\\n4 3 4 2 4\\n\",\n    \"10\\n2 1 2 3 4 1 3 4 4 4\\n\",\n    \"10\\n2 3 3 1 3 1 3 2 2 4\\n\",\n    \"120\\n1 1 1 1 1 1 1 4 4 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 4 1 1 4 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 1 1 1 1 1 1 1 1 1 2 4 1 1 3 1 1 1 2 1 0 3 1 1 1 2 1 4 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"10\\n2 4 1 3 1 2 2 2 2 2\\n\",\n    \"10\\n3 4 2 2 1 1 3 1 1 2\\n\",\n    \"20\\n4 1 4 4 2 1 4 3 2 3 1 1 2 2 2 4 4 2 4 2\\n\",\n    \"20\\n4 3 4 2 1 1 3 1 4 2 1 4 3 3 4 3 1 1 1 3\\n\",\n    \"20\\n4 1 1 1 4 2 3 3 2 1 1 4 4 3 1 1 2 4 2 3\\n\",\n    \"20\\n4 4 2 4 3 2 3 1 4 1 1 4 1 4 3 4 4 3 3 3\\n\",\n    \"20\\n4 2 3 3 1 3 2 3 1 4 4 4 2 1 4 2 1 3 4 4\\n\",\n    \"23\\n2 3 1 1 1 1 4 3 2 2 3 3 4 1 4 2 4 1 4 2 3 1 1\\n\",\n    \"27\\n0 2 4 1 4 2 1 2 3 4 2 4 1 2 3 2 3 2 2 1 0 4 3 0 3 0 1\\n\",\n    \"28\\n2 0 4 2 3 4 1 1 4 3 0 3 0 3 2 3 2 4 1 2 4 3 3 3 0 1 0 1\\n\",\n    \"24\\n4 2 4 3 1 3 4 1 3 4 2 4 0 2 3 4 1 1 4 3 1 2 2 4\\n\",\n    \"19\\n2 4 4 2 0 0 1 4 1 0 2 2 4 2 0 1 1 1 4\\n\",\n    \"16\\n3 3 3 1 3 0 1 4 4 4 1 4 3 1 1 4\\n\",\n    \"17\\n3 3 1 0 1 3 1 1 1 3 0 2 2 2 3 2 2\\n\",\n    \"12\\n2 2 2 1 1 0 2 0 1 1 2 1\\n\",\n    \"15\\n4 0 1 0 0 4 1 1 0 4 1 4 4 1 0\\n\",\n    \"20\\n0 4 4 0 0 0 2 3 3 3 2 0 3 2 3 2 4 4 2 4\\n\",\n    \"23\\n1 1 3 2 0 3 1 2 2 2 1 3 3 4 1 0 0 3 1 2 2 0 3\\n\",\n    \"15\\n0 2 4 2 0 4 4 2 4 4 1 2 4 2 2\\n\",\n    \"17\\n0 4 3 0 2 2 4 2 4 4 2 4 2 1 0 0 0\\n\",\n    \"21\\n0 3 2 3 0 2 3 4 3 0 1 3 2 2 3 3 3 0 2 2 0\\n\",\n    \"21\\n1 1 3 1 0 3 3 3 3 0 1 3 0 3 1 1 1 3 2 0 0\\n\",\n    \"13\\n1 1 1 2 1 1 4 1 3 1 1 1 0\\n\",\n    \"14\\n4 2 4 4 0 4 4 0 1 0 0 4 3 4\\n\",\n    \"13\\n2 1 2 2 3 4 0 2 2 2 2 2 2\\n\",\n    \"10\\n2 2 2 0 0 0 0 0 2 2\\n\",\n    \"11\\n2 2 2 2 0 2 2 2 2 2 2\\n\",\n    \"11\\n1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"16\\n0 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1\\n\",\n    \"17\\n1 1 4 1 1 0 1 1 1 1 0 1 0 1 0 0 1\\n\",\n    \"14\\n1 0 0 1 1 1 0 1 1 1 1 1 3 0\\n\",\n    \"9\\n1 1 1 2 1 1 1 1 1\\n\",\n    \"13\\n2 2 0 4 2 2 2 2 2 1 2 2 2\\n\",\n    \"19\\n2 2 3 2 0 0 1 1 2 0 0 2 1 2 2 2 0 2 2\\n\",\n    \"29\\n3 1 3 3 0 2 2 3 3 2 0 3 3 2 3 0 3 3 0 2 2 2 3 2 0 3 2 2 3\\n\",\n    \"27\\n0 1 2 2 3 3 2 0 2 3 2 0 2 3 2 2 2 2 3 3 1 3 2 3 1 2 2\\n\",\n    \"29\\n3 3 2 0 1 1 1 2 2 2 1 3 2 0 2 3 3 2 2 3 2 2 2 2 1 2 2 2 4\\n\",\n    \"13\\n4 1 1 4 1 1 1 1 1 1 1 1 1\\n\",\n    \"30\\n1 1 1 3 3 4 0 1 1 1 1 1 1 3 0 0 0 1 1 1 1 3 1 1 1 1 3 1 1 1\\n\",\n    \"32\\n1 4 4 3 1 4 4 4 1 1 1 1 1 4 1 1 1 4 1 1 1 1 2 1 1 4 4 1 1 1 1 4\\n\",\n    \"48\\n1 3 1 1 1 1 1 1 2 1 1 2 1 1 4 1 1 1 2 2 2 1 3 1 1 1 1 2 1 2 2 1 1 1 1 1 3 0 2 3 1 1 3 1 0 1 2 1\\n\",\n    \"49\\n2 2 1 2 2 2 2 2 2 2 2 2 1 2 1 3 4 2 2 2 2 4 1 1 2 1 2 2 2 2 2 4 0 0 2 0 1 1 2 1 2 2 2 2 4 4 2 2 1\\n\",\n    \"165\\n1 1 1 1 1 1 1 1 0 2 2 2 1 1 1 1 1 4 4 1 1 2 2 1 2 1 2 2 2 1 2 2 3 1 1 2 1 1 2 2 4 1 2 2 2 4 1 1 1 4 2 2 1 1 1 1 1 2 1 1 1 2 1 1 1 1 4 2 2 1 1 1 1 2 1 1 1 1 2 2 1 1 2 1 1 1 1 2 2 1 2 1 2 1 2 2 1 2 2 1 1 1 2 1 4 2 2 2 1 1 1 1 2 3 2 1 2 1 1 2 1 1 1 1 1 2 1 2 1 1 0 1 2 1 1 1 1 1 3 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 3 4 1 1 1\\n\",\n    \"197\\n1 4 4 4 1 4 1 1 0 1 4 4 1 1 1 1 1 1 1 1 1 1 1 4 1 1 1 1 1 4 1 1 1 1 1 4 1 1 1 2 1 1 4 4 4 4 4 4 1 1 1 4 1 4 4 4 4 4 1 1 1 1 1 4 4 1 4 0 4 1 4 4 1 4 4 4 2 1 1 4 4 2 1 1 1 4 1 4 1 4 4 4 1 1 4 4 4 1 1 0 1 4 1 4 0 4 3 1 1 1 4 1 4 4 4 1 4 1 4 3 1 4 4 4 1 1 4 0 4 1 1 4 1 4 4 1 4 1 1 1 4 1 4 1 1 3 4 1 4 4 1 1 1 1 4 1 1 3 4 1 1 0 1 4 4 1 4 4 1 4 4 1 1 0 2 1 4 1 4 1 1 1 1 1 4 4 1 1 0 4 2 4 1 4 1 4 4\\n\",\n    \"177\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 4 2 2 2 2 4 2 0 2 2 2 2 2 3 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 4 2 2 2 2 2 2 4 2 2 2 2 2 3 2 1 2 2 2 2 2 2 4 4 2 2 2 4 2 2 2 2 2 2 2 2 4 2 4 2 2 4 2 2 2 2 2 2 2 2 0 2 3 2 2 2 2 2 2 2 0 2 2 4 2 2 2 2 3 2 2\\n\",\n    \"166\\n2 3 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 3 2 2 2 2 2 2 2 2 2 4 2 2 2 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 2 2 2 2 2 2 2 2 2 3 2 0 2 0 3 2 2 2 0 2 0 2 2 2 2 2 2 3 0 2 2 2 2 2 3 3 2 2 2 3 2 2 2 3 3 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 3 2 2 2 2\\n\",\n    \"172\\n2 2 2 0 1 3 2 1 0 3 3 1 0 1 2 3 4 2 2 4 2 1 4 0 3 2 2 3 3 3 0 0 3 1 1 0 1 2 2 0 1 4 4 0 3 3 2 0 1 4 4 1 4 2 2 3 0 1 2 2 1 1 4 4 4 4 0 1 0 2 4 0 2 0 0 2 2 1 4 2 2 2 2 2 0 2 3 0 2 1 0 2 1 0 2 2 0 2 2 0 2 2 2 1 1 0 2 1 2 1 0 2 2 0 2 2 3 2 4 2 4 3 2 3 1 2 2 4 0 2 0 2 2 1 0 1 2 1 4 1 0 3 2 2 1 0 0 2 0 4 2 2 0 0 4 1 3 2 1 1 0 2 3 2 0 2 2 2 2 2 3 0\\n\",\n    \"141\\n2 1 1 1 1 1 4 2 3 1 1 1 1 1 1 4 1 1 1 1 1 1 1 4 4 1 1 1 1 2 1 4 1 1 1 1 1 1 1 1 1 4 1 1 1 1 1 2 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 1 3 1 1 1 1 1 4 4 1 3 4 1 1 1 1 1 1 1 1 1 4 2 1 0 1 1 4 1 1 1 1 2 1 0 1 1 2 1 1 1 1 4 4 1 2 4 4 1 1 3 1 1 1 3 1 1 4 4 1 1 1 4 1 1 1 1 1 1 2 0 1 0 0 1 0 4\\n\",\n    \"108\\n2 2 1 4 2 2 1 2 2 2 2 2 2 4 2 2 4 2 4 2 2 2 2 4 2 4 2 2 2 1 2 1 2 2 2 4 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 1 2 2 2 2 2 2 2 2 2 2 1 2 2 4 2 2 2 2 4 2 2 2 1 2 2 2 2 2 4 1 2 2\\n\",\n    \"138\\n3 1 3 1 3 3 3 1 1 1 1 1 1 3 3 1 1 1 3 3 1 1 3 1 1 1 1 1 1 1 3 3 3 1 3 1 1 1 1 1 3 1 1 3 1 3 1 3 1 1 1 1 3 1 3 1 1 3 1 1 1 3 1 1 1 1 1 1 1 1 3 1 1 1 1 3 1 3 1 3 3 3 3 3 3 1 1 1 3 1 1 3 1 1 1 1 1 1 1 1 3 1 1 3 3 1 3 3 1 3 1 1 1 3 1 1 1 1 1 1 3 1 1 1 1 3 1 1 1 3 1 1 3 1 1 3 1 1\\n\",\n    \"81\\n2 2 2 3 2 3 2 2 2 2 2 3 2 2 2 2 2 2 0 2 4 2 3 4 2 3 2 3 2 0 2 2 0 2 2 3 2 2 4 3 3 2 2 2 2 2 2 2 3 2 2 2 2 2 2 3 3 2 2 3 2 0 2 0 2 2 2 2 2 2 4 0 2 3 2 4 2 2 2 2 2\\n\",\n    \"115\\n2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 4 2 4 2 4 2 2 2 2 2 2 2 2 2 2 2 4 4 3 2 2 2 2 2 2 2 4 2 2 2 3 2 2 2 2 2 2 4 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 3 2 2 2 2 2 4 4 4 2 2\\n\",\n    \"146\\n1 1 1 1 1 4 1 1 0 1 4 4 1 4 1 1 1 1 1 4 1 1 1 1 1 1 1 4 1 1 1 1 4 1 4 1 1 1 0 1 4 1 4 1 4 4 1 1 1 1 1 1 1 1 1 4 4 1 1 4 1 4 4 4 1 1 4 4 1 4 1 1 1 1 0 1 1 1 1 1 1 4 1 4 1 1 4 1 1 4 4 4 1 1 4 1 1 1 1 1 1 1 4 1 1 1 4 1 4 1 1 1 1 1 1 1 4 1 1 4 4 4 1 1 1 1 1 1 1 4 1 1 1 1 4 1 4 1 1 1 4 4 4 4 1 1\\n\",\n    \"198\\n1 2 1 2 2 1 2 1 1 1 3 2 1 1 2 1 2 2 1 1 1 4 1 1 1 1 0 1 1 1 1 4 1 1 3 1 2 1 1 1 2 1 2 0 1 1 1 1 1 1 1 1 1 2 4 4 1 0 1 1 1 1 1 1 1 1 2 1 1 1 4 0 1 2 1 2 1 1 2 2 1 1 1 1 3 2 2 2 1 1 4 1 2 2 2 1 1 2 2 1 2 2 2 1 1 1 1 3 1 3 1 1 0 1 4 1 2 2 1 1 1 2 2 1 1 1 1 3 2 1 2 1 1 2 1 2 1 2 1 0 4 1 2 1 1 1 1 3 1 1 2 0 1 1 1 1 1 3 2 1 2 1 1 0 1 1 3 1 1 2 1 1 1 1 1 1 4 4 1 1 0 1 1 1 2 1 1 1 3 0 2 1 2 1 1 1 1 1\\n\",\n    \"200\\n4 1 1 4 3 1 1 3 1 1 1 4 3 3 3 2 3 3 1 3 3 4 4 2 2 2 3 1 2 2 2 3 1 1 3 2 2 4 1 3 4 3 2 4 2 2 4 2 2 3 4 2 3 2 2 1 2 4 4 2 4 4 2 3 2 4 1 4 2 1 3 4 1 3 1 1 2 1 4 1 3 3 3 4 1 4 4 1 4 4 2 3 1 3 3 2 2 1 4 2 4 4 3 3 3 1 3 4 3 1 1 1 1 4 2 1 2 3 2 2 2 3 2 1 2 1 1 1 2 4 1 3 3 3 2 3 3 2 3 4 4 3 3 4 3 2 1 4 1 4 2 1 3 2 4 4 1 4 1 1 1 3 2 3 4 2 2 4 1 4 4 4 4 3 1 3 1 4 3 2 1 2 1 1 2 4 1 3 3 4 4 2 2 4 4 3 2 1 2 4\\n\",\n    \"200\\n2 1 1 2 2 2 2 1 1 2 2 2 1 1 2 2 2 2 1 1 1 2 2 2 2 2 2 1 2 2 1 1 1 1 2 1 2 2 1 2 2 2 2 1 2 2 1 1 1 1 2 2 1 1 1 1 1 2 2 2 2 1 2 1 2 2 2 2 1 1 1 2 1 2 2 2 2 1 1 1 1 1 1 2 2 2 1 2 2 2 1 2 2 2 1 1 1 2 2 1 1 1 1 2 2 1 2 1 1 1 2 2 1 1 2 2 2 1 2 2 0 1 2 1 1 2 2 2 1 2 2 1 1 1 2 2 2 1 2 1 2 1 2 1 1 2 2 1 1 1 1 1 2 2 1 1 1 1 1 2 1 2 2 1 1 1 1 1 1 2 2 1 1 1 1 2 2 1 1 1 2 2 2 2 1 1 1 1 1 1 2 1 1 2 2 1 1 2 1 0\\n\",\n    \"6\\n1 1 1 2 2 1\\n\",\n    \"10\\n3 3 1 1 2 1 1 1 2 2\\n\",\n    \"10\\n1 1 1 2 1 2 2 1 2 1\\n\",\n    \"15\\n1 2 2 1 2 3 2 1 2 1 1 1 2 1 1\\n\",\n    \"13\\n2 1 2 2 1 0 1 2 1 1 1 1 2\\n\",\n    \"3\\n4 4 1\\n\",\n    \"5\\n4 4 4 4 1\\n\",\n    \"1\\n1\\n\",\n    \"4\\n1 1 3 4\\n\",\n    \"7\\n1 1 1 3 3 3 3\\n\",\n    \"6\\n2 2 2 4 4 4\\n\",\n    \"3\\n2 3 3\\n\",\n    \"9\\n1 1 1 1 3 3 3 3 3\\n\",\n    \"3\\n1 4 4\\n\",\n    \"3\\n3 3 2\\n\",\n    \"5\\n1 1 1 1 1\\n\",\n    \"2\\n1 1\\n\",\n    \"3\\n1 1 3\\n\",\n    \"4\\n2 2 2 2\\n\",\n    \"6\\n2 2 2 2 2 4\\n\",\n    \"3\\n2 2 4\\n\",\n    \"2\\n2 3\\n\",\n    \"2\\n1 4\\n\",\n    \"4\\n1 1 3 3\\n\",\n    \"4\\n3 3 3 2\\n\",\n    \"1\\n4\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"69\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"7\\n\",\n    \"7\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"7\\n\",\n    \"4\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"9\\n\",\n    \"7\\n\",\n    \"11\\n\",\n    \"12\\n\",\n    \"8\\n\",\n    \"14\\n\",\n    \"14\\n\",\n    \"24\\n\",\n    \"24\\n\",\n    \"84\\n\",\n    \"69\\n\",\n    \"103\\n\",\n    \"93\\n\",\n    \"53\\n\",\n    \"69\\n\",\n    \"61\\n\",\n    \"62\\n\",\n    \"38\\n\",\n    \"65\\n\",\n    \"68\\n\",\n    \"97\\n\",\n    \"50\\n\",\n    \"100\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"7\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"0\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}