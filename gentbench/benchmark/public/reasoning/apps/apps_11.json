{
    "problem": "You are an expert Python programmer, and here is your task: Sereja has an n \u00d7 m rectangular table a, each cell of the table contains a zero or a number one. Sereja wants his table to meet the following requirement: each connected component of the same values forms a rectangle with sides parallel to the sides of the table. Rectangles should be filled with cells, that is, if a component form a rectangle of size h \u00d7 w, then the component must contain exactly hw cells.\n\nA connected component of the same values is a set of cells of the table that meet the following conditions:  every two cells of the set have the same value;  the cells of the set form a connected region on the table (two cells are connected if they are adjacent in some row or some column of the table);  it is impossible to add any cell to the set unless we violate the two previous conditions. \n\nCan Sereja change the values of at most k cells of the table so that the table met the described requirement? What minimum number of table cells should he change in this case?\n\n\n-----Input-----\n\nThe first line contains integers n, m and k (1 \u2264 n, m \u2264 100;\u00a01 \u2264 k \u2264 10). Next n lines describe the table a: the i-th of them contains m integers a_{i}1, a_{i}2, ..., a_{im} (0 \u2264 a_{i}, j \u2264 1) \u2014 the values in the cells of the i-th row.\n\n\n-----Output-----\n\nPrint -1, if it is impossible to meet the requirement. Otherwise, print the minimum number of cells which should be changed.\n\n\n-----Examples-----\nInput\n5 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1\n\nOutput\n1\n\nInput\n3 4 1\n1 0 0 0\n0 1 1 1\n1 1 1 0\n\nOutput\n-1\n\nInput\n3 4 1\n1 0 0 1\n0 1 1 0\n1 0 0 1\n\nOutput\n0",
    "solution": "[\"read_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = []\\nfor y in a:\\n    x = 0\\n    for b in y:\\n        x = 2 * x + b\\n    xs.append(x)\\n\\ndef work(y):\\n    tot = 0\\n    for x in xs:\\n        c = bin(x ^ y).count('1')\\n        tot += min(c, m - c)\\n    return tot\\n\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\\n\", \"from functools import *\\n\\nread_line = lambda: [int(i) for i in input().split()]\\n\\nn, m, k = read_line()\\na = [read_line() for i in range(n)]\\nif n < m:\\n    n, m, a = m, n, list(zip(*a))\\n\\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\\nminm = lambda a: min(a, m - a)\\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\\n\\nprint(ans if ans <= k else -1)\\n\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n\",\n    \"3 4 1\\n1 0 0 0\\n0 1 1 1\\n1 1 1 0\\n\",\n    \"3 4 1\\n1 0 0 1\\n0 1 1 0\\n1 0 0 1\\n\",\n    \"8 1 4\\n0\\n0\\n0\\n1\\n0\\n1\\n1\\n0\\n\",\n    \"3 10 7\\n0 1 0 0 1 0 1 0 0 0\\n0 0 1 1 0 0 0 1 0 1\\n1 0 1 1 1 0 1 1 0 0\\n\",\n    \"4 9 7\\n0 0 0 1 0 1 1 0 0\\n1 1 1 0 0 0 0 1 1\\n1 1 0 0 1 1 0 1 0\\n0 0 0 1 0 1 0 0 0\\n\",\n    \"9 2 5\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 0\\n1 1\\n1 0\\n1 1\\n\",\n    \"10 7 8\\n1 0 1 0 1 1 0\\n0 1 0 1 0 0 1\\n1 0 1 0 1 1 0\\n0 1 0 1 0 0 1\\n1 0 1 0 1 1 0\\n1 0 1 0 1 1 0\\n1 0 1 0 1 1 0\\n1 0 1 0 1 1 0\\n0 1 0 1 0 0 1\\n0 1 0 1 0 0 1\\n\",\n    \"9 2 10\\n1 0\\n0 1\\n1 0\\n1 1\\n0 1\\n1 0\\n1 0\\n1 1\\n0 1\\n\",\n    \"4 6 3\\n1 0 0 1 0 0\\n0 1 1 0 1 1\\n1 0 0 1 0 0\\n0 1 1 0 1 1\\n\",\n    \"4 4 5\\n1 0 1 0\\n0 1 0 1\\n0 1 0 1\\n0 1 0 0\\n\",\n    \"6 4 10\\n0 1 0 0\\n1 1 1 0\\n0 1 1 0\\n0 1 0 0\\n0 1 0 0\\n0 0 0 0\\n\",\n    \"1 9 2\\n1 0 1 0 0 0 0 1 0\\n\",\n    \"3 63 4\\n0 0 0 0 0 1 0 0 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 1 0 0 1 1 0 1 1 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 1 0 0 0 1 0 1 1 1 1 1\\n1 1 0 1 1 0 1 1 0 1 0 0 1 1 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 0 0 0 1 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 1 1 0 1 1 1 1 1 0 1 1 0 0\\n1 1 1 1 1 0 1 1 0 1 0 0 1 1 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 0 0 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 0\\n\",\n    \"1 40 4\\n1 0 0 0 1 1 1 0 1 1 0 0 1 1 0 0 1 1 0 1 1 1 1 0 1 0 0 1 1 0 0 1 0 0 0 1 1 1 1 0\\n\",\n    \"1 12 7\\n0 0 0 1 0 0 1 1 1 1 0 1\\n\",\n    \"4 35 6\\n1 1 0 1 1 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 0 0 0 0\\n0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 1 1 1 0 0 1 0 1 1 1 1 1 1\\n1 0 0 1 1 0 0 1 1 0 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 0 0 0 0\\n0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 1 1 1 0 0 1 0 1 1 1 1 1 1\\n\",\n    \"5 38 9\\n0 1 0 0 1 1 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 1 0 0 0\\n0 1 0 0 1 1 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 1 0 1 1 0 0 0 1 1 0 1 0 0 1 0 0 0\\n1 0 1 1 0 0 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 0 1 0 0 0 1 1 1 0 1 0 1 1 0 1 1 1\\n1 0 1 1 0 0 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 1\\n1 0 1 1 0 0 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 1\\n\",\n    \"2 75 7\\n0 0 1 0 0 0 1 1 0 1 1 1 0 1 1 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 1 1 1 0 0 0 1 1 1 0 0 0 1 0 0 0 0 1 1 1 1 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 1 1\\n1 1 0 1 1 1 0 0 1 0 0 0 1 0 0 1 0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 1 0 0 0 1 1 1 0 0 0 1 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 0 0 0 1\\n\",\n    \"21 10 8\\n1 1 1 0 0 1 1 1 1 1\\n1 1 1 0 0 1 1 1 1 1\\n1 1 1 0 0 1 1 1 1 1\\n1 1 1 0 0 1 1 1 1 1\\n1 1 1 0 0 1 1 1 1 1\\n0 0 1 1 1 0 0 0 0 0\\n0 0 0 1 1 0 0 0 0 0\\n1 1 1 0 0 1 1 1 1 1\\n0 0 0 1 1 0 0 0 0 0\\n1 1 1 0 0 1 1 1 1 1\\n1 1 1 0 0 1 1 1 1 1\\n0 0 0 1 1 0 0 0 0 0\\n1 0 1 0 0 1 1 1 1 1\\n0 1 0 1 1 0 0 0 0 0\\n0 0 0 1 1 0 0 0 0 0\\n0 0 0 1 1 0 0 0 0 0\\n0 0 0 1 1 0 0 0 0 0\\n1 1 1 0 1 1 1 1 1 1\\n0 0 0 0 1 0 0 0 0 0\\n1 1 1 0 1 1 1 1 1 1\\n1 1 1 0 0 1 1 1 1 1\\n\",\n    \"11 9 9\\n0 0 0 0 0 0 1 1 0\\n0 0 0 0 0 0 1 1 0\\n0 0 0 0 0 0 1 0 0\\n1 1 1 1 1 1 0 0 1\\n1 1 1 1 1 1 0 0 1\\n1 1 1 1 1 1 0 0 1\\n0 0 0 0 0 0 1 1 0\\n0 0 0 0 0 0 1 1 0\\n0 0 0 0 0 0 1 1 0\\n1 1 1 1 1 1 0 0 1\\n0 0 0 0 0 0 1 1 0\\n\",\n    \"37 4 7\\n1 0 0 1\\n0 1 0 1\\n0 1 1 1\\n1 0 0 0\\n0 1 1 1\\n0 1 1 1\\n1 0 1 0\\n1 0 0 0\\n1 0 0 0\\n1 0 0 0\\n0 1 1 1\\n0 1 1 1\\n1 0 0 0\\n0 1 1 0\\n0 1 1 1\\n0 1 1 1\\n0 1 1 0\\n1 0 0 0\\n1 0 0 0\\n0 1 1 1\\n0 1 1 1\\n1 0 0 0\\n1 1 1 1\\n1 1 1 1\\n1 1 0 0\\n0 1 1 1\\n0 1 0 1\\n0 1 1 1\\n0 1 1 1\\n1 1 0 0\\n1 0 0 0\\n0 0 1 1\\n0 1 1 1\\n1 0 0 0\\n1 0 0 0\\n1 0 0 0\\n0 0 0 0\\n\",\n    \"1 1 1\\n1\\n\",\n    \"2 2 1\\n1 1\\n1 0\\n\",\n    \"3 3 1\\n1 1 1\\n1 0 1\\n1 1 0\\n\",\n    \"3 3 2\\n1 1 1\\n1 0 1\\n1 1 0\\n\",\n    \"9 9 10\\n0 0 0 0 0 0 1 0 0\\n1 1 1 1 1 1 1 1 1\\n0 0 0 0 0 0 0 0 0\\n1 1 1 1 1 1 1 1 1\\n1 1 1 0 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n0 0 0 0 1 0 1 0 0\\n0 0 0 0 1 0 0 0 0\\n0 0 0 0 1 0 0 0 0\\n\",\n    \"9 9 10\\n0 0 0 0 0 0 1 0 1\\n1 1 1 1 1 1 1 1 1\\n0 0 0 0 0 0 1 0 0\\n1 1 1 1 1 0 1 1 1\\n1 1 1 0 0 1 1 1 1\\n1 1 1 0 1 1 1 1 1\\n0 0 1 0 1 0 1 0 0\\n0 0 0 0 1 0 0 0 0\\n0 0 0 0 1 0 0 0 0\\n\",\n    \"10 10 10\\n1 0 0 0 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0 0 0\\n0 0 1 0 0 0 0 0 0 0\\n0 0 0 1 0 0 0 0 0 0\\n0 0 0 0 1 0 0 0 0 0\\n0 0 0 0 0 1 0 0 0 0\\n0 0 0 0 0 0 1 0 0 0\\n0 0 0 0 0 0 0 1 0 0\\n0 0 0 0 0 0 0 0 1 0\\n0 0 0 0 0 0 0 0 0 1\\n\",\n    \"10 10 9\\n0 0 0 0 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0 0 0\\n0 0 1 0 0 0 0 0 0 0\\n0 0 0 1 0 0 0 0 0 0\\n0 0 0 0 1 0 0 0 0 0\\n0 0 0 0 0 1 0 0 0 0\\n0 0 0 0 0 0 1 0 0 0\\n0 0 0 0 0 0 0 1 0 0\\n0 0 0 0 0 0 0 0 1 0\\n0 0 0 0 0 0 0 0 0 1\\n\",\n    \"10 10 8\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 1 0 0 0 0 0 0 0\\n0 0 0 1 0 0 0 0 0 0\\n0 0 0 0 1 0 0 0 0 0\\n0 0 0 0 0 1 0 0 0 0\\n0 0 0 0 0 0 1 0 0 0\\n0 0 0 0 0 0 0 1 0 0\\n0 0 0 0 0 0 0 0 1 0\\n0 0 0 0 0 0 0 0 0 1\\n\",\n    \"10 10 7\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 1 0 0 0 0 0 0\\n0 0 0 0 1 0 0 0 0 0\\n0 0 0 0 0 1 0 0 0 0\\n0 0 0 0 0 0 1 0 0 0\\n0 0 0 0 0 0 0 1 0 0\\n0 0 0 0 0 0 0 0 1 0\\n0 0 0 0 0 0 0 0 0 1\\n\",\n    \"10 10 6\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 1 0 0 0 0 0\\n0 0 0 0 0 1 0 0 0 0\\n0 0 0 0 0 0 1 0 0 0\\n0 0 0 0 0 0 0 1 0 0\\n0 0 0 0 0 0 0 0 1 0\\n0 0 0 0 0 0 0 0 0 1\\n\",\n    \"10 10 1\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 1\\n\",\n    \"4 4 6\\n1 1 1 0\\n1 1 0 1\\n1 0 1 1\\n0 1 1 1\\n\",\n    \"100 2 10\\n0 1\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n0 1\\n0 1\\n1 0\\n1 0\\n0 1\\n1 0\\n0 1\\n0 1\\n1 0\\n0 1\\n0 1\\n1 0\\n1 0\\n1 0\\n0 1\\n1 0\\n0 1\\n1 0\\n1 0\\n1 0\\n0 1\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n1 0\\n0 1\\n0 1\\n1 0\\n1 0\\n0 1\\n0 1\\n0 1\\n1 0\\n1 0\\n0 1\\n0 1\\n0 1\\n0 1\\n1 0\\n0 1\\n1 0\\n1 0\\n0 1\\n1 0\\n1 0\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n1 0\\n0 1\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n0 1\\n0 1\\n0 1\\n1 0\\n0 1\\n1 0\\n1 0\\n1 0\\n0 1\\n1 0\\n1 0\\n1 0\\n1 0\\n0 1\\n0 1\\n0 1\\n0 1\\n1 0\\n1 0\\n1 0\\n0 1\\n1 0\\n0 1\\n0 1\\n0 1\\n0 1\\n1 0\\n\",\n    \"5 5 5\\n0 1 1 1 1\\n1 0 1 1 1\\n1 1 0 1 1\\n1 1 1 0 1\\n1 1 1 1 0\\n\",\n    \"5 5 10\\n1 1 1 1 0\\n1 1 1 0 1\\n1 1 0 1 1\\n1 0 1 1 1\\n0 1 1 1 1\\n\",\n    \"5 5 5\\n1 1 1 1 0\\n1 1 1 0 1\\n1 1 0 1 1\\n1 0 1 1 1\\n0 1 1 1 1\\n\",\n    \"4 4 4\\n0 1 1 1\\n1 0 1 1\\n1 1 0 1\\n1 1 1 0\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"-1\\n\",\n    \"10\\n\",\n    \"9\\n\",\n    \"8\\n\",\n    \"7\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"4\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}