{
    "problem": "You are an expert Python programmer, and here is your task: You are given two strings $s$ and $t$. The string $s$ consists of lowercase Latin letters and at most one wildcard character '*', the string $t$ consists only of lowercase Latin letters. The length of the string $s$ equals $n$, the length of the string $t$ equals $m$.\n\nThe wildcard character '*' in the string $s$ (if any) can be replaced with an arbitrary sequence (possibly empty) of lowercase Latin letters. No other character of $s$ can be replaced with anything. If it is possible to replace a wildcard character '*' in $s$ to obtain a string $t$, then the string $t$ matches the pattern $s$.\n\nFor example, if $s=$\"aba*aba\" then the following strings match it \"abaaba\", \"abacaba\" and \"abazzzaba\", but the following strings do not match: \"ababa\", \"abcaaba\", \"codeforces\", \"aba1aba\", \"aba?aba\".\n\nIf the given string $t$ matches the given string $s$, print \"YES\", otherwise print \"NO\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the length of the string $s$ and the length of the string $t$, respectively.\n\nThe second line contains string $s$ of length $n$, which consists of lowercase Latin letters and at most one wildcard character '*'.\n\nThe third line contains string $t$ of length $m$, which consists only of lowercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if you can obtain the string $t$ from the string $s$. Otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n6 10\ncode*s\ncodeforces\n\nOutput\nYES\n\nInput\n6 5\nvk*cup\nvkcup\n\nOutput\nYES\n\nInput\n1 1\nv\nk\n\nOutput\nNO\n\nInput\n9 6\ngfgf*gfgf\ngfgfgf\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example a wildcard character '*' can be replaced with a string \"force\". So the string $s$ after this replacement is \"codeforces\" and the answer is \"YES\".\n\nIn the second example a wildcard character '*' can be replaced with an empty string. So the string $s$ after this replacement is \"vkcup\" and the answer is \"YES\".\n\nThere is no wildcard character '*' in the third example and the strings \"v\" and \"k\" are different so the answer is \"NO\".\n\nIn the fourth example there is no such replacement of a wildcard character '*' that you can obtain the string $t$ so the answer is \"NO\".",
    "solution": "[\"#!/usr/bin/env python3\\ndef solve(n, m, s, t):\\n    if '*' in s:\\n        l, r = s.split('*')\\n        return len(l) + len(r) <= len(t) and t.startswith(l) and t.endswith(r)\\n    else:\\n        return s == t\\n\\nn, m = list(map(int, input().split()))\\ns = input()\\nt = input()\\nprint(['NO', 'YES'][solve(n, m, s, t)])\\n\", \"input()\\na = input()\\nb = input()\\n\\nif '*' in a:\\n    x, y = a.split('*')\\n    if b.startswith(x) and b.endswith(y) and len(b) >= (len(x) + len(y)):\\n        print('YES')\\n    else:\\n        print('NO')\\nelse:\\n    print('YES' if a == b else 'NO')\\n\", \"n, m = list(map(int, input().split()))\\ns = input()\\nt = input()\\n\\nif '*' in s:\\n    a, b = s.split('*')\\n    if len(a) + len(b) <= len(t) and t.startswith(a) and t.endswith(b):\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\nelse:\\n    if s == t:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n\", \"def ii():\\n    return int(input())\\ndef mi():\\n    return map(int, input().split())\\ndef li():\\n    return list(mi())\\n\\nn, m = mi()\\ns = input().strip()\\nt = input().strip()\\nok = 0\\nif '*' not in s:\\n    ok = s == t\\nelse:\\n    i = s.index('*')\\n    l = s[:i]\\n    r = s[i+1:]\\n    if t.startswith(l):\\n        t = t[i:]\\n        if t.endswith(r):\\n            ok = 1\\nprint('YES' if ok else 'NO')\", \"def solve(s,t):\\n    ss=s.split('*')\\n    if len(ss)==1:\\n        return ss[0]==t\\n    else:\\n        return t.startswith(ss[0]) and t.endswith(ss[1]) and len(t)>=len(s)-1\\n\\ninput()\\ns=input()\\nt=input()\\nif solve(s,t):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"n, m = list(map(int, input().split()))\\ns = input()\\nt = input()\\nk = s.find(\\\"*\\\")\\nif k == -1 or n > m + 1:\\n    if s == t:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\nelse:\\n    if s[:k] == t[:k] and s[k+1:] == t[m - (n - k - 1):]:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n\", \"input()\\ns = input()\\nt = input()\\nif s.count('*'):\\n  for i in range(len(s)):\\n    if s[i] == '*':\\n      print('YES' if s[0:i] == t[0:i] and s[i + 1:] == t[len(t) - len(s[i + 1:]):] and i <= len(t) - len(s[i + 1:]) else 'NO')\\n      return\\nelse:\\n  print('YES' if s == t else 'NO')\\n\", \"n,m=list(map(int,input().strip().split()))\\nr=input()\\ns=input()\\nif \\\"*\\\" not in r:\\n\\tif r==s:\\n\\t\\tprint (\\\"YES\\\")\\n\\telse:\\n\\t\\tprint (\\\"NO\\\")\\n\\treturn\\nr1,r2=r.split(\\\"*\\\")\\nif len(s)<(len(r1)+len(r2)):\\n\\tprint (\\\"NO\\\")\\nelse:\\n\\tl1=len(r1)\\n\\tl2=len(r2)\\n\\tif s[0:l1]==r1 and s[len(s)-l2:]==r2:\\n\\t\\tprint (\\\"YES\\\")\\n\\telse:\\n\\t\\tprint (\\\"NO\\\")\\n\\n\\n\", \"n, m = list(map(int, input().split()))\\ns = input()\\nt = input()\\n\\nif '*' not in s:\\n\\tif s == t:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\ta = s.split('*')\\n\\tif len(t) >= len(s) - 1 and t[:len(a[0])] == a[0] and (len(a[1]) == 0 or t[-len(a[1]):] == a[1]):\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\", \"n,m = list(map(int,input().split()))\\ns = input()\\nt = input()\\nx = s.find('*')\\nif(s==t):\\n    print('YES')\\nelif(x==-1):\\n    print('NO')\\nelif(n-1>m):\\n    print('NO')\\nelse:\\n    if(s[:x]==t[:x]):\\n        z = s[x+1:]\\n        z = z[::-1]\\n        p = t[::-1]\\n        p = p[:len(z)]\\n        if(p==z):\\n            print('YES')\\n        else:\\n            print('NO')\\n    else:\\n        print('NO')\\n\", \"n, m = map(int, input().split())\\ns = input()\\nt = input()\\nif len(s) - 1 > m:\\n    print('NO')\\nelif s == '*':\\n    print('YES')\\nelif '*' not in s:\\n    if s == t:\\n        print('YES')\\n    else:\\n        print('NO')\\nelse:\\n    for i in range(len(s)):\\n        if s[i] == '*':\\n            pos = i\\n            break\\n    if s[0 : pos] == t[0 : pos] and s[pos + 1:] == t[m - (n - pos) + 1:]:\\n        print('YES')\\n    else:\\n        print('NO')\", \"n = input()\\ns = input()\\nt = input()\\np = s.find('*')\\nif (p == -1):\\n\\tif (s == t):\\n\\t\\tprint(\\\"YES\\\")\\n\\telse:\\n\\t\\tprint(\\\"NO\\\")\\n\\treturn\\nsl = len(s) - p - 1\\nif (s[:p] == t[:p] and t[len(t) - sl:] == s[p + 1:] and len(t) >= len(s) - 1):\\n\\tprint(\\\"YES\\\")\\nelse:\\n\\tprint(\\\"NO\\\")\", \"N, M = list(map(int, input().split()))\\nS = input().split('*')\\nT = input()\\n\\nif (len(S) == 1):\\n  print(\\\"YES\\\" if S[0] == T else \\\"NO\\\")\\nelse:\\n  print(\\\"YES\\\" if S[0] == T[:len(S[0])] and S[1] == T[len(T) - len(S[1]):] and len(S[0]) + len(S[1]) <= len(T) else \\\"NO\\\")\\n\", \"n, m = list(map(int, input().split()))\\ns = input()\\nt = input()\\nif '*' not in s:\\n    print('YES' if s == t else 'NO')\\nelse:\\n    i = s.index('*')\\n    print('YES' if i <= m and s[:i] == t[:i] and n - 1 - i <= m - i and s[i + 1:] == t[m - (n - i - 1):] else 'NO')\\n\", \"input()\\ns=input()\\nt=input()\\nif \\\"*\\\" not in s:\\n    print(\\\"YES\\\" if s==t else \\\"NO\\\")\\nelse:\\n    l,r=s.split(\\\"*\\\")\\n    if t.startswith(l) and t.endswith(r) and len(l) + len(r) <= len(t):\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\", \"input()\\ns = input()\\nt = input()\\n\\ns = ' ' + s + ' '\\nt = ' ' + t + ' '\\n\\nif '*' in s:\\n\\tidx = s.find('*')\\n\\tprefix, suffix = s[:idx], s[idx+1:]\\n\\tprint('YES' if len(s)-1 <= len(t) and prefix == t[:len(prefix)] and suffix == t[-len(suffix):] else 'NO')\\nelse:\\n\\tprint('YES' if s == t else 'NO')\", \"n, m = map(int, input().split())\\ns = input()\\nt = input()\\nif '*' not in s:\\n    if s == t:\\n        print('YES')\\n    else:\\n        print('NO')\\n    return\\nind = s.find('*')\\nif s[:ind] == t[:ind] and s[ind + 1:] == t[m - n + ind + 1:] and m - n + ind + 1 >= ind:\\n    print('YES')\\nelse:\\n    print('NO')\", \"USE_STDIO = False\\n\\nif not USE_STDIO:\\n    try: import mypc\\n    except: pass\\n\\ndef main():\\n    n, m = list(map(int, input().split(' ')))\\n    s = input()\\n    t = input()\\n\\n    i = s.find('*')\\n    if i < 0: return s == t\\n    return len(t) >= len(s) - 1 and s[:i] == t[:i] and s[i+1:] == t[len(t)-len(s)+i+1:]\\n\\ndef __starting_point():\\n    print(['NO', 'YES'][main()])\\n\\n\\n\\n\\n__starting_point()\", \"n, m = map(int, input().split())\\ns, t = input(), input()\\nif '*' not in s:\\n    if s == t:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n    return\\ns1 = s[:s.find('*')]\\ns2 = s[s.find('*') + 1:]\\nif t[:len(s1)] == s1 and t[len(t) - len(s2):] == s2 and len(s1) + len(s2) <= len(t):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"n, m = [int(x) for x in input().split()]\\na = input()\\nb = input()\\nif \\\"*\\\" not in a:\\n    if a == b:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\nelse:\\n    part1,part2 = a.split(\\\"*\\\")\\n    if b.startswith(part1) and b.endswith(part2) and len(part1)+len(part2)<=len(b):\\n        print(\\\"YES\\\")\\n    else: \\n        print(\\\"NO\\\")\", \"n, m = (int(x) for x in input().split())\\na = input()\\nb = input()\\nif '*' not in a:\\n    if a == b:\\n        print('YES')\\n    else:\\n        print('NO')\\n    quit()\\nl, r = a.split('*')\\nif len(b) >= len(a) - 1:\\n    if l == b[:len(l)] and r == b[len(b) - len(r):]:\\n        print('YES')\\n    else:\\n        print('NO')\\nelse:\\n    print('NO')\\n\", \"# from math import ceil\\n#from sys import stdout\\n\\nt = 1#int(input())\\nfor test in range(1,t+1):\\n    n,m = (list(map(int, input().split())))\\n    s = input()\\n    t = input()\\n    if n-m>1:\\n    \\tprint(\\\"NO\\\")\\n    \\tcontinue\\n    tmp = s.find('*')\\n    if tmp == -1:\\n    \\tif s==t:\\n    \\t\\tprint(\\\"YES\\\")\\n    \\telse:\\n    \\t\\tprint(\\\"NO\\\")\\n    else:\\n    \\tif s[:tmp]==t[:tmp] and s[tmp+1:]==t[m-(n-tmp-1):]:\\n    \\t\\tprint(\\\"YES\\\")\\n    \\telse:\\n    \\t\\tprint(\\\"NO\\\")\\n\", \"n, m = map(int,input().split())\\ns = input()\\nt = input()\\nindex = s.find('*')\\nif n-m>1:\\n    print('NO')\\nelse:\\n#print(s[:index],t[:index])\\n#print(s[index+1:],t[m-len(s[index+1:]):])\\n    if s[:index] == t[:index] and s[index+1:] == t[m-len(s[index+1:]):]:\\n        print('YES')\\n    else:\\n        print('NO')\", \"n,m=list(map(int,input().split()))\\ns=input()\\nt=input()\\ndef f():\\n    if \\\"*\\\" not in s:\\n        return s==t\\n    if n-1>m:\\n        return False\\n    x=s.find(\\\"*\\\")\\n    return s[:x]==t[:x] and s[x+1:]==t[m-(n-1-x):]\\nif f():\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n,m=map(int,input().split())\\ns=input()\\nt=input()\\nk=-1\\nfor i in range(n):\\n    if s[i]=='*':\\n        k=i\\n        break\\nif s[0:i]==t[0:i] and s[i+1:n]==t[m-n+i+1:m]:\\n    if (k==-1 and s!=t) or (n>m+1):\\n        print('NO')\\n    else:\\n        print('YES')\\nelse:\\n    print('NO')\"]",
    "test": "{\n  \"inputs\": [\n    \"6 10\\ncode*s\\ncodeforces\\n\",\n    \"6 5\\nvk*cup\\nvkcup\\n\",\n    \"1 1\\nv\\nk\\n\",\n    \"9 6\\ngfgf*gfgf\\ngfgfgf\\n\",\n    \"5 102\\neyw*y\\neywsnxcwslfyiqbbeoaawtmioksfdndptxxcwzfmrpcixjbzvicijofjrbcvzaedglifuoczgjlqylddnsvsjfmfsccxbdveqguyfk\\n\",\n    \"1 17\\n*\\nthisisabadproblem\\n\",\n    \"3 2\\nr*p\\nrp\\n\",\n    \"5 2\\ns*pjd\\nsd\\n\",\n    \"4 2\\nlq*e\\nle\\n\",\n    \"6 2\\nmv*mqs\\nms\\n\",\n    \"4 4\\na*ba\\nayba\\n\",\n    \"3 4\\na*o\\naqro\\n\",\n    \"2 4\\n*a\\nbkga\\n\",\n    \"5 4\\nzem*o\\nzemo\\n\",\n    \"7 4\\nec*aqro\\naqro\\n\",\n    \"4 4\\nb*af\\nbkga\\n\",\n    \"1 1\\n*\\na\\n\",\n    \"1 1\\na\\na\\n\",\n    \"1 1\\nb\\na\\n\",\n    \"2 1\\n*z\\nz\\n\",\n    \"6 4\\ntes*st\\ntest\\n\",\n    \"3 3\\naaa\\naaa\\n\",\n    \"3 5\\naaa\\naaaaa\\n\",\n    \"7 7\\nabacaba\\nabacaba\\n\",\n    \"2 3\\naa\\naaa\\n\",\n    \"3 4\\naaa\\naaaa\\n\",\n    \"1 10\\na\\naaaaaaaaaa\\n\",\n    \"2 2\\nab\\nac\\n\",\n    \"2 2\\na*\\nba\\n\",\n    \"3 2\\nkkk\\nkk\\n\",\n    \"3 2\\naaa\\naa\\n\",\n    \"5 4\\nab*ba\\naaba\\n\",\n    \"2 1\\na*\\na\\n\",\n    \"2 2\\naa\\naa\\n\",\n    \"4 5\\nneko\\nnekol\\n\",\n    \"3 6\\naaa\\naaaaaa\\n\",\n    \"4 5\\naaaa\\naaaaa\\n\",\n    \"3 2\\na*b\\nac\\n\",\n    \"3 3\\nabc\\nabc\\n\",\n    \"5 4\\nab*ba\\nacca\\n\",\n    \"4 1\\naaa*\\na\\n\",\n    \"7 7\\nabc*def\\nabcddzf\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}