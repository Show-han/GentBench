{
    "problem": "You are an expert Python programmer, and here is your task: There are n students at Berland State University. Every student has two skills, each measured as a number: a_{i} \u2014 the programming skill and b_{i} \u2014 the sports skill.\n\nIt is announced that an Olympiad in programming and sports will be held soon. That's why Berland State University should choose two teams: one to take part in the programming track and one to take part in the sports track.\n\nThere should be exactly p students in the programming team and exactly s students in the sports team. A student can't be a member of both teams.\n\nThe university management considers that the strength of the university on the Olympiad is equal to the sum of two values: the programming team strength and the sports team strength. The strength of a team is the sum of skills of its members in the corresponding area, so the strength of the programming team is the sum of all a_{i} and the strength of the sports team is the sum of all b_{i} over corresponding team members.\n\nHelp Berland State University to compose two teams to maximize the total strength of the university on the Olympiad.\n\n\n-----Input-----\n\nThe first line contains three positive integer numbers n, p and s (2 \u2264 n \u2264 3000, p + s \u2264 n) \u2014 the number of students, the size of the programming team and the size of the sports team.\n\nThe second line contains n positive integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 3000), where a_{i} is the programming skill of the i-th student.\n\nThe third line contains n positive integers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 3000), where b_{i} is the sports skill of the i-th student.\n\n\n-----Output-----\n\nIn the first line, print the the maximum strength of the university on the Olympiad. In the second line, print p numbers \u2014 the members of the programming team. In the third line, print s numbers \u2014 the members of the sports team.\n\nThe students are numbered from 1 to n as they are given in the input. All numbers printed in the second and in the third lines should be distinct and can be printed in arbitrary order.\n\nIf there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n5 2 2\n1 3 4 5 2\n5 3 2 1 4\n\nOutput\n18\n3 4 \n1 5 \n\nInput\n4 2 2\n10 8 8 3\n10 7 9 4\n\nOutput\n31\n1 2 \n3 4 \n\nInput\n5 3 1\n5 2 5 1 7\n6 3 1 6 3\n\nOutput\n23\n1 3 5 \n4",
    "solution": "[\"#!/usr/bin/env python3\\nfrom itertools import accumulate\\nfrom heapq import heappop, heappush\\n\\n\\ndef top(ppl_indices, vals, start):\\n    Q = []\\n    res = [0 for i in range(len(ppl_indices))]\\n    for k, idx in enumerate(ppl_indices):\\n        heappush(Q, -vals[idx])\\n        if k >= start:\\n            res[k] = res[k-1] - heappop(Q)\\n\\n    return res\\n\\n\\nn, a_size, b_size = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\n\\nconversion_gain = [y - x for x, y in zip(a, b)]\\n\\nordered_by_a = sorted(zip(a, list(range(n))), reverse=True)\\nprefix_sums_a = list(accumulate([x for x, y in ordered_by_a]))\\nconversions = top([idx for val, idx in ordered_by_a], conversion_gain, a_size)\\nrest_of_bs = list(reversed(top([idx for val, idx in reversed(ordered_by_a[a_size:])],\\n                               b, n - a_size - b_size))) + [0]\\n\\nsol, top_k = max([(prefix_a + convert + add_bs, idx)\\n                  for idx, (prefix_a, convert, add_bs)\\n                  in enumerate(zip(prefix_sums_a[a_size-1:a_size+b_size],\\n                                   conversions[a_size-1:a_size+b_size],\\n                                   rest_of_bs))])\\ntop_k += a_size\\n\\nconversion_ordered_by_a = [(conversion_gain[idx], idx) for val, idx in ordered_by_a]\\nconversion_sorted = sorted(conversion_ordered_by_a[:top_k], reverse=True)\\nconverted = [idx for val, idx in conversion_sorted[:top_k-a_size]]\\nteam_a = list(set(idx for val, idx in ordered_by_a[:top_k]) - set(converted))\\n\\nb_ordered_by_a = [(b[idx], idx) for val, idx in ordered_by_a]\\nb_sorted = sorted(b_ordered_by_a[top_k:], reverse=True)\\nteam_b = converted + [idx for val, idx in b_sorted[:(a_size+b_size) - top_k]]\\n\\nprint(sol)\\nprint(\\\" \\\".join(str(idx+1) for idx in team_a))\\nprint(\\\" \\\".join(str(idx+1) for idx in team_b))\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\\n\",\n    \"4 2 2\\n10 8 8 3\\n10 7 9 4\\n\",\n    \"5 3 1\\n5 2 5 1 7\\n6 3 1 6 3\\n\",\n    \"2 1 1\\n100 101\\n1 100\\n\",\n    \"4 1 1\\n100 100 1 50\\n100 100 50 1\\n\",\n    \"2 1 1\\n3 2\\n3 2\\n\",\n    \"2 1 1\\n9 6\\n3 10\\n\",\n    \"2 1 1\\n1 17\\n5 20\\n\",\n    \"3 1 1\\n5 4 2\\n1 5 2\\n\",\n    \"3 1 1\\n10 5 5\\n9 1 4\\n\",\n    \"3 1 1\\n17 6 2\\n2 19 19\\n\",\n    \"4 1 2\\n4 2 4 5\\n3 2 5 3\\n\",\n    \"4 1 2\\n8 7 8 6\\n4 5 10 9\\n\",\n    \"4 1 3\\n6 15 3 9\\n2 5 6 8\\n\",\n    \"5 1 1\\n3 2 5 5 1\\n3 1 5 4 2\\n\",\n    \"5 2 1\\n9 10 1 7 10\\n6 10 8 6 3\\n\",\n    \"5 2 3\\n10 4 19 8 18\\n6 16 11 15 3\\n\",\n    \"6 2 1\\n4 3 4 3 3 2\\n4 4 3 5 3 5\\n\",\n    \"6 1 4\\n7 9 3 5 9 2\\n10 9 10 10 10 1\\n\",\n    \"6 3 3\\n15 12 12 19 1 7\\n7 2 20 10 4 12\\n\",\n    \"7 2 1\\n2 2 2 2 2 1 2\\n4 2 5 5 2 5 1\\n\",\n    \"7 5 1\\n1 8 8 6 4 3 9\\n4 4 5 8 5 7 1\\n\",\n    \"7 2 3\\n15 1 5 17 16 9 1\\n9 8 5 9 18 14 3\\n\",\n    \"8 3 4\\n5 5 4 2 4 1 3 2\\n2 5 3 3 2 4 5 1\\n\",\n    \"8 5 1\\n2 4 1 5 8 5 9 7\\n10 2 3 1 6 3 8 6\\n\",\n    \"8 1 1\\n19 14 17 8 16 14 11 16\\n12 12 10 4 3 11 10 8\\n\",\n    \"9 1 1\\n3 2 3 5 3 1 5 2 3\\n1 4 5 4 2 5 4 4 5\\n\",\n    \"9 2 4\\n4 3 3 1 1 10 9 8 5\\n5 4 4 6 5 10 1 5 5\\n\",\n    \"9 2 2\\n20 7 6 7 19 15 2 7 8\\n15 15 1 13 20 14 13 18 3\\n\",\n    \"10 5 2\\n4 5 3 1 1 5 2 4 1 5\\n3 4 2 2 2 3 2 1 2 4\\n\",\n    \"10 8 2\\n5 2 8 6 7 5 2 4 1 10\\n4 6 2 1 9 2 9 4 5 6\\n\",\n    \"10 3 1\\n7 11 11 3 19 10 18 7 9 20\\n13 9 19 15 13 14 7 12 15 16\\n\",\n    \"11 4 2\\n2 2 4 2 3 5 4 4 5 5 4\\n4 4 1 2 1 2 2 5 3 4 3\\n\",\n    \"11 1 5\\n7 10 1 2 10 8 10 9 5 5 9\\n2 1 1 3 5 9 3 4 2 2 3\\n\",\n    \"11 6 1\\n7 4 7 2 2 12 16 2 5 15 2\\n3 12 8 5 7 1 4 19 12 1 14\\n\",\n    \"12 4 1\\n4 5 1 4 3 3 2 4 3 4 3 2\\n1 3 5 3 5 5 5 5 3 5 3 2\\n\",\n    \"12 8 1\\n4 3 3 5 6 10 10 10 10 8 4 5\\n1 7 4 10 8 1 2 4 8 4 4 2\\n\",\n    \"12 2 4\\n16 17 12 8 18 9 2 9 13 18 3 8\\n18 20 9 12 11 19 20 3 13 1 6 9\\n\",\n    \"13 1 10\\n1 4 5 3 1 3 4 3 1 5 3 2 3\\n2 3 5 1 4 3 5 4 2 1 3 4 2\\n\",\n    \"13 2 2\\n2 2 6 2 9 5 10 3 10 1 1 1 1\\n10 8 3 8 6 6 8 1 4 10 10 1 8\\n\",\n    \"13 3 1\\n16 6 5 11 17 11 13 12 18 5 12 6 12\\n12 20 9 9 19 4 19 4 1 12 1 12 4\\n\",\n    \"14 1 3\\n1 1 2 3 4 3 1 3 4 5 3 5 5 5\\n3 2 1 1 1 4 2 2 1 4 4 4 5 4\\n\",\n    \"14 2 1\\n3 5 9 5 4 6 1 10 4 10 6 5 10 2\\n10 8 8 6 1 8 9 1 6 1 4 5 9 4\\n\",\n    \"14 2 8\\n20 14 17 18 12 12 19 3 2 20 13 12 17 20\\n20 10 3 15 8 15 12 12 14 2 1 15 7 10\\n\",\n    \"15 7 6\\n2 5 4 1 1 3 3 1 4 4 4 3 4 1 1\\n5 5 2 5 4 1 4 5 1 5 4 1 4 4 4\\n\",\n    \"15 1 10\\n7 8 1 5 8 8 9 7 4 3 7 4 10 8 3\\n3 8 6 5 10 1 9 2 3 8 1 9 3 6 10\\n\",\n    \"15 3 7\\n1 11 6 5 16 13 17 6 2 7 19 5 3 13 11\\n11 9 6 9 19 4 16 20 11 19 1 10 20 4 7\\n\",\n    \"16 2 7\\n5 4 4 1 5 3 1 1 2 3 3 4 5 5 1 4\\n4 5 3 5 4 1 2 2 3 2 2 3 4 5 3 1\\n\",\n    \"16 4 8\\n2 6 6 4 1 9 5 8 9 10 2 8 9 8 1 7\\n8 9 5 2 4 10 9 2 1 5 6 7 1 1 8 1\\n\",\n    \"16 4 1\\n5 20 3 7 19 19 7 17 18 10 16 11 16 9 15 9\\n19 2 13 11 8 19 6 7 16 8 8 5 18 18 20 10\\n\",\n    \"17 1 12\\n2 4 5 5 3 3 3 3 1 4 4 1 2 2 3 3 3\\n4 1 5 4 2 5 3 4 2 2 5 2 2 5 5 5 3\\n\",\n    \"17 8 2\\n10 5 9 1 7 5 2 9 3 5 8 4 3 5 4 2 4\\n9 10 8 10 10 5 6 2 2 4 6 9 10 3 2 5 1\\n\",\n    \"17 6 5\\n18 9 15 14 15 20 18 8 3 9 17 5 2 17 7 10 13\\n17 10 7 3 7 11 4 5 18 15 15 15 5 9 7 5 5\\n\",\n    \"18 5 2\\n5 3 3 4 1 4 5 3 3 3 4 2 4 2 3 1 4 4\\n5 4 3 4 5 1 5 5 2 1 3 2 1 1 1 3 5 5\\n\",\n    \"18 8 1\\n6 10 1 1 10 6 10 2 7 2 3 7 7 7 6 5 8 8\\n4 4 4 7 1 5 2 2 7 10 2 7 6 6 2 1 4 3\\n\",\n    \"18 5 3\\n18 1 8 13 18 1 16 11 11 12 6 14 16 13 10 7 19 17\\n14 3 7 18 9 16 3 5 17 8 1 8 2 8 20 1 16 11\\n\",\n    \"19 6 1\\n4 5 2 3 4 3 2 3 3 3 5 5 1 4 1 2 4 2 5\\n1 2 1 4 1 3 3 2 4 1 3 4 3 3 4 4 4 5 5\\n\",\n    \"19 14 2\\n5 3 4 10 5 7 10 9 2 5 4 3 2 3 10 10 6 4 1\\n6 10 5 3 8 9 9 3 1 6 4 4 3 6 8 5 9 3 9\\n\",\n    \"19 1 4\\n2 10 1 3 13 3 6 2 15 15 7 8 1 18 2 12 9 8 14\\n15 3 2 15 9 12 19 20 2 18 15 11 18 6 8 16 17 1 12\\n\",\n    \"20 3 6\\n3 4 4 5 1 2 2 3 5 5 2 2 1 4 1 5 2 2 1 5\\n1 4 5 2 2 2 2 5 3 2 4 5 2 1 3 3 1 3 5 3\\n\",\n    \"20 2 5\\n9 5 1 8 6 3 5 9 9 9 9 3 4 1 7 2 1 1 3 5\\n5 6 4 10 7 9 1 6 9 5 2 1 3 1 5 9 10 8 9 9\\n\",\n    \"20 1 7\\n20 8 10 7 14 9 17 19 19 9 20 6 1 14 11 15 12 10 20 15\\n10 3 20 1 16 7 8 19 3 17 9 2 20 14 20 2 20 9 2 4\\n\"\n  ],\n  \"outputs\": [\n    \"18\\n3 4 \\n1 5 \\n\",\n    \"31\\n1 2 \\n3 4 \\n\",\n    \"23\\n1 3 5 \\n4 \\n\",\n    \"200\\n1 \\n2 \\n\",\n    \"200\\n1 \\n2 \\n\",\n    \"5\\n1 \\n2 \\n\",\n    \"19\\n1 \\n2 \\n\",\n    \"22\\n2 \\n1 \\n\",\n    \"10\\n1 \\n2 \\n\",\n    \"14\\n1 \\n3 \\n\",\n    \"36\\n1 \\n2 \\n\",\n    \"13\\n4 \\n1 3 \\n\",\n    \"27\\n1 \\n3 4 \\n\",\n    \"31\\n2 \\n1 3 4 \\n\",\n    \"10\\n4 \\n3 \\n\",\n    \"29\\n1 5 \\n2 \\n\",\n    \"74\\n3 5 \\n1 2 4 \\n\",\n    \"13\\n1 3 \\n4 \\n\",\n    \"49\\n2 \\n1 3 4 5 \\n\",\n    \"82\\n1 2 4 \\n3 5 6 \\n\",\n    \"9\\n1 2 \\n3 \\n\",\n    \"42\\n2 3 4 5 7 \\n6 \\n\",\n    \"72\\n1 4 \\n2 5 6 \\n\",\n    \"30\\n1 3 5 \\n2 4 6 7 \\n\",\n    \"44\\n4 5 6 7 8 \\n1 \\n\",\n    \"31\\n1 \\n2 \\n\",\n    \"10\\n4 \\n3 \\n\",\n    \"43\\n7 8 \\n1 4 5 6 \\n\",\n    \"73\\n1 6 \\n5 8 \\n\",\n    \"27\\n1 2 6 8 10 \\n3 4 \\n\",\n    \"61\\n1 3 4 5 6 8 9 10 \\n2 7 \\n\",\n    \"76\\n5 7 10 \\n3 \\n\",\n    \"28\\n3 6 9 10 \\n1 8 \\n\",\n    \"34\\n2 \\n4 5 6 7 8 \\n\",\n    \"81\\n1 3 6 7 9 10 \\n8 \\n\",\n    \"22\\n1 2 4 8 \\n3 \\n\",\n    \"73\\n1 5 6 7 8 9 10 12 \\n4 \\n\",\n    \"113\\n5 10 \\n1 2 6 7 \\n\",\n    \"40\\n10 \\n1 2 3 5 6 7 8 9 11 12 \\n\",\n    \"40\\n7 9 \\n1 10 \\n\",\n    \"71\\n1 5 9 \\n2 \\n\",\n    \"18\\n10 \\n6 11 13 \\n\",\n    \"30\\n8 10 \\n1 \\n\",\n    \"153\\n10 14 \\n1 2 4 6 7 8 9 12 \\n\",\n    \"55\\n2 3 6 9 11 12 13 \\n1 4 5 7 8 10 \\n\",\n    \"84\\n13 \\n1 2 3 4 5 7 10 12 14 15 \\n\",\n    \"161\\n6 11 14 \\n1 5 7 8 9 10 13 \\n\",\n    \"38\\n1 5 \\n2 3 4 9 12 13 14 \\n\",\n    \"98\\n8 9 10 13 \\n1 2 3 6 7 11 12 15 \\n\",\n    \"96\\n2 5 6 9 \\n15 \\n\",\n    \"54\\n10 \\n1 3 4 5 6 7 8 11 14 15 16 17 \\n\",\n    \"78\\n1 3 5 6 8 10 11 14 \\n2 4 \\n\",\n    \"179\\n3 4 5 6 7 14 \\n1 9 10 11 12 \\n\",\n    \"32\\n1 4 6 7 11 \\n5 8 \\n\",\n    \"77\\n2 5 7 9 12 13 17 18 \\n10 \\n\",\n    \"143\\n1 5 7 17 18 \\n4 9 15 \\n\",\n    \"33\\n1 2 5 11 12 19 \\n18 \\n\",\n    \"111\\n1 3 4 5 6 7 8 10 11 12 15 16 17 18 \\n2 19 \\n\",\n    \"93\\n14 \\n7 8 10 13 \\n\",\n    \"43\\n4 9 10 \\n2 3 8 11 12 19 \\n\",\n    \"65\\n1 8 \\n4 6 9 16 17 \\n\",\n    \"152\\n1 \\n3 5 8 10 13 15 17 \\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}