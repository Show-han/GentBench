{
    "problem": "You are an expert Python programmer, and here is your task: Note that girls in Arpa\u2019s land are really attractive.\n\nArpa loves overnight parties. In the middle of one of these parties Mehrdad suddenly appeared. He saw n pairs of friends sitting around a table. i-th pair consisted of a boy, sitting on the a_{i}-th chair, and his girlfriend, sitting on the b_{i}-th chair. The chairs were numbered 1 through 2n in clockwise direction. There was exactly one person sitting on each chair.\n\n [Image] \n\nThere were two types of food: Kooft and Zahre-mar. Now Mehrdad wonders, was there any way to serve food for the guests such that:   Each person had exactly one type of food,  No boy had the same type of food as his girlfriend,  Among any three guests sitting on consecutive chairs, there was two of them who had different type of food. Note that chairs 2n and 1 are considered consecutive. \n\nFind the answer for the Mehrdad question. If it was possible, find some arrangement of food types that satisfies the conditions.\n\n\n-----Input-----\n\nThe first line contains an integer n (1  \u2264  n  \u2264  10^5)\u00a0\u2014 the number of pairs of guests.\n\nThe i-th of the next n lines contains a pair of integers a_{i} and b_{i} (1  \u2264 a_{i}, b_{i} \u2264  2n)\u00a0\u2014 the number of chair on which the boy in the i-th pair was sitting and the number of chair on which his girlfriend was sitting. It's guaranteed that there was exactly one person sitting on each chair. \n\n\n-----Output-----\n\nIf there is no solution, print -1.\n\nOtherwise print n lines, the i-th of them should contain two integers which represent the type of food for the i-th pair. The first integer in the line is the type of food the boy had, and the second integer is the type of food the girl had. If someone had Kooft, print 1, otherwise print 2.\n\nIf there are multiple solutions, print any of them.\n\n\n-----Example-----\nInput\n3\n1 4\n2 5\n3 6\n\nOutput\n1 2\n2 1\n1 2",
    "solution": "[\"import sys\\n\\ndef solve():\\n    n = int(input())\\n    partner = [0]*(2*n)\\n    pacani = []\\n    for line in sys.stdin:\\n        pacan, telka = [int(x) - 1 for x in line.split()]\\n        partner[pacan] = telka\\n        partner[telka] = pacan\\n        pacani.append(pacan)\\n\\n    khavka = [None]*(2*n)\\n    for i in range(2*n):\\n        while khavka[i] is None:\\n            khavka[i] = 1\\n            khavka[i^1] = 2\\n            i = partner[i^1]\\n\\n    for pacan in pacani:\\n        print(khavka[pacan], khavka[partner[pacan]])\\n    \\nsolve()\\n\", \"import sys\\n\\nn = int(input())\\nA = [0]*(2*n)\\nB = []\\nfor line in sys.stdin:\\n    x, y = [int(x)-1 for x in line.split()]\\n    A[x] = y\\n    A[y] = x\\n    B.append(x)\\n\\nC = [0]*(2*n)\\nfor i in range(2*n):\\n    while not C[i]:\\n        C[i] = 1\\n        C[i^1] = 2\\n        i = A[i^1]\\n\\nfor x in B:\\n    print(C[x], C[A[x]])\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"3\\n1 4\\n2 5\\n3 6\\n\",\n    \"6\\n3 2\\n5 11\\n7 12\\n6 9\\n8 4\\n1 10\\n\",\n    \"19\\n30 27\\n6 38\\n10 28\\n20 5\\n14 18\\n32 2\\n36 29\\n12 1\\n31 24\\n15 4\\n35 11\\n3 7\\n21 17\\n25 19\\n16 8\\n23 22\\n37 33\\n13 9\\n34 26\\n\",\n    \"4\\n4 2\\n6 8\\n5 1\\n3 7\\n\",\n    \"17\\n11 12\\n17 22\\n34 7\\n3 1\\n5 24\\n18 20\\n27 30\\n16 33\\n23 21\\n19 4\\n2 15\\n29 28\\n9 8\\n13 25\\n6 10\\n32 26\\n31 14\\n\",\n    \"19\\n10 7\\n9 17\\n21 30\\n36 8\\n14 11\\n25 24\\n1 23\\n38 33\\n4 20\\n3 37\\n27 5\\n28 19\\n22 2\\n6 34\\n12 15\\n31 32\\n35 13\\n16 29\\n18 26\\n\",\n    \"17\\n17 31\\n11 23\\n34 22\\n24 8\\n4 1\\n7 14\\n20 27\\n3 19\\n12 26\\n32 25\\n28 18\\n16 29\\n21 9\\n6 2\\n33 30\\n5 13\\n10 15\\n\",\n    \"6\\n2 7\\n5 9\\n12 8\\n1 4\\n3 6\\n10 11\\n\",\n    \"8\\n10 3\\n2 16\\n14 13\\n5 15\\n1 7\\n11 8\\n6 4\\n12 9\\n\",\n    \"4\\n2 8\\n3 5\\n4 7\\n1 6\\n\",\n    \"2\\n2 3\\n1 4\\n\",\n    \"15\\n16 22\\n4 17\\n27 3\\n23 24\\n18 20\\n15 21\\n9 7\\n2 28\\n29 19\\n8 30\\n14 10\\n6 26\\n25 11\\n12 1\\n13 5\\n\",\n    \"10\\n19 6\\n8 2\\n15 18\\n17 14\\n16 7\\n20 10\\n5 1\\n13 3\\n9 12\\n11 4\\n\",\n    \"9\\n12 7\\n10 15\\n16 14\\n2 4\\n1 17\\n6 9\\n8 3\\n13 5\\n11 18\\n\",\n    \"7\\n3 14\\n7 4\\n13 10\\n11 8\\n6 1\\n5 9\\n2 12\\n\",\n    \"6\\n2 11\\n7 1\\n12 8\\n4 10\\n3 9\\n5 6\\n\",\n    \"8\\n13 6\\n10 5\\n1 12\\n11 15\\n7 16\\n4 14\\n9 2\\n8 3\\n\",\n    \"8\\n16 5\\n10 15\\n8 11\\n2 14\\n6 4\\n7 3\\n1 13\\n9 12\\n\",\n    \"7\\n10 14\\n4 6\\n1 11\\n7 2\\n9 8\\n5 13\\n3 12\\n\",\n    \"5\\n2 5\\n10 9\\n1 6\\n3 8\\n4 7\\n\",\n    \"8\\n14 2\\n7 9\\n15 6\\n13 11\\n12 16\\n10 5\\n8 1\\n3 4\\n\",\n    \"5\\n4 6\\n5 1\\n2 3\\n7 8\\n9 10\\n\",\n    \"23\\n46 21\\n17 3\\n27 38\\n34 43\\n7 6\\n8 37\\n22 4\\n16 42\\n36 32\\n12 9\\n10 45\\n26 2\\n13 24\\n23 29\\n18 15\\n33 30\\n31 5\\n11 25\\n1 14\\n44 39\\n19 20\\n35 28\\n41 40\\n\",\n    \"26\\n8 10\\n52 21\\n2 33\\n18 34\\n30 51\\n5 19\\n22 32\\n36 28\\n42 16\\n13 49\\n11 17\\n31 39\\n43 37\\n50 15\\n29 20\\n35 46\\n47 23\\n3 1\\n44 7\\n9 27\\n6 48\\n40 24\\n26 14\\n45 4\\n12 25\\n41 38\\n\",\n    \"20\\n34 12\\n9 6\\n5 3\\n13 26\\n18 15\\n16 22\\n7 14\\n17 37\\n38 40\\n4 2\\n11 23\\n21 8\\n10 36\\n30 33\\n28 19\\n29 31\\n39 20\\n35 24\\n25 32\\n1 27\\n\",\n    \"17\\n3 14\\n34 22\\n24 9\\n16 17\\n6 30\\n33 12\\n5 10\\n21 8\\n32 2\\n26 23\\n31 27\\n19 15\\n29 4\\n7 18\\n25 13\\n20 28\\n1 11\\n\",\n    \"24\\n30 4\\n41 1\\n2 11\\n22 42\\n29 43\\n7 14\\n16 6\\n40 5\\n27 34\\n46 33\\n17 10\\n21 39\\n28 31\\n19 32\\n23 20\\n25 48\\n12 9\\n47 37\\n38 3\\n44 8\\n36 18\\n13 26\\n24 15\\n45 35\\n\",\n    \"15\\n21 14\\n25 5\\n7 28\\n2 6\\n8 27\\n29 18\\n9 15\\n4 26\\n12 1\\n19 16\\n17 20\\n24 10\\n11 23\\n13 22\\n30 3\\n\"\n  ],\n  \"outputs\": [\n    \"1 2\\n2 1\\n1 2\\n\",\n    \"1 2\\n1 2\\n2 1\\n2 1\\n1 2\\n1 2\\n\",\n    \"1 2\\n2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n1 2\\n2 1\\n2 1\\n1 2\\n2 1\\n1 2\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n\",\n    \"1 2\\n1 2\\n2 1\\n2 1\\n\",\n    \"1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n2 1\\n1 2\\n2 1\\n2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n1 2\\n1 2\\n2 1\\n1 2\\n\",\n    \"1 2\\n2 1\\n2 1\\n2 1\\n1 2\\n2 1\\n1 2\\n1 2\\n2 1\\n1 2\\n2 1\\n1 2\\n1 2\\n2 1\\n1 2\\n1 2\\n1 2\\n1 2\\n2 1\\n\",\n    \"1 2\\n1 2\\n2 1\\n1 2\\n2 1\\n1 2\\n1 2\\n1 2\\n2 1\\n1 2\\n1 2\\n2 1\\n2 1\\n1 2\\n1 2\\n2 1\\n2 1\\n\",\n    \"2 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n\",\n    \"1 2\\n2 1\\n2 1\\n1 2\\n1 2\\n2 1\\n2 1\\n1 2\\n\",\n    \"2 1\\n2 1\\n1 2\\n1 2\\n\",\n    \"2 1\\n1 2\\n\",\n    \"2 1\\n2 1\\n2 1\\n1 2\\n2 1\\n1 2\\n1 2\\n2 1\\n1 2\\n1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n2 1\\n\",\n    \"2 1\\n1 2\\n2 1\\n2 1\\n1 2\\n1 2\\n2 1\\n2 1\\n1 2\\n1 2\\n\",\n    \"1 2\\n2 1\\n2 1\\n2 1\\n1 2\\n2 1\\n1 2\\n2 1\\n2 1\\n\",\n    \"2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n1 2\\n2 1\\n\",\n    \"2 1\\n2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n\",\n    \"1 2\\n2 1\\n1 2\\n1 2\\n2 1\\n1 2\\n1 2\\n1 2\\n\",\n    \"1 2\\n1 2\\n1 2\\n2 1\\n1 2\\n2 1\\n1 2\\n2 1\\n\",\n    \"2 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n2 1\\n\",\n    \"2 1\\n2 1\\n1 2\\n1 2\\n2 1\\n\",\n    \"1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n1 2\\n2 1\\n1 2\\n\",\n    \"2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n\",\n    \"2 1\\n1 2\\n1 2\\n1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n2 1\\n\",\n    \"2 1\\n1 2\\n2 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n2 1\\n1 2\\n1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n1 2\\n2 1\\n2 1\\n2 1\\n2 1\\n\",\n    \"1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n2 1\\n2 1\\n1 2\\n1 2\\n1 2\\n2 1\\n1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n\",\n    \"1 2\\n1 2\\n1 2\\n2 1\\n1 2\\n2 1\\n2 1\\n1 2\\n1 2\\n1 2\\n2 1\\n2 1\\n1 2\\n1 2\\n2 1\\n1 2\\n1 2\\n\",\n    \"1 2\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n2 1\\n1 2\\n1 2\\n2 1\\n1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n1 2\\n2 1\\n2 1\\n1 2\\n\",\n    \"1 2\\n1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n2 1\\n2 1\\n2 1\\n1 2\\n1 2\\n1 2\\n1 2\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}