{
    "problem": "You are an expert Python programmer, and here is your task: Astronaut Natasha arrived on Mars. She knows that the Martians are very poor aliens. To ensure a better life for the Mars citizens, their emperor decided to take tax from every tourist who visited the planet. Natasha is the inhabitant of Earth, therefore she had to pay the tax to enter the territory of Mars.\n\nThere are $n$ banknote denominations on Mars: the value of $i$-th banknote is $a_i$. Natasha has an infinite number of banknotes of each denomination.\n\nMartians have $k$ fingers on their hands, so they use a number system with base $k$. In addition, the Martians consider the digit $d$ (in the number system with base $k$) divine. Thus, if the last digit in Natasha's tax amount written in the number system with the base $k$ is $d$, the Martians will be happy. Unfortunately, Natasha does not know the Martians' divine digit yet.\n\nDetermine for which values $d$ Natasha can make the Martians happy.\n\nNatasha can use only her banknotes. Martians don't give her change.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 100\\,000$, $2 \\le k \\le 100\\,000$)\u00a0\u2014 the number of denominations of banknotes and the base of the number system on Mars.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 denominations of banknotes on Mars.\n\nAll numbers are given in decimal notation.\n\n\n-----Output-----\n\nOn the first line output the number of values $d$ for which Natasha can make the Martians happy.\n\nIn the second line, output all these values in increasing order.\n\nPrint all numbers in decimal notation.\n\n\n-----Examples-----\nInput\n2 8\n12 20\n\nOutput\n2\n0 4 \nInput\n3 10\n10 20 30\n\nOutput\n1\n0 \n\n\n-----Note-----\n\nConsider the first test case. It uses the octal number system.\n\nIf you take one banknote with the value of $12$, you will get $14_8$ in octal system. The last digit is $4_8$.\n\nIf you take one banknote with the value of $12$ and one banknote with the value of $20$, the total value will be $32$. In the octal system, it is $40_8$. The last digit is $0_8$.\n\nIf you take two banknotes with the value of $20$, the total value will be $40$, this is $50_8$ in the octal system. The last digit is $0_8$.\n\nNo other digits other than $0_8$ and $4_8$ can be obtained. Digits $0_8$ and $4_8$ could also be obtained in other ways.\n\nThe second test case uses the decimal number system. The nominals of all banknotes end with zero, so Natasha can give the Martians only the amount whose decimal notation also ends with zero.",
    "solution": "[\"import math\\nn,k=map(int,input().split())\\ng=k\\nfor a in map(int,input().split()):\\n g=math.gcd(g,a)\\nprint(k//g)\\nprint(' '.join(map(str,range(0,k,g))))\", \"import math\\nn,k=map(int,input().split())\\ng=k\\nfor a in map(int,input().split()):\\n g=math.gcd(g,a)\\nprint(k//g)\\nprint(*range(0,k,g))\", \"import math\\ni=lambda:map(int,input().split())\\nn,k=i()\\ng=k\\nfor a in i():g=math.gcd(g,a)\\nprint(k//g)\\nprint(*range(0,k,g))\", \"from math import gcd\\nn,k=map(int,input().split())\\ng=0\\nl=list(map(int,input().split()))\\nfor e in l:\\n    g=gcd(g,gcd(e,k))\\nprint(k//g)\\nfor i in range(0,k,g): print(i,end=' ')\", \"from math import gcd\\nfrom functools import reduce\\n\\n\\ndef main():\\n    n, k = map(int, input().split())\\n    g = reduce(gcd, map(int, input().split()), k)\\n    print(k // g, ' '.join(map(str, range(0, k, g))), sep='\\\\n')\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"from math import gcd\\n\\nN, K = map(int, input().split())\\nA = list(map(int, input().split()))\\n\\ng = 0\\nfor Ai in A: g = gcd(g, Ai)\\n\\ns = set()\\nx = 0\\nwhile x not in s:\\n    s.add(x)\\n    x = (x + g) % K\\n\\nprint(len(s))\\nprint(*sorted(s))\", \"import math\\ni=lambda:map(int,input().split())\\nn,k=i()\\ng=k\\nfor a in i():g=math.gcd(g,a)\\nprint(k//g)\\nprint(*range(0,k,g))\", \"import math\\nfrom functools import reduce\\na,b = map(int,input().split())\\nc = list(map(int,input().split()))\\nd = c[0]\\nfor j in range(a):\\n    d = math.gcd(d,c[j])\\n    if d == 1:\\n        break\\ne = math.gcd(d,b)\\nprint(b//e)\\n#f = [i for i in range(b) if i%e == 0]\\n#g = \\\" \\\".join(str(k) for k in range(b) if k%e == 0)\\nprint(\\\" \\\".join(str(k) for k in range(b) if k%e == 0))\", \"def gcd(a,b):\\n    return  a if 0==b else gcd(b,a%b)\\n\\n\\n\\nn,k=map(int,input().split(\\\" \\\"))\\n#print(k)\\nden=list(map(int,input().split(\\\" \\\")))\\ng=0\\nfor i in den:\\n    g=gcd(g,i)\\n\\nd=[]\\ndic={}\\ni=0\\nwhile (i<k):\\n    val=(i*g)%k\\n    #print(\\\"Value=\\\"+str(val))\\n    if(not val in dic):\\n        d.append(val)\\n        dic[val]=1\\n        i=i+1\\n    else:\\n        i=i+1\\n        continue\\nprint(len(d))\\nd.sort()\\nfor val in d:\\n    print(val,end=\\\" \\\")\\n\", \"def nod(a,b):\\n    while a!=0 and b!=0:\\n        if a>b:\\n            a,b=b,a%b\\n        else:\\n            b,a=a,b%a\\n    return a+b\\nn ,k = map(int, input().split())  \\na = [int(j) for j in input().split()] \\nc = a[0]\\nfor i in range(1,n):\\n    c = nod(c,a[i])\\n    if c==1:\\n        break\\ne = nod(c,k)\\nif c==1 or e==1:\\n    print(k)\\n    for i in range(k):\\n        print(i, end=\\\" \\\")\\n\\nif e>1:\\n    c = k//e\\n    print(c)\\n    for i in range(c):\\n        print(i*e, end=' ')\\n    \\n    \\n    \\n\", \"def gcd(a, b):\\n    while b != 0:\\n        a, b = b, a % b\\n    return a\\n\\nn, k = map(int, input().split(' '))\\naa = list(map(int, input().split(' ')))\\n\\nm = k\\nfor a in aa:\\n    m = gcd(m, a)\\n\\nprint(k // m)\\nfor i in range(0, k, m):\\n    print(i, end=' ')\\nprint()\\n\", \"from functools import reduce\\nfrom math import gcd\\n\\n_, k = map(int, input().split())\\ng = reduce(gcd, [k] + list(map(int, input().split())))\\nprint(k // g)\\nprint(\\\" \\\".join(str(l) for l in range(0, k, g)))\", \"from math import gcd\\nn,k=map(int,input().split())\\nit=list(map(int,input().split()))\\nit=[i%k for i in it]\\nit=[i for i in it if i!=0]\\n\\ntry:\\n    gc=it[0]\\n    for i in range(1,len(it)):\\n        gc=gcd(it[i],gc)\\n    gc=gcd(k,gc)\\n    print(k//gc)\\n    for i in range(k//gc):\\n        print(i*gc,end=\\\" \\\")\\nexcept:\\n    print(1)\\n    print(0)\\n\", \"from math import gcd\\nn, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ng = 0\\nfor i in a:\\n    g = gcd(g, i)\\nans = set()\\nans.add(g % k)\\nfor i in range(k):\\n    ans.add((i * g) % k)\\nprint(len(ans))\\nprint(*sorted(list(ans)))\\n\\n\", \"import math\\ndef binpow(a, n):\\n\\tif n == 0:\\n\\t\\treturn 1\\n\\tif n % 2 == 1:\\n\\t\\treturn binpow(a, n - 1) * a\\n\\telse:\\n\\t\\tb = binpow(a, n //2)\\n\\t\\treturn b * b\\nn, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ngcd = a[0]\\nfor i in range(1, n):\\n\\tgcd = math.gcd(gcd, a[i])\\ns = set()\\nd = gcd % k\\nisk = gcd\\nwhile d not in s:\\n\\ts.add(d)\\n\\tgcd += isk\\n\\td = gcd % k\\nprint(len(s))\\nprint(*sorted(s))\\n\\n\", \"import math\\nn, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nddc = 0\\nf = 1\\nans = set()\\nfor x in a:\\n\\tif f:\\n\\t\\tddc = x%k\\n\\to = 0\\n\\to = x%k\\n\\tif not f:\\n\\t\\tddc = math.gcd(ddc, o)\\n\\t\\n\\tif o == 1:\\n\\t\\tprint(k)\\n\\t\\tprint(*list(range(k)))\\n\\t\\treturn\\n\\tf = 0\\n\\t'''\\n\\tif k%2 != o%2 and math.gcd(k, o)==1:\\n\\t\\tprint(k)\\n\\t\\t\\n\\t\\tprint(*range(k))\\n\\t\\treturn\\n\\t\\n\\tif not o in ans:\\n\\t\\tyy = o\\n\\t\\tans.add(o)\\n\\t\\twhile o != 0:\\n\\t\\t\\to+=yy\\n\\t\\t\\to%=k\\n\\t\\t\\tans.add(o)\\n\\t\\tans.add(0)\\n\\t\\na = list(sorted(ans))\\nfor i in range(len(a)):\\n\\tfor j in range(i , len(a)):\\n\\t\\tans.add((a[i]+a[j])%k)\\n'''\\nyy = ddc\\nwhile yy:\\n\\tans.add(yy)\\n\\tyy+=ddc\\n\\tyy%=k\\nans.add(0)\\nprint(len(ans))\\nprint(*(sorted(ans)))\\n\\n\", \"n,k=list(map(int,input().split()))\\ng=lambda x:int(x)%k\\na=list(map(g,input().split()))\\ndef nod(a,b):\\n    while b>0:\\n        a%=b\\n        a,b=b,a\\n    return a\\nc=k\\nfor x in a:\\n    if x!=0:\\n        c=nod(c,x)\\nprint(k//c)\\nprint(' '.join(map(str,list(range(0,k,c)))))\\n\\n\", \"def gcd(a, b):\\n\\tif (a < b):\\n\\t\\ta, b = b, a\\n\\tif (b == 0):\\n\\t\\treturn a\\n\\treturn gcd(b, a % b)\\n\\n\\nn, k = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\ngcdd = k\\nfor i in range(n):\\n\\tgcdd = gcd(gcdd, l[i])\\nif (gcdd == 0):\\n\\tprint(1)\\n\\tprint(0)\\nelse:\\n\\tprint(k // gcdd)\\n\\tans = []\\n\\tfor i in range(1, k // gcdd + 1):\\n\\t\\tans.append((i * gcdd) % k)\\nprint(' '.join(map(str, sorted(ans))))\\n\\n\", \"\\nn, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\ndef gcd(a, b):\\n\\tif (b == 0):\\n\\t\\treturn a\\n\\treturn gcd(b, a%b)\\n\\ng = 0\\n\\nfor i in a:\\n\\tg = gcd(g, i)\\n\\nres = set()\\nfor i in range(0, k * g, g):\\n\\tres.add(i % k)\\n\\nprint(str(len(res)) + \\\" \\\\n\\\" + \\\" \\\".join(map(str, sorted(res))))\\n\", \"import sys\\nimport math\\nfrom collections import defaultdict\\nn,k=list(map(int,sys.stdin.readline().split()))\\na=list(map(int,sys.stdin.readline().split()))\\nl=[0 for _ in range(n)]\\nfor i in range(n):\\n    l[i]=a[i]%k\\nans=set()\\nans.add(0)\\nvis=defaultdict(int)\\nx=0\\nfor i in range(n):\\n    x=math.gcd(x,l[i])\\n    '''if l[i]!=0:\\n        if k%l[i]!=0 and vis[l[i]]==0:\\n            vis[l[i]]=1\\n            x=math.gcd(k,l[i])\\n            st=0\\n            while st*x<k:\\n                ans.add(st*x)\\n                st+=1\\n            if x==1:\\n                print(len(ans))\\n                res=list(ans)\\n                res.sort()\\n                print(*res)\\n                return\\n        else:\\n            if vis[l[i]]==0:\\n                st=0\\n                vis[l[i]]=1\\n                while st*l[i]<k:\\n                    ans.add(st*l[i])\\n                    st+=1'''\\nst=0\\nx=math.gcd(x,k)\\nwhile st*x<k and x!=0:\\n    ans.add(st*x)\\n    st+=1\\nprint(len(ans))\\nres=list(ans)\\nres.sort()\\nprint(*res)\\n\", \"import sys\\nimport math\\nfrom collections import defaultdict\\nn,k=list(map(int,sys.stdin.readline().split()))\\na=list(map(int,sys.stdin.readline().split()))\\nl=[0 for _ in range(n)]\\nfor i in range(n):\\n    l[i]=a[i]%k\\nans=set()\\nans.add(0)\\nvis=defaultdict(int)\\nx=0\\nfor i in range(n):\\n    x=math.gcd(x,l[i])\\nst=0\\nx=math.gcd(x,k)\\nwhile st*x<k and x!=0:\\n    ans.add(st*x)\\n    st+=1\\nprint(len(ans))\\nres=list(ans)\\nres.sort()\\nprint(*res)\\n\", \"def gcd(a,b):\\n    if b==0:\\n        return a\\n    if a%b==0:\\n        return b\\n    else:\\n        return gcd(b,a%b)\\n    \\n    \\nn,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\nfor i in range(n):\\n    a[i]=a[i]%k\\na.append(k)\\nb=0\\nfor i in range(n+1):\\n    b=gcd(b,a[i])\\nc=[]\\nfor i in range(0,k,b):\\n    c.append(i)\\n\\nprint(len(c))\\nprint(*c)\"]",
    "test": "{\"inputs\": [\"2 8\\n12 20\\n\", \"3 10\\n10 20 30\\n\", \"5 10\\n20 16 4 16 2\\n\", \"10 5\\n4 6 8 6 4 10 2 10 8 6\\n\", \"20 25\\n15 10 5 20 10 5 15 5 15 10 15 5 5 5 5 10 15 20 20 20\\n\", \"30 30\\n11 23 7 30 13 6 25 29 1 15 20 5 28 15 19 22 21 5 27 25 29 10 1 4 12 19 1 5 8 10\\n\", \"40 30\\n16 12 12 22 18 28 32 24 36 26 12 30 22 16 32 30 36 18 20 16 12 24 28 20 16 28 8 34 18 18 18 4 4 36 18 10 30 38 18 10\\n\", \"50 30\\n15 9 21 39 42 39 3 42 42 39 6 48 39 30 12 39 27 45 30 48 18 33 18 36 27 3 48 12 36 27 15 12 42 39 18 21 48 39 15 42 24 36 33 48 6 48 15 12 30 18\\n\", \"1 10\\n1\\n\", \"1 2\\n1\\n\", \"60 30\\n10 30 45 15 25 60 10 40 35 25 5 40 35 40 15 5 15 35 10 60 25 15 60 10 30 10 5 25 10 15 60 20 30 5 50 50 40 20 55 40 35 15 15 10 60 40 50 50 30 15 25 45 35 40 15 5 5 20 60 45\\n\", \"70 30\\n54 30 12 48 42 24 42 60 54 6 36 42 54 66 12 48 54 42 24 54 30 18 30 54 18 60 24 30 54 48 48 60 18 60 60 66 54 18 54 30 24 30 60 54 36 36 60 48 12 60 6 60 42 66 6 42 18 60 54 48 42 18 48 66 18 42 48 30 12 66\\n\", \"80 30\\n30 80 40 40 60 60 40 80 70 80 30 30 60 80 30 70 60 10 10 30 70 60 70 20 40 20 30 10 60 70 70 50 60 70 70 30 70 60 60 70 20 60 10 60 70 80 20 30 30 20 60 50 40 40 80 70 70 20 40 80 30 50 40 10 40 20 70 10 80 10 50 40 50 70 40 80 10 40 60 60\\n\", \"90 30\\n90 45 75 75 90 90 45 30 90 15 45 90 15 30 45 60 30 15 30 45 45 45 45 15 45 60 15 60 45 75 45 75 90 60 30 15 60 30 90 75 15 60 15 30 45 30 45 15 30 15 45 30 15 75 90 15 45 15 75 15 75 30 75 45 60 75 15 45 30 75 45 90 45 60 90 45 75 30 30 30 15 15 75 60 75 90 75 60 90 45\\n\", \"100 30\\n30 30 30 90 30 30 90 90 30 90 30 90 90 30 30 30 60 60 60 30 30 60 90 90 90 60 30 90 60 60 90 60 60 60 30 60 60 60 60 90 60 30 60 90 90 90 60 60 90 60 60 60 60 30 30 60 30 60 60 90 30 60 60 60 90 60 90 30 30 60 30 90 90 90 90 60 90 30 30 60 60 30 60 60 60 30 90 60 60 60 90 60 30 90 60 30 30 60 90 90\\n\", \"1 10\\n2\\n\", \"1 10\\n3\\n\", \"5 2\\n1 1 1 1 1\\n\", \"2 30\\n6 10\\n\", \"1 10\\n10\\n\", \"1 10\\n20\\n\", \"1 2\\n1000000000\\n\", \"2 6\\n2 3\\n\", \"1 5\\n4\\n\", \"2 5\\n2 4\\n\", \"3 30\\n6 10 15\\n\", \"2 7\\n3 6\\n\", \"2 15\\n3 5\\n\", \"2 12\\n4 6\\n\", \"2 10\\n3 6\\n\", \"1 14\\n4\\n\", \"1 13\\n5\\n\", \"2 30\\n10 6\\n\", \"1 5\\n3\\n\", \"1 8\\n6\\n\", \"3 10\\n6 6 6\\n\", \"1 7\\n6\\n\", \"1 9\\n6\\n\", \"2 10\\n7 7\\n\", \"1 8\\n5\\n\", \"2 50\\n3 15\\n\", \"1 6\\n4\\n\", \"1 7\\n4\\n\", \"1 10\\n7\\n\", \"1 3\\n2\\n\", \"2 10\\n2 5\\n\", \"2 50\\n15 3\\n\", \"1 5\\n2\\n\", \"2 10\\n6 5\\n\", \"2 35\\n5 7\\n\", \"2 54\\n6 9\\n\"], \"outputs\": [\"2\\n0 4 \", \"1\\n0 \", \"5\\n0 2 4 6 8 \", \"5\\n0 1 2 3 4 \", \"5\\n0 5 10 15 20 \", \"30\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \", \"15\\n0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 \", \"10\\n0 3 6 9 12 15 18 21 24 27 \", \"10\\n0 1 2 3 4 5 6 7 8 9 \", \"2\\n0 1 \", \"6\\n0 5 10 15 20 25 \", \"5\\n0 6 12 18 24 \", \"3\\n0 10 20 \", \"2\\n0 15 \", \"1\\n0 \", \"5\\n0 2 4 6 8 \", \"10\\n0 1 2 3 4 5 6 7 8 9 \", \"2\\n0 1 \", \"15\\n0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 \", \"1\\n0 \", \"1\\n0 \", \"1\\n0 \", \"6\\n0 1 2 3 4 5 \", \"5\\n0 1 2 3 4 \", \"5\\n0 1 2 3 4 \", \"30\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \", \"7\\n0 1 2 3 4 5 6 \", \"15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \", \"6\\n0 2 4 6 8 10 \", \"10\\n0 1 2 3 4 5 6 7 8 9 \", \"7\\n0 2 4 6 8 10 12 \", \"13\\n0 1 2 3 4 5 6 7 8 9 10 11 12 \", \"15\\n0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 \", \"5\\n0 1 2 3 4 \", \"4\\n0 2 4 6 \", \"5\\n0 2 4 6 8 \", \"7\\n0 1 2 3 4 5 6 \", \"3\\n0 3 6 \", \"10\\n0 1 2 3 4 5 6 7 8 9 \", \"8\\n0 1 2 3 4 5 6 7 \", \"50\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \", \"3\\n0 2 4 \", \"7\\n0 1 2 3 4 5 6 \", \"10\\n0 1 2 3 4 5 6 7 8 9 \", \"3\\n0 1 2 \", \"10\\n0 1 2 3 4 5 6 7 8 9 \", \"50\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \", \"5\\n0 1 2 3 4 \", \"10\\n0 1 2 3 4 5 6 7 8 9 \", \"35\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \", \"18\\n0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 \"]}",
    "tags": [
        "reasoning/coding"
    ]
}