{
    "problem": "You are an expert Python programmer, and here is your task: Nearly each project of the F company has a whole team of developers working on it. They often are in different rooms of the office in different cities and even countries. To keep in touch and track the results of the project, the F company conducts shared online meetings in a Spyke chat.\n\nOne day the director of the F company got hold of the records of a part of an online meeting of one successful team. The director watched the record and wanted to talk to the team leader. But how can he tell who the leader is? The director logically supposed that the leader is the person who is present at any conversation during a chat meeting. In other words, if at some moment of time at least one person is present on the meeting, then the leader is present on the meeting.\n\nYou are the assistant director. Given the 'user logged on'/'user logged off' messages of the meeting in the chronological order, help the director determine who can be the leader. Note that the director has the record of only a continuous part of the meeting (probably, it's not the whole meeting).\n\n\n-----Input-----\n\nThe first line contains integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of team participants and the number of messages. Each of the next m lines contains a message in the format:  '+ id': the record means that the person with number id (1 \u2264 id \u2264 n) has logged on to the meeting.  '- id': the record means that the person with number id (1 \u2264 id \u2264 n) has logged off from the meeting. \n\nAssume that all the people of the team are numbered from 1 to n and the messages are given in the chronological order. It is guaranteed that the given sequence is the correct record of a continuous part of the meeting. It is guaranteed that no two log on/log off events occurred simultaneously.\n\n\n-----Output-----\n\nIn the first line print integer k (0 \u2264 k \u2264 n) \u2014 how many people can be leaders. In the next line, print k integers in the increasing order \u2014 the numbers of the people who can be leaders.\n\nIf the data is such that no member of the team can be a leader, print a single number 0.\n\n\n-----Examples-----\nInput\n5 4\n+ 1\n+ 2\n- 2\n- 1\n\nOutput\n4\n1 3 4 5 \nInput\n3 2\n+ 1\n- 2\n\nOutput\n1\n3 \nInput\n2 4\n+ 1\n- 1\n+ 2\n- 2\n\nOutput\n0\n\nInput\n5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n\nOutput\n3\n2 3 5 \nInput\n2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0",
    "solution": "[\"#!/Library/Frameworks/Python.framework/Versions/3.6/bin/python3\\n'''\\nCreated on 13/09/2018\\n\\n@author: ernesto\\n'''\\n\\nn, m = [int(x) for x in input().strip().split(\\\" \\\")]\\n\\nposibles_jefes = set(range(1, n + 1))\\nanteriores = set()\\nposteriores = set()\\ncontinuos = [True] * (n + 1)\\nmencionados = set()\\nposibles_jefes_mencionados = set()\\nultimo_en_salir = [True] * (n + 1)\\nultima_salida_inesperada = None\\n\\nops = []\\n\\nif(m > 1):\\n    for _ in range(0, m):\\n        s, n_s = [x for x in input().strip().split(\\\" \\\")]\\n        n = int(n_s)\\n        ops.append((s, n))\\n    for i in range(0, m):\\n        op, num = ops[i]\\n        cont = False\\n        if op == '+':\\n            cont = not i or (ops[i - 1][0] == '-' and ops[i - 1][1] == num)\\n            posteriores.add(num)\\n        if op == '-':\\n            cont = i == m - 1 or (ops[i + 1][0] == '+' and ops[i + 1][1] == num)\\n            if num not in mencionados:\\n                anteriores.add(num)\\n                ultima_salida_inesperada = num\\n            posteriores.discard(num)\\n            ultimo_en_salir[num] &= not posteriores\\n        continuos[num] &= cont \\n        mencionados.add(num)\\n#    print(\\\"anteriores {} posteriores {} continuos {} ops {}\\\".format(anteriores, posteriores, continuos, ops))\\n    if not anteriores and not posteriores:\\n        assert ultima_salida_inesperada is None\\n        if ops[0][0] == '+' and ops[-1][0] == '-' and ops[0][1] == ops[-1][1] and continuos[ops[0][1]] and ultimo_en_salir[ops[0][1]]:\\n            posibles_jefes_mencionados.add(ops[0][1])\\n    else:\\n        if not posteriores:\\n            assert ultima_salida_inesperada is not None\\n            posibles_jefes_filtrados = list([x for x in anteriores if continuos[x] and ultimo_en_salir[x] and ultima_salida_inesperada == x])\\n            assert len(posibles_jefes_filtrados) <= 1\\n            if(posibles_jefes_filtrados):\\n                assert posibles_jefes_filtrados[0] == ops[-1][1]\\n                posibles_jefes_mencionados.add(ops[-1][1])\\n        else:\\n            if not anteriores:\\n                assert ultima_salida_inesperada is None\\n                posibles_jefes_filtrados = list([x for x in posteriores if continuos[x] and ultimo_en_salir[x]])\\n#                print(\\\"posibles {}\\\".format(posibles_jefes_filtrados))\\n                assert len(posibles_jefes_filtrados) <= 1\\n                if(posibles_jefes_filtrados):\\n                    assert posibles_jefes_filtrados[0] == ops[0][1]\\n                    posibles_jefes_mencionados.add(ops[0][1])\\n            else:\\n                assert ultima_salida_inesperada is not None\\n#                print(\\\"continuos {}\\\".format(continuos))\\n                posibles_jefes_mencionados = set([x for x in anteriores & posteriores if ultimo_en_salir[x] and continuos[x] and ultima_salida_inesperada == x])\\n\\n#    print(\\\"posibles jefes menc {}\\\".format(posibles_jefes_mencionados))\\n    posibles_jefes -= (mencionados - posibles_jefes_mencionados)\\n        \\nprint(len(posibles_jefes))\\nif(len(posibles_jefes)):\\n    print(\\\" \\\".join(map(str, sorted(posibles_jefes))))\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\\n\",\n    \"3 2\\n+ 1\\n- 2\\n\",\n    \"2 4\\n+ 1\\n- 1\\n+ 2\\n- 2\\n\",\n    \"5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4\\n\",\n    \"2 4\\n+ 1\\n- 2\\n+ 2\\n- 1\\n\",\n    \"1 1\\n+ 1\\n\",\n    \"2 1\\n- 2\\n\",\n    \"3 5\\n- 1\\n+ 1\\n+ 2\\n- 2\\n+ 3\\n\",\n    \"10 8\\n+ 1\\n- 1\\n- 2\\n- 3\\n+ 3\\n+ 7\\n- 7\\n+ 9\\n\",\n    \"5 5\\n+ 5\\n+ 2\\n+ 3\\n+ 4\\n+ 1\\n\",\n    \"5 4\\n+ 1\\n- 1\\n+ 1\\n+ 2\\n\",\n    \"10 3\\n+ 1\\n+ 2\\n- 7\\n\",\n    \"1 20\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n\",\n    \"20 1\\n- 16\\n\",\n    \"50 20\\n- 6\\n+ 40\\n- 3\\n- 23\\n+ 31\\n- 27\\n- 40\\n+ 25\\n+ 29\\n- 41\\n- 16\\n+ 23\\n+ 20\\n+ 13\\n- 45\\n+ 40\\n+ 24\\n+ 22\\n- 23\\n+ 17\\n\",\n    \"20 50\\n+ 5\\n+ 11\\n- 5\\n+ 6\\n- 16\\n- 13\\n+ 5\\n+ 7\\n- 8\\n- 7\\n- 10\\n+ 10\\n- 20\\n- 19\\n+ 17\\n- 2\\n+ 2\\n+ 19\\n+ 18\\n- 2\\n- 6\\n- 5\\n+ 6\\n+ 4\\n- 14\\n+ 14\\n- 9\\n+ 15\\n- 17\\n- 15\\n+ 2\\n+ 5\\n- 2\\n+ 9\\n- 11\\n+ 2\\n- 19\\n+ 7\\n+ 12\\n+ 16\\n+ 19\\n- 18\\n- 2\\n+ 18\\n- 9\\n- 10\\n+ 9\\n+ 13\\n- 14\\n- 16\\n\",\n    \"100 5\\n- 60\\n- 58\\n+ 25\\n- 32\\n+ 86\\n\",\n    \"4 4\\n+ 2\\n- 1\\n- 3\\n- 2\\n\",\n    \"3 3\\n- 2\\n+ 1\\n+ 2\\n\",\n    \"5 4\\n- 1\\n- 2\\n+ 3\\n+ 4\\n\",\n    \"6 6\\n- 5\\n- 6\\n- 3\\n- 1\\n- 2\\n- 4\\n\",\n    \"10 7\\n- 8\\n+ 1\\n+ 2\\n+ 3\\n- 2\\n- 3\\n- 1\\n\",\n    \"10 7\\n- 8\\n+ 1\\n+ 2\\n+ 3\\n- 2\\n- 3\\n- 1\\n\",\n    \"4 10\\n+ 2\\n- 1\\n- 2\\n- 3\\n+ 3\\n+ 2\\n+ 4\\n- 2\\n+ 2\\n+ 1\\n\",\n    \"4 9\\n+ 2\\n- 1\\n- 2\\n- 3\\n+ 3\\n+ 2\\n+ 4\\n- 2\\n+ 2\\n\",\n    \"10 8\\n+ 1\\n- 1\\n- 4\\n+ 4\\n+ 3\\n+ 7\\n- 7\\n+ 9\\n\",\n    \"10 6\\n+ 2\\n- 2\\n+ 2\\n- 2\\n+ 2\\n- 3\\n\",\n    \"10 5\\n+ 2\\n- 2\\n+ 2\\n- 2\\n- 3\\n\",\n    \"10 11\\n+ 1\\n- 1\\n- 2\\n+ 3\\n- 3\\n- 4\\n+ 5\\n- 5\\n- 6\\n+ 6\\n+ 7\\n\",\n    \"10 10\\n+ 1\\n- 1\\n- 2\\n+ 3\\n- 3\\n- 4\\n+ 5\\n- 5\\n- 6\\n+ 6\\n\",\n    \"10 9\\n+ 1\\n- 1\\n- 2\\n+ 3\\n- 3\\n- 4\\n+ 5\\n- 5\\n- 6\\n\",\n    \"10 12\\n+ 1\\n- 1\\n- 2\\n+ 3\\n- 3\\n- 4\\n+ 5\\n- 5\\n- 6\\n+ 6\\n+ 7\\n- 7\\n\",\n    \"2 2\\n- 1\\n+ 1\\n\",\n    \"7 4\\n- 2\\n- 3\\n+ 3\\n- 6\\n\",\n    \"2 3\\n+ 1\\n+ 2\\n- 1\\n\",\n    \"5 5\\n- 2\\n+ 1\\n+ 2\\n- 2\\n+ 4\\n\",\n    \"5 3\\n+ 1\\n- 1\\n+ 2\\n\",\n    \"4 4\\n- 1\\n+ 1\\n- 1\\n+ 2\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n1 3 4 5 \",\n    \"1\\n3 \",\n    \"0\\n\",\n    \"3\\n2 3 5 \",\n    \"0\\n\",\n    \"1\\n1 \",\n    \"2\\n1 2 \",\n    \"1\\n1 \",\n    \"6\\n3 4 5 6 8 10 \",\n    \"1\\n5 \",\n    \"4\\n1 3 4 5 \",\n    \"7\\n3 4 5 6 8 9 10 \",\n    \"1\\n1 \",\n    \"20\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \",\n    \"34\\n1 2 4 5 7 8 9 10 11 12 14 15 18 19 21 26 28 30 32 33 34 35 36 37 38 39 42 43 44 46 47 48 49 50 \",\n    \"2\\n1 3 \",\n    \"95\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 26 27 28 29 30 31 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 59 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 87 88 89 90 91 92 93 94 95 96 97 98 99 100 \",\n    \"1\\n4 \",\n    \"1\\n3 \",\n    \"1\\n5 \",\n    \"1\\n4 \",\n    \"6\\n4 5 6 7 9 10 \",\n    \"6\\n4 5 6 7 9 10 \",\n    \"1\\n3 \",\n    \"1\\n3 \",\n    \"6\\n2 4 5 6 8 10 \",\n    \"8\\n1 4 5 6 7 8 9 10 \",\n    \"9\\n1 3 4 5 6 7 8 9 10 \",\n    \"4\\n6 8 9 10 \",\n    \"5\\n6 7 8 9 10 \",\n    \"5\\n6 7 8 9 10 \",\n    \"4\\n6 8 9 10 \",\n    \"2\\n1 2 \",\n    \"4\\n1 4 5 7 \",\n    \"0\\n\",\n    \"2\\n3 5 \",\n    \"3\\n3 4 5 \",\n    \"2\\n3 4 \"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}