{
    "problem": "You are an expert Python programmer, and here is your task: A new dog show on TV is starting next week. On the show dogs are required to demonstrate bottomless stomach, strategic thinking and self-preservation instinct. You and your dog are invited to compete with other participants and naturally you want to win!\n\nOn the show a dog needs to eat as many bowls of dog food as possible (bottomless stomach helps here). Dogs compete separately of each other and the rules are as follows:\n\nAt the start of the show the dog and the bowls are located on a line. The dog starts at position x = 0 and n bowls are located at positions x = 1, x = 2, ..., x = n. The bowls are numbered from 1 to n from left to right. After the show starts the dog immediately begins to run to the right to the first bowl.\n\nThe food inside bowls is not ready for eating at the start because it is too hot (dog's self-preservation instinct prevents eating). More formally, the dog can eat from the i-th bowl after t_{i} seconds from the start of the show or later.\n\nIt takes dog 1 second to move from the position x to the position x + 1. The dog is not allowed to move to the left, the dog runs only to the right with the constant speed 1 distance unit per second. When the dog reaches a bowl (say, the bowl i), the following cases are possible:  the food had cooled down (i.e. it passed at least t_{i} seconds from the show start): the dog immediately eats the food and runs to the right without any stop,  the food is hot (i.e. it passed less than t_{i} seconds from the show start): the dog has two options: to wait for the i-th bowl, eat the food and continue to run at the moment t_{i} or to skip the i-th bowl and continue to run to the right without any stop. \n\nAfter T seconds from the start the show ends. If the dog reaches a bowl of food at moment T the dog can not eat it. The show stops before T seconds if the dog had run to the right of the last bowl.\n\nYou need to help your dog create a strategy with which the maximum possible number of bowls of food will be eaten in T seconds.\n\n\n-----Input-----\n\nTwo integer numbers are given in the first line - n and T (1 \u2264 n \u2264 200 000, 1 \u2264 T \u2264 2\u00b710^9) \u2014 the number of bowls of food and the time when the dog is stopped.\n\nOn the next line numbers t_1, t_2, ..., t_{n} (1 \u2264 t_{i} \u2264 10^9) are given, where t_{i} is the moment of time when the i-th bowl of food is ready for eating.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the maximum number of bowls of food the dog will be able to eat in T seconds.\n\n\n-----Examples-----\nInput\n3 5\n1 5 3\n\nOutput\n2\n\nInput\n1 2\n1\n\nOutput\n1\n\nInput\n1 1\n1\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example the dog should skip the second bowl to eat from the two bowls (the first and the third).",
    "solution": "[\"n, t = map(int,input().split())\\nwait = list(map(int,input().split()))\\nseg = []\\nfor i in range(n):\\n    # to get the food in wait[i], wait __ seconds before running\\n    m = max(0, wait[i]-i-1)\\n    M = t-i-2\\n    if m > M: continue\\n    seg.append((m, -1))\\n    seg.append((M, 1))\\nseg.sort()\\n\\nans = 0\\ncur = 0\\nfor t, q in seg:\\n    cur-= q\\n    ans = max(ans, cur)\\nprint(ans)\", \"from heapq import heappush, heappop\\n\\nn, m = [int(i) for i in input().split()]\\nfood = 0\\ntummy = []\\ndish = [ -int(i) for i in input().split()]\\nfor i in range(1, min(m, n+1)):\\n    while tummy and -tummy[0] >= m- i:\\n        heappop(tummy)\\n    if max(-dish[i-1], i) < m:\\n        heappush(tummy, dish[i-1] + i)\\n    food = max(len(tummy), food)\\nprint(food)\\n\", \"n, T = map(int, input().split())\\n\\nts = list(map(int, input().split()))\\n\\nintervals = []\\n\\nfor i in range(n):\\n    start = max(0, ts[i] - i - 1)\\n    end = T - i - 2\\n    \\n    if start > end:\\n        continue\\n    \\n    intervals.append((start, -1))\\n    intervals.append((end, 1))\\n\\nintervals.sort()\\n\\nans = 0\\ncurrent = 0\\n\\nfor _, val in intervals:\\n    current -= val\\n    ans = max(ans, current)\\n\\nprint(ans)\", \"# using the min-heap \\nfrom heapq import heappush,heappop\\nbowels,Time = list(map(int,input().split()))\\nmyLine = [-int(b) for b in input().split()]\\ngulp = []; eat = 0\\nfor i in range(1,min(bowels+1,Time)):\\n    while gulp and -gulp[0] >= Time - i:\\n        # remove the bowel with the highest time penalty \\n        heappop(gulp)\\n    # Check if the option is viable\\n    if -myLine[i-1] < Time:\\n        # Remove the step penalty and store the remaining \\n        heappush(gulp,myLine[i-1] + i)\\n    eat = max(len(gulp),eat)\\nprint (eat)\\n\", \"# using the min-heap \\nfrom heapq import heappush,heappop\\nbowels,Time = map(int,input().split())\\nmyLine = [-int(b) for b in input().split()]\\ngulp = []; eat = 0\\nfor i in range(1,min(bowels+1,Time)):\\n    # Terminate in cases where bowels > Time\\n    if i >= Time:\\n        break\\n    while gulp and -gulp[0] >= Time - i:\\n        # remove the bowel with the highest time penalty \\n        heappop(gulp)\\n    # Check if the option is viable\\n    if -myLine[i-1] < Time:\\n        # Remove the step penalty and store the remaining \\n        heappush(gulp,myLine[i-1] + i)\\n    eat = max(len(gulp),eat)\\nprint (eat)\", \"# using the min-heap \\nfrom heapq import heappush,heappop\\nbowels,Time = map(int,input().split())\\nmyLine = [-int(b) for b in input().split()]\\ngulp = []; eat = 0\\nfor i in range(1,min(bowels+1,Time)):\\n    # redundant (now that i look at it. the min does that already)\\n    if i >= Time:\\n        break\\n    while gulp and -gulp[0] >= Time - i:\\n        # remove the bowel with the highest time penalty \\n        heappop(gulp)\\n    # Check if the option is viable\\n    if -myLine[i-1] < Time:\\n        # Remove the step penalty and store the remaining \\n        heappush(gulp,myLine[i-1] + i)\\n    eat = max(len(gulp),eat)\\nprint (eat)\"]",
    "test": "{\n  \"inputs\": [\n    \"3 5\\n1 5 3\\n\",\n    \"1 2\\n1\\n\",\n    \"1 1\\n1\\n\",\n    \"1 1\\n2\\n\",\n    \"2 2\\n2 3\\n\",\n    \"2 3\\n2 1\\n\",\n    \"3 3\\n2 3 2\\n\",\n    \"3 2\\n2 3 4\\n\",\n    \"3 4\\n2 1 2\\n\",\n    \"4 4\\n2 1 2 3\\n\",\n    \"4 3\\n2 1 2 3\\n\",\n    \"4 6\\n2 3 4 5\\n\",\n    \"5 5\\n2 1 2 3 4\\n\",\n    \"5 3\\n2 3 2 1 2\\n\",\n    \"5 7\\n2 1 2 3 4\\n\",\n    \"6 6\\n2 3 2 3 4 3\\n\",\n    \"6 4\\n2 3 2 3 4 3\\n\",\n    \"6 9\\n2 1 2 1 2 3\\n\",\n    \"7 7\\n2 3 4 5 6 5 6\\n\",\n    \"7 4\\n2 1 2 3 2 3 2\\n\",\n    \"7 10\\n2 3 4 3 2 3 2\\n\",\n    \"8 8\\n2 3 2 3 4 5 4 5\\n\",\n    \"8 5\\n2 3 2 3 4 3 4 3\\n\",\n    \"8 12\\n2 3 2 3 4 3 4 3\\n\",\n    \"9 9\\n2 3 4 5 4 5 6 7 6\\n\",\n    \"9 5\\n2 3 4 3 2 3 4 5 6\\n\",\n    \"9 13\\n2 1 2 3 4 5 4 5 6\\n\",\n    \"10 10\\n2 1 2 3 4 3 4 3 4 3\\n\",\n    \"10 6\\n2 3 4 3 4 5 6 7 6 7\\n\",\n    \"10 15\\n2 1 2 1 2 3 4 5 6 7\\n\",\n    \"11 11\\n2 3 4 5 6 5 4 5 4 3 4\\n\",\n    \"11 6\\n2 3 4 3 4 3 4 5 4 3 2\\n\",\n    \"11 16\\n2 3 2 1 2 3 4 5 4 3 4\\n\",\n    \"12 12\\n2 3 4 5 6 7 6 7 8 9 10 11\\n\",\n    \"12 7\\n2 3 4 3 4 3 2 3 4 3 4 5\\n\",\n    \"12 18\\n2 1 2 3 4 5 6 5 6 5 6 5\\n\",\n    \"13 13\\n2 1 2 3 4 3 2 3 4 5 6 5 4\\n\",\n    \"13 7\\n2 1 2 3 2 3 2 3 4 3 4 5 6\\n\",\n    \"13 19\\n2 3 4 5 6 5 4 5 6 7 8 9 8\\n\",\n    \"14 14\\n2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n\",\n    \"14 8\\n2 3 4 5 6 7 8 7 6 7 8 9 10 9\\n\",\n    \"14 21\\n2 1 2 3 4 5 6 5 6 7 8 9 8 9\\n\",\n    \"15 15\\n2 3 4 3 2 3 4 3 4 3 4 5 6 5 6\\n\",\n    \"15 8\\n2 3 2 1 2 1 2 3 2 3 4 3 4 5 4\\n\",\n    \"15 22\\n2 3 2 3 2 3 4 5 6 7 6 7 8 9 10\\n\",\n    \"16 16\\n2 1 2 3 2 3 4 5 6 5 4 5 6 5 6 7\\n\",\n    \"16 9\\n2 3 4 5 4 3 4 5 6 7 8 7 8 9 10 11\\n\",\n    \"16 24\\n2 3 4 5 6 5 6 7 6 7 8 9 10 11 12 13\\n\",\n    \"17 17\\n2 3 2 1 2 3 4 5 6 7 8 9 10 11 12 11 12\\n\",\n    \"17 9\\n2 3 4 5 6 7 8 9 10 11 10 11 10 11 12 13 12\\n\",\n    \"17 25\\n2 1 2 1 2 3 2 3 2 1 2 1 2 1 2 1 2\\n\",\n    \"18 18\\n2 3 4 5 4 5 6 5 6 7 6 7 6 5 6 7 8 7\\n\",\n    \"18 10\\n2 3 4 3 4 3 4 5 6 5 6 7 8 9 10 9 8 9\\n\",\n    \"18 27\\n2 3 4 3 4 5 6 7 8 9 10 9 8 9 8 9 10 9\\n\",\n    \"19 19\\n2 1 2 3 4 5 4 5 6 7 6 7 8 9 10 11 12 11 12\\n\",\n    \"19 10\\n2 1 2 3 4 3 4 3 2 3 4 3 4 3 4 5 6 5 4\\n\",\n    \"19 28\\n2 3 4 3 4 5 6 5 6 5 6 7 8 7 8 9 10 11 12\\n\",\n    \"20 20\\n2 1 2 3 2 1 2 3 4 3 2 3 4 5 6 7 8 9 8 9\\n\",\n    \"20 11\\n2 3 4 5 6 7 6 5 6 7 8 9 10 11 12 11 12 13 12 11\\n\",\n    \"20 30\\n2 3 2 3 4 5 6 5 6 7 6 7 8 9 8 7 8 9 10 11\\n\",\n    \"1 1\\n2\\n\",\n    \"2 2\\n2 3\\n\",\n    \"2 3\\n2 3\\n\",\n    \"3 3\\n2 1 2\\n\",\n    \"3 2\\n2 1 2\\n\",\n    \"3 4\\n2 1 2\\n\",\n    \"4 4\\n2 3 2 3\\n\",\n    \"4 3\\n2 1 2 3\\n\",\n    \"4 6\\n2 3 4 5\\n\",\n    \"5 5\\n2 1 2 3 4\\n\",\n    \"5 3\\n2 3 4 5 6\\n\",\n    \"5 7\\n2 3 4 5 6\\n\",\n    \"6 6\\n2 1 2 3 4 5\\n\",\n    \"6 4\\n2 3 4 5 6 7\\n\",\n    \"6 9\\n2 3 4 5 6 7\\n\",\n    \"7 7\\n2 1 2 1 2 3 4\\n\",\n    \"7 4\\n2 3 4 5 4 5 6\\n\",\n    \"7 10\\n2 1 2 3 2 3 4\\n\",\n    \"8 8\\n2 3 2 3 2 3 4 5\\n\",\n    \"8 5\\n2 3 4 3 2 3 4 3\\n\",\n    \"8 12\\n2 3 4 3 2 3 4 3\\n\",\n    \"9 9\\n2 1 2 3 4 5 6 5 6\\n\",\n    \"9 5\\n2 1 2 3 4 3 2 3 4\\n\",\n    \"9 13\\n2 3 4 5 6 5 6 7 8\\n\",\n    \"10 10\\n2 3 4 3 4 5 6 7 6 7\\n\",\n    \"10 6\\n2 3 4 5 6 7 8 9 10 11\\n\",\n    \"10 15\\n2 3 4 5 6 7 8 9 10 11\\n\",\n    \"11 11\\n2 3 4 5 6 7 8 9 10 11 12\\n\",\n    \"11 6\\n2 3 4 5 6 7 8 7 8 9 8\\n\",\n    \"11 16\\n2 3 4 5 6 5 6 5 6 5 6\\n\",\n    \"12 12\\n2 1 2 3 4 5 6 7 8 7 6 5\\n\",\n    \"12 7\\n2 3 4 5 6 7 8 9 10 11 10 11\\n\",\n    \"12 18\\n2 1 2 3 2 3 2 1 2 3 2 3\\n\",\n    \"13 13\\n2 3 4 5 6 7 8 7 6 7 8 9 10\\n\",\n    \"13 7\\n2 3 4 5 6 7 8 9 10 11 12 13 14\\n\",\n    \"13 19\\n2 3 4 5 6 5 6 7 6 7 8 9 8\\n\",\n    \"14 14\\n2 3 4 5 6 5 4 5 6 7 8 7 8 9\\n\",\n    \"14 8\\n2 3 4 5 6 7 6 7 8 7 8 9 10 11\\n\",\n    \"14 21\\n2 1 2 3 4 5 4 5 4 5 4 3 4 5\\n\",\n    \"15 15\\n2 1 2 3 2 3 4 5 6 5 6 5 6 5 6\\n\",\n    \"15 8\\n2 3 4 3 4 5 6 7 8 7 6 5 6 7 8\\n\",\n    \"15 22\\n2 3 2 1 2 3 4 5 6 7 8 9 10 9 10\\n\",\n    \"16 16\\n2 3 4 5 6 5 6 7 8 7 6 7 8 9 10 11\\n\",\n    \"16 9\\n2 1 2 3 4 5 6 5 4 5 6 7 8 9 10 11\\n\",\n    \"16 24\\n2 3 4 5 6 7 8 9 10 9 10 9 10 11 12 13\\n\",\n    \"17 17\\n2 3 2 3 4 3 4 5 6 7 8 9 8 7 6 7 8\\n\",\n    \"17 9\\n2 1 2 3 4 3 4 5 6 7 8 9 10 11 10 11 12\\n\",\n    \"17 25\\n2 3 4 3 2 3 2 1 2 3 4 5 4 5 4 5 6\\n\",\n    \"18 18\\n2 3 2 3 4 5 6 5 6 7 8 9 10 11 12 13 14 15\\n\",\n    \"18 10\\n2 3 4 5 6 7 8 9 10 11 12 13 12 11 10 9 10 11\\n\",\n    \"18 27\\n2 3 4 5 6 7 8 9 10 9 10 9 10 11 10 9 10 11\\n\",\n    \"19 19\\n2 3 4 5 6 5 4 5 6 7 8 9 10 11 12 13 14 15 16\\n\",\n    \"19 10\\n2 1 2 3 4 3 4 5 4 5 6 7 8 9 10 11 12 13 14\\n\",\n    \"19 28\\n2 1 2 3 4 5 4 5 6 7 8 9 8 9 10 9 8 9 8\\n\",\n    \"20 20\\n2 3 4 5 6 7 8 9 10 11 12 11 12 13 14 15 16 17 18 19\\n\",\n    \"20 11\\n2 3 2 3 4 5 6 5 6 7 8 7 6 7 8 7 8 9 8 9\\n\",\n    \"20 30\\n2 3 4 5 4 5 4 5 6 7 8 9 10 11 12 13 14 15 16 17\\n\",\n    \"100 180\\n150 52 127 175 146 138 25 71 192 108 142 79 196 129 23 44 92 11 63 198 197 65 47 144 141 158 142 41 1 102 113 50 171 97 75 31 199 24 17 59 138 53 37 123 64 103 156 141 33 186 150 10 103 29 2 182 38 85 155 73 136 175 83 93 20 59 11 87 178 92 132 11 6 99 109 193 135 132 57 36 123 152 36 80 9 137 122 131 122 108 44 84 180 65 192 192 29 150 147 20\\n\",\n    \"100 154\\n132 88 72 98 184 47 176 56 68 168 137 88 188 140 198 18 162 139 94 133 90 91 37 156 196 28 186 1 51 47 4 92 18 51 37 121 86 195 153 195 183 191 15 24 104 174 94 83 102 61 131 40 149 46 22 112 13 136 133 177 3 175 160 152 172 48 44 174 77 100 155 157 167 174 64 109 118 194 120 7 8 179 36 149 58 145 163 163 45 14 164 111 176 196 42 161 71 148 192 38\\n\",\n    \"7 11\\n3 7 10 13 9 12 4\\n\",\n    \"10 20\\n5 12 21 14 23 17 24 11 25 22\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"7\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"8\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"8\\n\",\n    \"4\\n\",\n    \"10\\n\",\n    \"9\\n\",\n    \"4\\n\",\n    \"11\\n\",\n    \"10\\n\",\n    \"5\\n\",\n    \"12\\n\",\n    \"11\\n\",\n    \"5\\n\",\n    \"13\\n\",\n    \"12\\n\",\n    \"6\\n\",\n    \"14\\n\",\n    \"13\\n\",\n    \"6\\n\",\n    \"15\\n\",\n    \"14\\n\",\n    \"7\\n\",\n    \"16\\n\",\n    \"15\\n\",\n    \"7\\n\",\n    \"17\\n\",\n    \"16\\n\",\n    \"8\\n\",\n    \"18\\n\",\n    \"17\\n\",\n    \"8\\n\",\n    \"19\\n\",\n    \"18\\n\",\n    \"9\\n\",\n    \"20\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"7\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"8\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"8\\n\",\n    \"4\\n\",\n    \"10\\n\",\n    \"9\\n\",\n    \"4\\n\",\n    \"11\\n\",\n    \"10\\n\",\n    \"5\\n\",\n    \"12\\n\",\n    \"11\\n\",\n    \"5\\n\",\n    \"13\\n\",\n    \"12\\n\",\n    \"6\\n\",\n    \"14\\n\",\n    \"13\\n\",\n    \"6\\n\",\n    \"15\\n\",\n    \"14\\n\",\n    \"7\\n\",\n    \"16\\n\",\n    \"15\\n\",\n    \"7\\n\",\n    \"17\\n\",\n    \"16\\n\",\n    \"8\\n\",\n    \"18\\n\",\n    \"17\\n\",\n    \"8\\n\",\n    \"19\\n\",\n    \"18\\n\",\n    \"9\\n\",\n    \"20\\n\",\n    \"68\\n\",\n    \"44\\n\",\n    \"3\\n\",\n    \"5\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}