{
    "problem": "You are an expert Python programmer, and here is your task: The well-known Fibonacci sequence $F_0, F_1, F_2,\\ldots $ is defined as follows:   $F_0 = 0, F_1 = 1$.  For each $i \\geq 2$: $F_i = F_{i - 1} + F_{i - 2}$. \n\nGiven an increasing arithmetic sequence of positive integers with $n$ elements: $(a, a + d, a + 2\\cdot d,\\ldots, a + (n - 1)\\cdot d)$.\n\nYou need to find another increasing arithmetic sequence of positive integers with $n$ elements $(b, b + e, b + 2\\cdot e,\\ldots, b + (n - 1)\\cdot e)$ such that:  $0 < b, e < 2^{64}$,  for all $0\\leq i < n$, the decimal representation of $a + i \\cdot d$ appears as substring in the last $18$ digits of the decimal representation of $F_{b + i \\cdot e}$ (if this number has less than $18$ digits, then we consider all its digits). \n\n\n-----Input-----\n\nThe first line contains three positive integers $n$, $a$, $d$ ($1 \\leq n, a, d, a + (n - 1) \\cdot d < 10^6$).\n\n\n-----Output-----\n\nIf no such arithmetic sequence exists, print $-1$.\n\nOtherwise, print two integers $b$ and $e$, separated by space in a single line ($0 < b, e < 2^{64}$).\n\nIf there are many answers, you can output any of them.\n\n\n-----Examples-----\nInput\n3 1 1\n\nOutput\n2 1\nInput\n5 1 2\n\nOutput\n19 5\n\n\n\n-----Note-----\n\nIn the first test case, we can choose $(b, e) = (2, 1)$, because $F_2 = 1, F_3 = 2, F_4 = 3$.\n\nIn the second test case, we can choose $(b, e) = (19, 5)$ because:  $F_{19} = 4181$ contains $1$;  $F_{24} = 46368$ contains $3$;  $F_{29} = 514229$ contains $5$;  $F_{34} = 5702887$ contains $7$;  $F_{39} = 63245986$ contains $9$.",
    "solution": "[\"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n, a, d = map(int,input().split())\\nprint(368131125 * a % 10**9 * 12 * 10**9 + 1, 368131125 * d % 10**9 * 12 * 10**9)\", \"# Definitely not my solution. \\n# Just submit for the sake of the solution's beauty\\nn, a, d = map(int,input().split())\\nprint(368131125 * a % 10**9 * 12 * 10**9 + 1, 368131125 * d % 10**9 * 12 * 10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"_, a, d = list(map(int, input().split()))\\n\\nten_k = 10 ** 9\\nn = 12 * ten_k\\n\\n# F(n + 1) === 673419592000000001\\n# t = 84177449\\nt_inv = 1114945049\\n\\nu = 125 * a * t_inv % ten_k\\nv = 125 * d * t_inv % ten_k\\nb = u * n + 1\\ne = v * n\\nprint(b, e)\\n\", \"n,a,d = map(int,input().split())\\nit = 114945049\\nN = 12*(10**9)\\nu = 125*a*it%(10**9)\\nv = 125*d*it%(10**9)\\nprint(u*N+1,v*N)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\", \"n,a,d=map(int,input().split())\\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)\"]",
    "test": "{\n  \"inputs\": [\n    \"3 1 1\\n\",\n    \"5 1 2\\n\",\n    \"1000 1 1000\\n\",\n    \"999999 1 1\\n\",\n    \"1 2 179350\\n\",\n    \"2 1 1\\n\",\n    \"2 2 1\\n\",\n    \"100000 1 10\\n\",\n    \"1 999999 999999\\n\",\n    \"100 220905 13\\n\",\n    \"200000 2 4\\n\",\n    \"1234 5 777\\n\",\n    \"12345 3 50\\n\",\n    \"10 12347 98765\\n\",\n    \"1 999599 123123\\n\",\n    \"1 8888 999999\\n\",\n    \"1 3 196850\\n\",\n    \"1 4 948669\\n\",\n    \"1 5 658299\\n\",\n    \"1 6 896591\\n\",\n    \"1 7 8442\\n\",\n    \"1 8 402667\\n\",\n    \"1 9 152265\\n\",\n    \"1 10 654173\\n\",\n    \"1 100 770592\\n\",\n    \"1 1000 455978\\n\",\n    \"1 10000 744339\\n\",\n    \"1 100000 391861\\n\",\n    \"1 999999 172298\\n\",\n    \"1 123456 961946\\n\",\n    \"1 4545 497288\\n\",\n    \"2 1 905036\\n\",\n    \"2 1 497624\\n\",\n    \"2 1 504624\\n\",\n    \"2 1 295106\\n\",\n    \"3 123 240258\\n\",\n    \"3 123 166233\\n\",\n    \"3 144 18470\\n\",\n    \"3 144 273365\\n\",\n    \"100 32040 1\\n\",\n    \"100 66882 1\\n\",\n    \"100 770786 1\\n\",\n    \"100 502486 1\\n\",\n    \"1000 949515 1\\n\",\n    \"1000 955376 1\\n\",\n    \"1000 271461 1\\n\",\n    \"1000 491527 1\\n\",\n    \"10000 372590 1\\n\",\n    \"10000 104643 1\\n\",\n    \"10000 805492 1\\n\",\n    \"10000 363784 1\\n\",\n    \"100000 153165 1\\n\",\n    \"100000 644598 1\\n\",\n    \"100000 319258 1\\n\",\n    \"100000 761345 1\\n\",\n    \"100 861256 2\\n\",\n    \"100 418443 2\\n\",\n    \"100 909166 2\\n\",\n    \"100 521713 2\\n\",\n    \"1000 382556 2\\n\",\n    \"1000 522129 2\\n\",\n    \"1000 744513 2\\n\",\n    \"1000 317601 2\\n\",\n    \"10000 477707 2\\n\",\n    \"10000 237781 2\\n\",\n    \"10000 607429 2\\n\",\n    \"10000 830380 2\\n\",\n    \"100 971310 3\\n\",\n    \"100 739242 3\\n\",\n    \"100 474989 3\\n\",\n    \"100 393784 3\\n\",\n    \"1000 35927 3\\n\",\n    \"1000 568786 3\\n\",\n    \"1000 624056 3\\n\",\n    \"1000 142782 3\\n\",\n    \"10000 518687 3\\n\",\n    \"10000 921563 3\\n\",\n    \"10000 15775 3\\n\",\n    \"10000 221920 3\\n\",\n    \"100 74562 13\\n\",\n    \"100 700954 13\\n\",\n    \"100 459566 13\\n\",\n    \"1000 712815 13\\n\",\n    \"1000 465476 13\\n\",\n    \"1000 447399 13\\n\",\n    \"1000 462821 13\\n\",\n    \"10000 7175 13\\n\",\n    \"10000 454646 13\\n\",\n    \"10000 695354 13\\n\",\n    \"10000 194057 13\\n\",\n    \"1234 113 529\\n\",\n    \"1234 343 532\\n\",\n    \"1234 4444 776\\n\",\n    \"5234 458 31\\n\",\n    \"100 12334 6176\\n\",\n    \"300000 3 3\\n\",\n    \"400000 7 2\\n\",\n    \"500000 1 2\\n\",\n    \"666666 1 1\\n\",\n    \"777777 1 1\\n\",\n    \"888888 1 1\\n\",\n    \"1000 1 999\\n\",\n    \"999 10 1000\\n\",\n    \"777 1000 1000\\n\"\n  ],\n  \"outputs\": [\n    \"4417573500000000001 4417573500000000000\\n\",\n    \"4417573500000000001 8835147000000000000\\n\",\n    \"4417573500000000001 1573500000000000000\\n\",\n    \"4417573500000000001 4417573500000000000\\n\",\n    \"8835147000000000001 3807225000000000000\\n\",\n    \"4417573500000000001 4417573500000000000\\n\",\n    \"8835147000000000001 4417573500000000000\\n\",\n    \"4417573500000000001 8175735000000000000\\n\",\n    \"9082426500000000001 9082426500000000000\\n\",\n    \"74017500000000001 9428455500000000000\\n\",\n    \"8835147000000000001 5670294000000000000\\n\",\n    \"10087867500000000001 454609500000000000\\n\",\n    \"1252720500000000001 4878675000000000000\\n\",\n    \"3780004500000000001 5646727500000000000\\n\",\n    \"6053026500000000001 4902040500000000000\\n\",\n    \"11393268000000000001 9082426500000000000\\n\",\n    \"1252720500000000001 7343475000000000000\\n\",\n    \"5670294000000000001 7034671500000000000\\n\",\n    \"10087867500000000001 4217476500000000000\\n\",\n    \"2505441000000000001 641938500000000000\\n\",\n    \"6923014500000000001 9155487000000000000\\n\",\n    \"11340588000000000001 3068524500000000000\\n\",\n    \"3758161500000000001 5828977500000000000\\n\",\n    \"8175735000000000001 5309215500000000000\\n\",\n    \"9757350000000000001 10798512000000000000\\n\",\n    \"1573500000000000001 8329383000000000000\\n\",\n    \"3735000000000000001 4241416500000000000\\n\",\n    \"1350000000000000001 2769283500000000000\\n\",\n    \"9082426500000000001 3078903000000000000\\n\",\n    \"11954016000000000001 3158031000000000000\\n\",\n    \"1871557500000000001 2290668000000000000\\n\",\n    \"4417573500000000001 11050146000000000000\\n\",\n    \"4417573500000000001 10595364000000000000\\n\",\n    \"4417573500000000001 9609864000000000000\\n\",\n    \"4417573500000000001 8445291000000000000\\n\",\n    \"3361540500000000001 5373963000000000000\\n\",\n    \"3361540500000000001 6495625500000000000\\n\",\n    \"130584000000000001 4582545000000000000\\n\",\n    \"130584000000000001 1979827500000000000\\n\",\n    \"11054940000000000001 4417573500000000000\\n\",\n    \"4150827000000000001 4417573500000000000\\n\",\n    \"3807771000000000001 4417573500000000000\\n\",\n    \"8837721000000000001 4417573500000000000\\n\",\n    \"301852500000000001 4417573500000000000\\n\",\n    \"7700136000000000001 4417573500000000000\\n\",\n    \"2919883500000000001 4417573500000000000\\n\",\n    \"4649734500000000001 4417573500000000000\\n\",\n    \"11710365000000000001 4417573500000000000\\n\",\n    \"4143760500000000001 4417573500000000000\\n\",\n    \"8113662000000000001 4417573500000000000\\n\",\n    \"2558124000000000001 4417573500000000000\\n\",\n    \"9645127500000000001 4417573500000000000\\n\",\n    \"7042953000000000001 4417573500000000000\\n\",\n    \"9680463000000000001 4417573500000000000\\n\",\n    \"9496357500000000001 4417573500000000000\\n\",\n    \"1682316000000000001 8835147000000000000\\n\",\n    \"10708060500000000001 8835147000000000000\\n\",\n    \"3628701000000000001 8835147000000000000\\n\",\n    \"9523405500000000001 8835147000000000000\\n\",\n    \"9247866000000000001 8835147000000000000\\n\",\n    \"11233981500000000001 8835147000000000000\\n\",\n    \"4899205500000000001 8835147000000000000\\n\",\n    \"9761173500000000001 8835147000000000000\\n\",\n    \"9783964500000000001 8835147000000000000\\n\",\n    \"7044403500000000001 8835147000000000000\\n\",\n    \"6253531500000000001 8835147000000000000\\n\",\n    \"8682930000000000001 8835147000000000000\\n\",\n    \"5316285000000000001 1252720500000000000\\n\",\n    \"11869287000000000001 1252720500000000000\\n\",\n    \"2819191500000000001 1252720500000000000\\n\",\n    \"1763124000000000001 1252720500000000000\\n\",\n    \"10163134500000000001 1252720500000000000\\n\",\n    \"9960771000000000001 1252720500000000000\\n\",\n    \"5248116000000000001 1252720500000000000\\n\",\n    \"5979477000000000001 1252720500000000000\\n\",\n    \"9945994500000000001 1252720500000000000\\n\",\n    \"287380500000000001 1252720500000000000\\n\",\n    \"3221962500000000001 1252720500000000000\\n\",\n    \"7911120000000000001 1252720500000000000\\n\",\n    \"7115307000000000001 9428455500000000000\\n\",\n    \"11815119000000000001 9428455500000000000\\n\",\n    \"6583101000000000001 9428455500000000000\\n\",\n    \"4654402500000000001 9428455500000000000\\n\",\n    \"2442486000000000001 9428455500000000000\\n\",\n    \"5966326500000000001 9428455500000000000\\n\",\n    \"9784843500000000001 9428455500000000000\\n\",\n    \"4089862500000000001 9428455500000000000\\n\",\n    \"4121481000000000001 9428455500000000000\\n\",\n    \"5403519000000000001 9428455500000000000\\n\",\n    \"5060689500000000001 9428455500000000000\\n\",\n    \"7185805500000000001 8896381500000000000\\n\",\n    \"3227710500000000001 10149102000000000000\\n\",\n    \"11696634000000000001 8037036000000000000\\n\",\n    \"7248663000000000001 4944778500000000000\\n\",\n    \"6351549000000000001 6933936000000000000\\n\",\n    \"1252720500000000001 1252720500000000000\\n\",\n    \"6923014500000000001 8835147000000000000\\n\",\n    \"4417573500000000001 8835147000000000000\\n\",\n    \"4417573500000000001 4417573500000000000\\n\",\n    \"4417573500000000001 4417573500000000000\\n\",\n    \"4417573500000000001 4417573500000000000\\n\",\n    \"4417573500000000001 9155926500000000000\\n\",\n    \"8175735000000000001 1573500000000000000\\n\",\n    \"1573500000000000001 1573500000000000000\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}