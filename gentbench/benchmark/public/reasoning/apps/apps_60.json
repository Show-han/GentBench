{
    "problem": "You are an expert Python programmer, and here is your task: Natasha is going to fly on a rocket to Mars and return to Earth. Also, on the way to Mars, she will land on $n - 2$ intermediate planets. Formally: we number all the planets from $1$ to $n$. $1$ is Earth, $n$ is Mars. Natasha will make exactly $n$ flights: $1 \\to 2 \\to \\ldots n \\to 1$.\n\nFlight from $x$ to $y$ consists of two phases: take-off from planet $x$ and landing to planet $y$. This way, the overall itinerary of the trip will be: the $1$-st planet $\\to$ take-off from the $1$-st planet $\\to$ landing to the $2$-nd planet $\\to$ $2$-nd planet $\\to$ take-off from the $2$-nd planet $\\to$ $\\ldots$ $\\to$ landing to the $n$-th planet $\\to$ the $n$-th planet $\\to$ take-off from the $n$-th planet $\\to$ landing to the $1$-st planet $\\to$ the $1$-st planet.\n\nThe mass of the rocket together with all the useful cargo (but without fuel) is $m$ tons. However, Natasha does not know how much fuel to load into the rocket. Unfortunately, fuel can only be loaded on Earth, so if the rocket runs out of fuel on some other planet, Natasha will not be able to return home. Fuel is needed to take-off from each planet and to land to each planet. It is known that $1$ ton of fuel can lift off $a_i$ tons of rocket from the $i$-th planet or to land $b_i$ tons of rocket onto the $i$-th planet. \n\nFor example, if the weight of rocket is $9$ tons, weight of fuel is $3$ tons and take-off coefficient is $8$ ($a_i = 8$), then $1.5$ tons of fuel will be burnt (since $1.5 \\cdot 8 = 9 + 3$). The new weight of fuel after take-off will be $1.5$ tons. \n\nPlease note, that it is allowed to burn non-integral amount of fuel during take-off or landing, and the amount of initial fuel can be non-integral as well.\n\nHelp Natasha to calculate the minimum mass of fuel to load into the rocket. Note, that the rocket must spend fuel to carry both useful cargo and the fuel itself. However, it doesn't need to carry the fuel which has already been burnt. Assume, that the rocket takes off and lands instantly.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 1000$)\u00a0\u2014 number of planets.\n\nThe second line contains the only integer $m$ ($1 \\le m \\le 1000$)\u00a0\u2014 weight of the payload.\n\nThe third line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 1000$), where $a_i$ is the number of tons, which can be lifted off by one ton of fuel.\n\nThe fourth line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 1000$), where $b_i$ is the number of tons, which can be landed by one ton of fuel. \n\nIt is guaranteed, that if Natasha can make a flight, then it takes no more than $10^9$ tons of fuel.\n\n\n-----Output-----\n\nIf Natasha can fly to Mars through $(n - 2)$ planets and return to Earth, print the minimum mass of fuel (in tons) that Natasha should take. Otherwise, print a single number $-1$.\n\nIt is guaranteed, that if Natasha can make a flight, then it takes no more than $10^9$ tons of fuel.\n\nThe answer will be considered correct if its absolute or relative error doesn't exceed $10^{-6}$. Formally, let your answer be $p$, and the jury's answer be $q$. Your answer is considered correct if $\\frac{|p - q|}{\\max{(1, |q|)}} \\le 10^{-6}$.\n\n\n-----Examples-----\nInput\n2\n12\n11 8\n7 5\n\nOutput\n10.0000000000\n\nInput\n3\n1\n1 4 1\n2 5 3\n\nOutput\n-1\n\nInput\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\nOutput\n85.4800000000\n\n\n\n-----Note-----\n\nLet's consider the first example.\n\nInitially, the mass of a rocket with fuel is $22$ tons. At take-off from Earth one ton of fuel can lift off $11$ tons of cargo, so to lift off $22$ tons you need to burn $2$ tons of fuel. Remaining weight of the rocket with fuel is $20$ tons. During landing on Mars, one ton of fuel can land $5$ tons of cargo, so for landing $20$ tons you will need to burn $4$ tons of fuel. There will be $16$ tons of the rocket with fuel remaining. While taking off from Mars, one ton of fuel can raise $8$ tons of cargo, so to lift off $16$ tons you will need to burn $2$ tons of fuel. There will be $14$ tons of rocket with fuel after that. During landing on Earth, one ton of fuel can land $7$ tons of cargo, so for landing $14$ tons you will need to burn $2$ tons of fuel. Remaining weight is $12$ tons, that is, a rocket without any fuel.\n\nIn the second case, the rocket will not be able even to take off from Earth.",
    "solution": "[\"#      \\nimport collections, atexit, math, sys\\nfrom functools import cmp_to_key\\n#key=cmp_to_key(lambda x,y: 1 if x not in y else -1 )\\n\\nsys.setrecursionlimit(1000000)\\ndef getIntList():\\n    return list(map(int, input().split()))    \\n\\nimport bisect \\ntry :\\n    #raise ModuleNotFoundError\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        print(*args, **kwargs, file=sys.stderr)\\n    dprint('debug mode')\\nexcept ModuleNotFoundError:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\ndef memo(func):  \\n    cache={}  \\n    def wrap(*args):  \\n        if args not in cache:  \\n            cache[args]=func(*args)  \\n        return cache[args]  \\n    return wrap\\n\\n@memo\\ndef comb (n,k):\\n    if k==0: return 1\\n    if n==k: return 1\\n    return comb(n-1,k-1) + comb(n-1,k)\\n\\ninId = 0\\noutId = 0\\nif inId>0:\\n    dprint('use input', inId)\\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\nif outId>0:\\n    dprint('use output', outId)\\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n    atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n    \\nN, = getIntList()\\nM, = getIntList()\\nza = getIntList()\\nzb = getIntList()\\n\\nif 1 in za or 1 in zb:\\n    print(-1)\\n    return\\n    \\n\\ndef trywork(fuel):\\n    for i in range(N):\\n        now = fuel + M\\n        cost = now / za[i]\\n        fuel-=cost\\n        if fuel <0: return False\\n        now = fuel +M\\n        cost = now / zb[ (i+1)%N]\\n        fuel-=cost\\n        if fuel<0: return False\\n    return True\\n\\nr0 = 0\\nr1 = 10**9+1\\n\\n\\nwhile r1-r0 > 1e-7 and (r1-r0) *10000000 >r1:\\n    m = (r1+r0)/2\\n    f = trywork(m)\\n    if f:\\n        r1 = m\\n    else:\\n        r0 = m\\n\\nprint(r1)\\n    \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"from functools import reduce\\nn=int(input())\\nm=int(input())\\na=input().split()\\na=[int(x) for x in a]\\nb=input().split()\\nb=[int(x) for x in b]\\nk=m\\ny=1\\nfor i in range(len(a)):\\n    k=k*a[i]*b[i]\\na=[int(x)-1 for x in a]\\nb=[int(x)-1 for x in b]\\nfor i in range(len(a)):\\n    y=y*a[i]*b[i]\\nif(y==0):\\n    print(-1)\\nelse:\\n    print((k/y)-m)\\n    \\n\", \"input()\\nm=int(input())\\nv=m\\ntry:\\n for a in map(int, input().split() + input().split()):\\n   v*=a\\n   v/=a-1\\n print(v-m)\\nexcept ZeroDivisionError:\\n print(-1)\", \"input()\\nm=int(input())\\nv=m\\ntry:\\n for a in map(int, input().split() + input().split()):\\n   v*=a/(a-1)\\n print(v-m)\\nexcept ZeroDivisionError:\\n print(-1)\", \"i=input\\ni()\\nm=int(i())\\nv=m\\ntry:\\n for a in map(int, (i()+' '+i()).split()):v*=a/(a-1)\\n print(v-m)\\nexcept:\\n print(-1)\", \"i=input\\ni()\\nm=int(i())\\nv=m\\ntry:\\n for a in map(int, (i()+' '+i()).split()):v*=a/(a-1)\\nexcept:v=m-1\\nprint(v-m)\", \"t=int(input())\\nmass=int(input())\\narr=list(map(int,input().split()))\\nbrr=list(map(int,input().split()))\\nflag=1\\nfor i in range(t):\\n\\tif arr[i]==1 or brr[i]==1:\\n\\t\\tflag=0\\n\\t\\tbreak\\nif flag:\\n\\tans=mass*brr[0]/(brr[0]-1)\\n\\tfor i in range(t-1,0,-1):\\n\\t\\tans=ans*arr[i]/(arr[i]-1)\\n\\t\\tans=ans*brr[i]/(brr[i]-1)\\n\\tans=ans*arr[0]/(arr[0]-1)\\n\\tprint(ans-mass)\\nelse:\\n\\tprint(\\\"-1\\\")\", \"# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\nCreated on Thu Jul 26 20:46:22 2018\\n\\n@author: chirayu jain\\n\\\"\\\"\\\"\\n#PROBLEM A FLY\\n#DIVISION 1 499 CODEFORCES\\nplanet = int(input())\\nmass = int(input())\\ncase = 0\\nA = [int(x) for x in input().split()]\\nB = [int(x) for x in input().split()]\\nfor i in range(0,planet):\\n    if A[i] == 1 or B[i] == 1:\\n        case = 1\\n        break\\nif case==0:\\n   temp = mass*1.0\\n   temp = temp / (1.0 - 1.0/(1.0*B[0]))\\n   for i in range(planet-1,0,-1):\\n       temp = temp / (1.0 - 1.0/(A[i]*1.0))\\n       temp = temp / (1.0 - 1.0/(B[i]*1.0))\\n    \\n   temp = temp / (1.0 - 1.0/(A[0]*1.0))\\n   temp = temp - mass*1.0\\nif case==1:\\n    print(\\\"-1\\\")\\nelse:\\n    print(temp)\", \"from decimal import *\\ngetcontext().prec = 28\\nn,m=int(input()),int(input())\\nlift=list(map(int,input().split()))\\ndrop=list(map(int,input().split()))\\nfuel=0\\nif drop[0]==1:\\n    print(-1);return()\\nelse:\\n    r=Decimal(m)/Decimal(drop[0]-1)\\n    m+=r;fuel+=r\\nlift=lift[::-1];drop=drop[::-1]\\nfor i in range(n-1):\\n    if lift[i]==1:\\n        print(-1);return()\\n    else:\\n        r=Decimal(m)/Decimal(lift[i]-1)\\n        m+=r;fuel+=r\\n    if drop[i]==1:\\n        print(-1);return()\\n    else:\\n        r=Decimal(m)/Decimal(drop[i]-1)\\n        m+=r;fuel+=r\\nif lift[n-1]==1:\\n    print(-1);return()\\nelse:\\n    r=Decimal(m)/Decimal(lift[n-1]-1)\\n    m+=r;fuel+=r\\nprint(fuel)\", \"from decimal import *\\ngetcontext().prec = 28\\nn,m=int(input()),int(input())\\nlift=list(map(int,input().split()))\\ndrop=list(map(int,input().split()))\\nfuel=0\\nif drop[0]==1:\\n    print(-1);return()\\nelse:\\n    r=Decimal(m)/Decimal(drop[0]-1)\\n    m+=r;fuel+=r\\nlift=lift[::-1];drop=drop[::-1]\\nfor i in range(n-1):\\n    if lift[i]==1:\\n        print(-1);return()\\n    else:\\n        r=Decimal(m)/Decimal(lift[i]-1)\\n        m+=r;fuel+=r\\n    if drop[i]==1:\\n        print(-1);return()\\n    else:\\n        r=Decimal(m)/Decimal(drop[i]-1)\\n        m+=r;fuel+=r\\nif lift[n-1]==1:\\n    print(-1);return()\\nelse:\\n    r=Decimal(m)/Decimal(lift[n-1]-1)\\n    m+=r;fuel+=r\\nprint(fuel)\", \"\\n\\ni=input\\ni()\\nm=int(i())\\nv=m\\ntry:\\n for a in map(int, (i()+' '+i()).split()):v*=a/(a-1)\\nexcept:v=m-1\\nprint(v-m)\", \"n = int(input())\\nm = int(input())\\na = list(map(int, input().rstrip().split()))\\nb = list(map(int, input().rstrip().split()))\\nfuel_used = 0\\nfor i in range(n-1):\\n\\tfuel_used += (1-fuel_used)/a[i]\\n\\tfuel_used += (1-fuel_used)/b[i+1]\\nfuel_used += (1-fuel_used)/a[n-1]\\nfuel_used += (1-fuel_used)/b[0]\\ntry:\\n\\tfuel_required = m*(fuel_used)/(1-fuel_used)\\n\\tprint(fuel_required)\\nexcept ZeroDivisionError:\\n\\tprint(-1)\", \"R = lambda: map(int, input().split())\\nn = int(input())\\nm = int(input())\\na, b = list(R()), list(R())\\nb = b[1:] + b[:1]\\nl, r = 0, 2 * 10**9\\nwhile (r - l) / max(1, r) >= 1e-7 and l < 10**9 + 1:\\n    rem = mid = (l + r) / 2\\n    for i in range(n):\\n        rem -= (m + max(0, rem)) / a[i]\\n        rem -= (m + max(0, rem)) / b[i]\\n    if rem < 0:\\n        l = mid\\n    else:\\n        r = mid\\nprint(l if l < 10**9 + 1 else -1)\", \"def main():\\n    input()\\n    x = m = float(input())\\n    try:\\n        for s in input(), input():\\n            for a in map(float, s.split()):\\n                x *= a / (a - 1.)\\n        print(x - m)\\n    except ZeroDivisionError:\\n        print(-1)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"N = int(input())\\nM = int(input())\\nA = list(map(int, input().split()))\\nB = list(map(int, input().split()))\\n\\nimp = fuel = 0\\nfor i in range(N, 0, -1):\\n    if i == N: i = 0\\n    if B[i] == 1:\\n        imp = 1\\n        break\\n    fuel += (M + fuel) / (B[i] - 1)\\n    if A[i - 1] == 1:\\n        imp = 1\\n        break\\n    fuel += (M + fuel) / (A[i - 1] - 1)\\nprint(-1 if imp else '{:.7f}'.format(fuel))\", \"import sys;\\nimport math;\\n\\n\\ndef solution( n, m, a, b):\\n    a += [a[0]];\\n    b += [b[0]];\\n    mass = [0] * len(a);\\n    mass[len(a)-1] = m;\\n    for i in range(len(a)-1, 0, -1):\\n        tmp = mass[i];\\n        if b[i]-1<=0:\\n            return -1;\\n        extra_fuel = tmp/(b[i]-1);\\n        tmp+=extra_fuel;\\n        if a[i-1]-1<=0:\\n            return -1;\\n        extra_fuel = tmp/(a[i-1]-1);\\n        tmp+=extra_fuel;\\n        mass[i-1] = tmp;\\n\\n    return mass[0] - m;\\n\\nn = int(sys.stdin.readline().rstrip() );\\nm = int(sys.stdin.readline().rstrip() );\\n\\na = [ int(x) for x in sys.stdin.readline().rstrip().split() ];\\nb = [ int(x) for x in sys.stdin.readline().rstrip().split() ];\\n\\nres = solution( n, m, a, b );\\n\\nsys.stdout.write(str(res));\\n\\n\", \"i=input\\ni()\\nm=int(i())\\nv=m\\ntry:\\n for a in map(int, (i()+' '+i()).split()):v*=a/(a-1)\\nexcept:v=m-1\\nprint(v-m)\", \"import sys\\n\\ndef __starting_point():\\n\\tn = int(sys.stdin.readline().strip())\\n\\tm = int(sys.stdin.readline().strip())\\n\\teps = 2e-7\\n\\toff, land = [], []\\n\\toff = list(map(int,sys.stdin.readline().strip().split(' ')))\\n\\tland = list(map(int,sys.stdin.readline().strip().split(' ')))\\n\\tif 1 in off or 1 in land:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tl, r = 0, 10**9\\n\\t\\t#print (10/3)\\n\\t\\tdef is_ok(target):\\n\\t\\t\\ttotal = m + target\\n\\t\\t\\tremain = total\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\tremain -= remain/off[i]\\n\\t\\t\\t\\t#print (remain)\\n\\t\\t\\t\\tif remain < m and abs(remain - m) > eps:\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\tremain -= remain / land[(i+1)%n]\\n\\t\\t\\t\\t#print (remain)\\n\\t\\t\\t\\tif remain < m and abs(remain - m) > eps:\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\treturn True\\n\\t\\t#is_ok(6)\\n\\t\\twhile True:\\n\\t\\t\\tmid = (l + r) / 2\\n\\t\\t\\tif abs(r-l) <= eps:\\n\\t\\t\\t\\tprint (mid)\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif is_ok(mid):\\n\\t\\t\\t\\tr = mid\\n\\t\\t\\telse:\\n\\t\\t\\t\\tl = mid\\n\\n\\n__starting_point()\", \"n = int(input())\\nm = int(input())\\na = list(map(float, input().split()))\\nb = list(map(float, input().split()))\\nif 1 in a or 1 in b:\\n    print(-1)\\n    return\\npayload = m\\npayload += payload / (a[0] - 1)\\nfor i in range(n - 1, 0 , -1):\\n    payload += payload / (a[i] - 1)\\n    payload += payload / (b[i] - 1)\\npayload += payload / (b[0] - 1)\\nprint(payload - m)\\n\", \"n=int(input())\\nm=int(input())\\na=list(map(float,input().split()))\\nb=list(map(float,input().split()))\\ni=n\\nf=0\\nwhile i>=1 :\\n    if (a[i-1] != 1) and (b[i-1] != 1) :\\n        f=(1/(1- 1/a[i-1]))*(f+(m/a[i-1]))\\n        f=(1/(1- 1/b[i-1]))*(f+(m/b[i-1]))\\n        i-=1\\n    else :\\n        break\\nif f<=(10**9) and i==0 :\\n    print(f)\\nelse :\\n    print(-1)\\n\\n\", \"rd = lambda: list(map(int, input().split()))\\nn, m = rd(), rd()[0]\\nr = m\\nfor x in rd() + rd():\\n    if x > 1:\\n        r *= x\\n        r /= x - 1\\n    else:\\n        print(-1)\\n        return\\nprint(r - m)\\n\", \"n, m = int(input()), int(input())\\na, b = [int(i) for i in input().split()], [int(i) for i in input().split()]\\n\\ndef check(t):\\n    for i in range(n):\\n        t -= (t + m) / a[i]\\n        if t < 0:\\n            return 0\\n        t -= (t + m) / b[(i + 1) % n]\\n        if t < 0:\\n            return 0\\n    return 1\\n\\nl, r = 0, 10 ** 10\\nif not check(r):\\n    print(-1)\\nelse:\\n    for i in range(300):\\n        mid = (l + r) / 2\\n        if check(mid):\\n            r = mid\\n        else:\\n            l = mid\\n    print(l)\\n\", \"n = int(input())\\nm = int(input())\\na = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nb = b[1:]+b[0:1]\\nc = m\\nd = 0\\nfor i in range(n):\\n    k = n-1-i\\n    if b[k] <= 1 or a[k] <= 1:\\n        d = -1\\n    else:\\n        c = c*(1+1/(b[k]-1))*(1+1/(a[k]-1))\\nif d == -1:\\n    print(d)\\nelse:\\n    print(c-m)\", \"import sys\\n\\nn = int(input())\\nm = float(input())\\na = list(map(float,input().split()))\\nb = list(map(float,input().split()))\\n\\nfor i in a:\\n\\tif i <= 1.0:\\n\\t\\tprint(str(-1))\\n\\t\\treturn\\nfor i in b:\\n\\tif i <= 1.0:\\n\\t\\tprint(str(-1))\\n\\t\\treturn\\n\\ns = m\\ns += s/(b[0] - 1.0)\\n\\nfor i in range(n-1,0,-1):\\n\\ts += s/(a[i] - 1.0)\\n\\ts += s/(b[i] - 1.0)\\n\\ns += s/(a[0] - 1.0)\\nprint(\\\"{0:.10f}\\\".format(s - m))\", \"i=input\\n\\ni()\\n\\nm=int(i())\\n\\nv=m\\n\\ntry:\\n\\n for a in map(int, (i()+' '+i()).split()):v*=a/(a-1)\\n\\nexcept:v=m-1\\n\\nprint(v-m)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"2\\n12\\n11 8\\n7 5\\n\",\n    \"3\\n1\\n1 4 1\\n2 5 3\\n\",\n    \"6\\n2\\n4 6 3 3 5 6\\n2 6 3 6 5 3\\n\",\n    \"3\\n3\\n1 2 1\\n2 2 2\\n\",\n    \"4\\n4\\n2 3 2 2\\n2 3 4 3\\n\",\n    \"5\\n2\\n1 2 2 1 2\\n4 5 1 4 1\\n\",\n    \"7\\n7\\n3 2 6 2 2 2 5\\n4 7 5 6 2 2 2\\n\",\n    \"2\\n1000\\n12 34\\n56 78\\n\",\n    \"8\\n4\\n1 1 4 1 3 1 8 1\\n1 1 1 1 1 3 1 2\\n\",\n    \"9\\n2\\n8 7 1 1 3 7 1 2 4\\n4 1 1 8 7 7 1 1 5\\n\",\n    \"10\\n10\\n9 8 8 7 2 10 2 9 2 4\\n3 10 6 2 6 6 5 9 4 5\\n\",\n    \"20\\n12\\n3 9 12 13 16 18 9 9 19 7 2 5 17 14 7 7 15 16 5 7\\n16 9 13 5 14 10 4 3 16 16 12 20 17 11 4 5 5 14 6 15\\n\",\n    \"30\\n5\\n25 1 28 1 27 25 24 1 28 1 12 1 29 16 1 1 1 1 27 1 24 1 1 1 1 1 1 1 30 3\\n1 22 1 1 24 2 13 1 16 21 1 27 14 16 1 1 7 1 1 18 1 23 10 1 15 16 16 15 10 1\\n\",\n    \"40\\n13\\n1 1 1 23 21 1 1 1 1 1 40 32 1 21 1 8 1 1 36 15 33 1 30 1 1 37 22 1 4 39 7 1 9 37 1 1 1 28 1 1\\n1 34 17 1 38 20 8 14 1 18 29 3 21 21 18 14 1 11 1 1 23 1 25 1 14 1 7 31 9 20 25 1 1 1 1 8 26 12 1 1\\n\",\n    \"50\\n19\\n17 7 13 42 19 25 10 25 2 36 17 40 30 48 34 43 34 20 5 15 8 7 43 35 21 40 40 19 30 11 49 7 24 23 43 30 38 49 10 8 30 11 28 50 48 25 25 20 48 24\\n49 35 10 22 24 50 50 7 6 13 16 35 12 43 50 44 35 33 38 49 26 18 23 37 7 38 23 20 28 48 41 16 6 32 32 34 11 39 38 9 38 23 16 31 37 47 33 20 46 30\\n\",\n    \"60\\n21\\n11 35 1 28 39 13 19 56 13 13 21 25 1 1 23 1 52 26 53 1 1 1 30 39 1 7 1 1 3 1 1 10 1 1 37 1 1 25 1 1 1 53 1 3 48 1 6 5 4 15 1 14 25 53 25 38 27 1 1 1\\n1 1 1 35 40 58 10 22 1 56 1 59 1 6 33 1 1 1 1 18 14 1 1 40 25 47 1 34 1 1 53 1 1 25 1 45 1 1 25 34 3 1 1 1 53 27 11 58 1 1 1 10 12 1 1 1 31 52 1 1\\n\",\n    \"70\\n69\\n70 66 57 58 24 60 39 2 48 61 65 22 10 26 68 62 48 25 12 14 45 57 6 30 48 15 46 33 42 28 69 42 64 25 24 8 62 12 68 53 55 20 32 70 3 5 41 49 16 26 2 34 34 20 39 65 18 47 62 31 39 28 61 67 7 14 31 31 53 54\\n40 33 24 20 68 20 22 39 53 56 48 38 59 45 47 46 7 69 11 58 61 40 35 38 62 66 18 36 44 48 67 24 14 27 67 63 68 30 50 6 58 7 6 35 20 58 6 12 12 23 14 2 63 27 29 22 49 16 55 40 70 27 27 70 42 38 66 55 69 47\\n\",\n    \"80\\n21\\n65 4 26 25 1 1 1 1 1 1 60 1 29 43 48 6 48 13 29 1 1 62 1 1 1 1 1 1 1 26 9 1 22 1 35 13 66 36 1 1 1 38 55 21 70 1 58 70 1 1 38 1 1 20 1 1 51 1 1 28 1 23 11 1 39 47 1 52 41 1 63 1 1 52 1 45 11 10 80 1\\n1 1 25 30 1 1 55 54 1 48 10 37 22 1 74 1 78 13 1 65 32 1 1 1 1 69 5 59 1 1 65 1 40 1 31 1 1 75 54 1 60 1 1 1 1 1 1 1 11 29 36 1 72 71 52 1 1 1 37 1 1 75 43 9 53 1 62 1 29 1 40 27 59 74 41 53 19 30 1 73\\n\",\n    \"90\\n35\\n1 68 16 30 24 1 1 1 35 1 1 67 1 1 1 1 33 16 37 77 83 1 77 26 1 1 68 67 70 62 1 47 1 1 1 84 1 65 1 32 83 1 1 1 28 1 71 76 84 1 1 5 1 74 10 1 1 1 38 87 13 1 7 66 81 49 1 9 1 11 1 25 1 1 1 1 7 1 1 36 61 47 51 1 1 69 40 1 37 1\\n40 1 21 1 19 51 37 52 64 1 86 1 5 24 1 1 1 19 36 1 1 77 24 4 1 18 89 1 1 1 1 1 29 22 1 80 32 36 6 1 63 1 30 1 1 1 86 79 73 52 9 1 1 11 7 1 25 20 1 20 1 49 1 37 1 41 1 1 1 1 54 55 1 10 1 1 1 1 1 1 66 1 68 1 1 1 1 53 1 1\\n\",\n    \"2\\n1\\n1 1\\n1 1\\n\",\n    \"2\\n1\\n1 1\\n2 2\\n\",\n    \"2\\n1\\n2 2\\n1 1\\n\",\n    \"2\\n1\\n2 2\\n2 2\\n\",\n    \"2\\n2\\n1 1\\n1 1\\n\",\n    \"2\\n2\\n1 1\\n2 2\\n\",\n    \"2\\n2\\n2 2\\n1 1\\n\",\n    \"2\\n2\\n2 2\\n2 2\\n\",\n    \"40\\n55\\n1 382 1 1 1 629 111 689 396 614 1 1 995 148 7 820 913 1 1 169 157 1 702 1 159 1 1 226 1 253 1 319 1 130 1 1 1 466 1 756\\n1 23 555 1 412 1 1 373 316 234 888 1 112 818 33 443 313 1 235 1 1 610 110 535 1 445 1 386 1 1 758 1 292 1 862 1 244 428 530 1\\n\",\n    \"49\\n1\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\n\",\n    \"2\\n12\\n11 8\\n1 1\\n\",\n    \"3\\n3\\n7 11 17\\n19 31 33\\n\"\n  ],\n  \"outputs\": [\n    \"10.0000000000\\n\",\n    \"-1\\n\",\n    \"85.4800000000\\n\",\n    \"-1\\n\",\n    \"284.0000000000\\n\",\n    \"-1\\n\",\n    \"4697.0000000000\\n\",\n    \"159.2650775220\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"3075.7142857143\\n\",\n    \"4670.8944493007\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"7832.1821424977\\n\",\n    \"-1\\n\",\n    \"217989.4794743629\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"15.0000000000\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"30.0000000000\\n\",\n    \"-1\\n\",\n    \"695580114.6380882263\\n\",\n    \"-1\\n\",\n    \"1.6012429470\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}