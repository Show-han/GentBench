{
    "problem": "You are an expert Python programmer, and here is your task: Maxim has opened his own restaurant! The restaurant has got a huge table, the table's length is p meters.\n\nMaxim has got a dinner party tonight, n guests will come to him. Let's index the guests of Maxim's restaurant from 1 to n. Maxim knows the sizes of all guests that are going to come to him. The i-th guest's size (a_{i}) represents the number of meters the guest is going to take up if he sits at the restaurant table.\n\nLong before the dinner, the guests line up in a queue in front of the restaurant in some order. Then Maxim lets the guests in, one by one. Maxim stops letting the guests in when there is no place at the restaurant table for another guest in the queue. There is no place at the restaurant table for another guest in the queue, if the sum of sizes of all guests in the restaurant plus the size of this guest from the queue is larger than p. In this case, not to offend the guest who has no place at the table, Maxim doesn't let any other guest in the restaurant, even if one of the following guests in the queue would have fit in at the table.\n\nMaxim is now wondering, what is the average number of visitors who have come to the restaurant for all possible n! orders of guests in the queue. Help Maxim, calculate this number.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of guests in the restaurant. The next line contains integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 50) \u2014 the guests' sizes in meters. The third line contains integer p (1 \u2264 p \u2264 50) \u2014 the table's length in meters. \n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nIn a single line print a real number \u2014 the answer to the problem. The answer will be considered correct, if the absolute or relative error doesn't exceed 10^{ - 4}.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n3\n\nOutput\n1.3333333333\n\n\n\n-----Note-----\n\nIn the first sample the people will come in the following orders:   (1, 2, 3) \u2014 there will be two people in the restaurant;  (1, 3, 2) \u2014 there will be one person in the restaurant;  (2, 1, 3) \u2014 there will be two people in the restaurant;  (2, 3, 1) \u2014 there will be one person in the restaurant;  (3, 1, 2) \u2014 there will be one person in the restaurant;  (3, 2, 1) \u2014 there will be one person in the restaurant. \n\nIn total we get (2 + 1 + 2 + 1 + 1 + 1) / 6 = 8 / 6 = 1.(3).",
    "solution": "[\"import math\\n\\nn = int(input())\\na = [int(x) for x in input().split()]\\np = int(input())\\n\\nsum=0;\\nfor x in range(n):\\n\\tsum+=a[x]\\nif(sum<=p):\\n\\tprint(n)\\nelse:\\n\\tans=0\\n\\tfor i in range(n):\\n\\t\\tdp = [[[0 for z in range(55)] for y in range(55)] for x in range(55)]\\n\\t\\tdp[-1][0][0]=1\\n\\t\\tfor j in range(n):\\n\\t\\t\\tif(j==i):\\n\\n\\t\\t\\t\\tfor k in range(n):\\n\\t\\t\\t\\t\\tfor z in range(p+1):\\n\\t\\t\\t\\t\\t\\tdp[j][k][z]=dp[j-1][k][z]\\n\\t\\t\\t\\tcontinue\\n\\n\\t\\t\\tfor k in range(n):\\n\\n\\t\\t\\t\\tfor z in range(p+1):\\n\\n\\t\\t\\t\\t\\tif(z+a[j]<=p):\\n\\t\\t\\t\\t\\t\\tdp[j][k+1][z+a[j]]+=dp[j-1][k][z]\\n\\t\\t\\t\\t\\tdp[j][k][z]+=dp[j-1][k][z]\\n\\n\\n\\t\\tfor k in range(n):\\n\\t\\t\\tfor z in range(p+1):\\n\\t\\t\\t\\tif(z+a[i]>p):\\n\\t\\t\\t\\t\\tans+=k*dp[n-1][k][z]*math.factorial(k)*math.factorial(n-k-1)\\n\\n\\tprint(ans/math.factorial(n))\\n\", \"n = input()\\nn = int(n)\\narr = [0] * n\\nfact = [0] * 51\\na = input().split()\\np = input()\\np = int(p)\\n\\nfor i in range(n):\\n\\tarr[i] = int(a[i])\\n\\nif n == 1:\\n\\tif arr[0] <= p:\\n\\t\\tprint(1)\\n\\telse:\\n\\t\\tprint(0)\\n\\treturn\\n\\ndef pre():\\n\\tfact[0] = 1\\n\\tfor i in range(1, 51):\\n\\t\\tfact[i] = fact[i - 1] * i\\n\\ndef get(arr, min_sum, max_sum):\\n\\tways = [[0 for i in range(max_sum + 1)] for i in range(len(arr) + 1)]\\n\\tways[0][0] = 1\\n\\tfor i in range(len(arr)):\\n\\t\\tfor j in range(i, -1, -1):\\n\\t\\t\\tfor k in range(max_sum, -1, -1):\\n\\t\\t\\t\\tif k + arr[i] <= max_sum:\\n\\t\\t\\t\\t\\tways[j + 1][k + arr[i]] += ways[j][k]\\n\\n\\tans = 0\\n\\tcounted = 0\\n\\tfor i in range(0, len(arr) + 1):\\n\\t\\tfor j in range(min_sum, max_sum + 1):\\n\\t\\t\\tans += fact[i] * fact[n - i - 1] * ways[i][j] * i\\n\\t\\t\\tcounted += fact[i] * fact[n - i - 1] * ways[i][j]\\n\\n\\treturn ans, counted\\n\\npre()\\ntot = 0\\ncount = 0\\nsm = 0\\nfor i in range(n):\\n\\tsm += arr[i]\\n\\tarr1 = [0] * (n - 1)\\n\\tgot = 0\\n\\tfor j in range(n):\\n\\t\\tif j == i:\\n\\t\\t\\tcontinue\\n\\t\\tarr1[got] = arr[j]\\n\\t\\tgot += 1\\n\\thow_many = get(arr1, max(0, p - arr[i] + 1), p)\\n\\ttot += how_many[0]\\n\\tcount += how_many[1]\\n\\ndef get_div(a, b):\\t#a / b\\n\\tres = a // b\\n\\ta %= b\\n\\tfor i in range(1, 10):\\n\\t\\ta = int(a)\\n\\t\\ta *= 10\\n\\t\\tx = a // b\\n\\t\\tx1 = x\\n\\t\\tres += pow(10, -i) * x1\\n\\t\\ta -= x * b\\n\\treturn res\\n\\nif sm <= p:\\n\\tprint(n)\\nelse:\\n\\tprint(get_div(tot, fact[n]))\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"3\\n1 2 3\\n3\\n\",\n    \"9\\n2 2 2 2 2 2 2 1 2\\n9\\n\",\n    \"7\\n2 1 1 2 1 1 2\\n2\\n\",\n    \"8\\n3 1 5 6 1 5 4 4\\n7\\n\",\n    \"2\\n1 3\\n3\\n\",\n    \"2\\n1 2\\n2\\n\",\n    \"5\\n1 2 3 1 2\\n3\\n\",\n    \"9\\n1 2 2 7 4 4 1 4 7\\n7\\n\",\n    \"6\\n1 1 1 1 1 1\\n1\\n\",\n    \"10\\n35 5 7 41 17 27 32 9 45 40\\n30\\n\",\n    \"27\\n38 39 19 33 30 42 34 16 40 9 5 31 28 7 24 37 22 46 25 23 21 30 28 24 48 13 37\\n24\\n\",\n    \"41\\n37 6 18 6 25 32 3 1 1 42 25 17 31 8 42 8 38 8 38 4 34 46 10 10 9 22 39 23 47 7 31 14 19 1 42 13 6 11 10 25 38\\n12\\n\",\n    \"49\\n46 42 3 1 42 37 25 21 47 22 49 50 19 35 32 35 4 50 19 39 1 39 28 18 29 44 49 34 8 22 11 18 14 15 10 17 36 2 1 50 20 7 49 4 25 9 45 10 40\\n34\\n\",\n    \"3\\n36 44 44\\n46\\n\",\n    \"24\\n15 4 49 1 9 19 31 47 49 32 40 49 10 8 23 23 39 43 39 30 41 8 9 42\\n38\\n\",\n    \"16\\n3 5 3 1 4 2 3 2 1 4 5 3 5 2 2 4\\n39\\n\",\n    \"23\\n2 2 1 1 2 2 1 1 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1\\n2\\n\",\n    \"18\\n2 1 2 2 1 2 1 1 2 2 1 2 2 1 2 1 1 2\\n8\\n\",\n    \"40\\n5 8 2 14 14 19 14 2 12 10 17 15 2 9 11 24 7 19 14 21 8 3 24 18 20 10 14 1 9 9 18 18 13 2 23 7 23 2 17 13\\n24\\n\",\n    \"23\\n16 21 14 27 15 30 13 10 4 15 25 21 6 10 17 4 5 3 9 9 8 6 19\\n30\\n\",\n    \"42\\n3 2 3 1 1 3 1 3 2 3 3 2 1 3 2 3 3 2 3 3 1 3 3 2 3 2 3 1 2 2 2 3 3 1 2 1 1 3 1 3 3 2\\n3\\n\",\n    \"23\\n2 1 2 1 1 1 2 2 2 1 1 2 2 1 1 1 2 1 2 2 1 1 1\\n37\\n\",\n    \"3\\n2 2 1\\n22\\n\",\n    \"19\\n8 11 13 11 7 11 3 11 6 7 3 14 4 10 10 8 2 1 8\\n15\\n\",\n    \"28\\n3 5 4 24 21 3 13 24 22 13 12 21 1 15 11 3 17 6 2 12 22 12 23 4 21 16 25 14\\n25\\n\",\n    \"14\\n8 13 28 2 17 31 2 11 39 12 24 3 8 10\\n41\\n\",\n    \"8\\n9 14 13 2 1 11 4 19\\n25\\n\",\n    \"35\\n5 1 2 3 1 4 1 2 2 2 3 2 3 3 2 5 2 2 3 3 3 3 2 1 2 4 5 5 1 5 3 2 1 4 3\\n6\\n\",\n    \"35\\n2 2 1 2 2 2 2 2 2 1 2 1 2 1 1 2 2 2 2 2 2 1 1 1 2 2 1 1 2 2 2 1 2 1 1\\n35\\n\",\n    \"44\\n24 19 6 4 23 10 11 16 21 15 18 17 13 9 25 3 1 11 24 26 12 12 21 17 19 2 6 24 21 18 7 2 12 2 4 25 17 26 22 10 22 11 13 27\\n27\\n\",\n    \"36\\n5 2 4 5 1 4 3 3 5 2 2 3 3 2 5 1 4 5 2 3 1 4 4 3 5 2 3 5 1 4 3 5 1 2 4 1\\n10\\n\",\n    \"38\\n2 4 2 4 1 2 5 1 5 3 5 4 2 5 4 3 1 1 1 5 4 3 4 3 5 4 2 5 4 1 1 3 2 4 5 3 5 1\\n48\\n\",\n    \"40\\n1 26 39 14 16 17 19 28 38 18 23 41 19 22 4 24 18 36 15 21 31 29 34 13 19 19 38 45 4 10 2 14 3 24 21 27 4 30 9 17\\n45\\n\",\n    \"41\\n31 21 49 18 37 34 36 27 36 39 4 30 25 49 24 10 8 17 45 6 19 27 12 26 6 2 50 47 35 16 15 43 26 14 43 47 49 23 27 7 24\\n50\\n\",\n    \"30\\n2 3 1 4 1 2 2 2 5 5 2 3 2 4 3 1 1 2 1 2 1 2 3 2 1 1 3 5 4 4\\n5\\n\",\n    \"50\\n2 1 2 1 2 1 1 1 2 2 2 1 1 1 1 1 1 2 2 1 2 1 2 2 1 2 2 1 1 2 1 1 1 2 2 2 1 2 1 2 2 2 2 2 1 1 2 2 1 2\\n3\\n\",\n    \"50\\n15 28 34 29 17 21 20 34 37 17 10 20 37 10 18 25 31 25 16 1 37 27 39 3 5 18 2 32 10 35 20 17 29 20 3 29 3 25 9 32 37 5 25 23 25 33 35 8 31 29\\n39\\n\",\n    \"50\\n1 5 2 4 3 4 1 4 1 2 5 1 4 5 4 2 1 2 5 3 4 5 5 2 1 2 2 2 2 2 3 2 5 1 2 2 3 2 5 5 1 3 4 5 2 1 3 4 2 2\\n29\\n\",\n    \"50\\n3 2 3 2 1 5 5 5 2 1 4 2 3 5 1 4 4 2 3 2 5 5 4 3 5 1 3 5 5 4 4 4 2 5 4 2 2 3 4 4 3 2 3 3 1 3 4 3 3 4\\n19\\n\",\n    \"50\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n25\\n\",\n    \"10\\n42 18 35 1 20 25 29 9 50 36\\n50\\n\",\n    \"7\\n42 35 1 20 29 50 36\\n50\\n\",\n    \"50\\n1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 5 5 5 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7\\n50\\n\",\n    \"1\\n1\\n1\\n\",\n    \"1\\n2\\n1\\n\",\n    \"5\\n2 3 2 3 6\\n30\\n\",\n    \"3\\n1 2 3\\n7\\n\",\n    \"3\\n1 1 1\\n50\\n\",\n    \"4\\n1 2 3 4\\n11\\n\",\n    \"50\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n50\\n\",\n    \"50\\n1 2 3 4 4 4 4 4 4 4 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\\n50\\n\",\n    \"20\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n20\\n\",\n    \"2\\n1 2\\n3\\n\",\n    \"3\\n1 2 3\\n10\\n\",\n    \"5\\n1 2 3 4 5\\n20\\n\"\n  ],\n  \"outputs\": [\n    \"1.3333333333\\n\",\n    \"4.5555555556\\n\",\n    \"1.2857142857\\n\",\n    \"1.6250000000\\n\",\n    \"1.0000000000\\n\",\n    \"1.0000000000\\n\",\n    \"1.5000000000\\n\",\n    \"1.7341269841\\n\",\n    \"1.0000000000\\n\",\n    \"0.6500000000\\n\",\n    \"0.4333903134\\n\",\n    \"0.5001534565\\n\",\n    \"0.9154259295\\n\",\n    \"1.0000000000\\n\",\n    \"0.8604837192\\n\",\n    \"12.3395604396\\n\",\n    \"1.1778656126\\n\",\n    \"4.9849398967\\n\",\n    \"1.6715713966\\n\",\n    \"1.9401705846\\n\",\n    \"1.2020905923\\n\",\n    \"23.0000000000\\n\",\n    \"3.0000000000\\n\",\n    \"1.6128310974\\n\",\n    \"1.6461894466\\n\",\n    \"2.4931734932\\n\",\n    \"2.3500000000\\n\",\n    \"1.9851721334\\n\",\n    \"21.2873098934\\n\",\n    \"1.5513891043\\n\",\n    \"2.9649127243\\n\",\n    \"15.0079078318\\n\",\n    \"1.8507376624\\n\",\n    \"1.5535424434\\n\",\n    \"1.8614767098\\n\",\n    \"1.8379591837\\n\",\n    \"1.4997987526\\n\",\n    \"9.8873093486\\n\",\n    \"5.5762635183\\n\",\n    \"25.0000000000\\n\",\n    \"1.5269841270\\n\",\n    \"1.3142857143\\n\",\n    \"12.0011471293\\n\",\n    \"1.0000000000\\n\",\n    \"0.0000000000\\n\",\n    \"5.0000000000\\n\",\n    \"3.0000000000\\n\",\n    \"3.0000000000\\n\",\n    \"4.0000000000\\n\",\n    \"50.0000000000\\n\",\n    \"2.3167627104\\n\",\n    \"20.0000000000\\n\",\n    \"2.0000000000\\n\",\n    \"3.0000000000\\n\",\n    \"5.0000000000\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}