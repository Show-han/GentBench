{
    "problem": "You are an expert Python programmer, and here is your task: You are given a rectangle grid. That grid's size is n \u00d7 m. Let's denote the coordinate system on the grid. So, each point on the grid will have coordinates \u2014 a pair of integers (x, y) (0 \u2264 x \u2264 n, 0 \u2264 y \u2264 m).\n\nYour task is to find a maximum sub-rectangle on the grid (x_1, y_1, x_2, y_2) so that it contains the given point (x, y), and its length-width ratio is exactly (a, b). In other words the following conditions must hold: 0 \u2264 x_1 \u2264 x \u2264 x_2 \u2264 n, 0 \u2264 y_1 \u2264 y \u2264 y_2 \u2264 m, $\\frac{x_{2} - x_{1}}{y_{2} - y_{1}} = \\frac{a}{b}$.\n\nThe sides of this sub-rectangle should be parallel to the axes. And values x_1, y_1, x_2, y_2 should be integers. [Image] \n\nIf there are multiple solutions, find the rectangle which is closest to (x, y). Here \"closest\" means the Euclid distance between (x, y) and the center of the rectangle is as small as possible. If there are still multiple solutions, find the lexicographically minimum one. Here \"lexicographically minimum\" means that we should consider the sub-rectangle as sequence of integers (x_1, y_1, x_2, y_2), so we can choose the lexicographically minimum one.\n\n\n-----Input-----\n\nThe first line contains six integers n, m, x, y, a, b (1 \u2264 n, m \u2264 10^9, 0 \u2264 x \u2264 n, 0 \u2264 y \u2264 m, 1 \u2264 a \u2264 n, 1 \u2264 b \u2264 m).\n\n\n-----Output-----\n\nPrint four integers x_1, y_1, x_2, y_2, which represent the founded sub-rectangle whose left-bottom point is (x_1, y_1) and right-up point is (x_2, y_2).\n\n\n-----Examples-----\nInput\n9 9 5 5 2 1\n\nOutput\n1 3 9 7\n\nInput\n100 100 52 50 46 56\n\nOutput\n17 8 86 92",
    "solution": "[\"from fractions import gcd\\nn, m, x, y, a, b = map(int, input().split())\\nr = gcd(a, b)\\na, b = a // r, b // r\\nr = min(n // a, m // b)\\na, b = a * r, b * r\\ncx, cy = (a + 1) // 2, (b + 1) // 2\\ndx, dy = min(n - a, max(cx, x) - cx), min(m - b, max(cy, y) - cy)\\nprint(dx, dy, a + dx, b + dy)\", \"from fractions import gcd\\nn, m, x, y, a, b = list(map(int, input().split()))\\nk = gcd(a, b)\\na //= k\\nb //= k\\ntimes = min(n // a, m // b)\\na *= times\\nb *= times\\nx1 = x - (a + 1) // 2\\ny1 = y - (b + 1) // 2\\nif x1 < 0:\\n    x1 = 0\\nif y1 < 0:\\n    y1 = 0\\nif x1 + a > n:\\n    x1 -= (x1 + a - n)\\nif y1 + b > m:\\n    y1 -= (y1 + b - m)\\nprint(x1, y1, x1 + a, y1 + b)\\n\", \"from fractions import gcd\\n\\nn, m, x, y, a, b = list(map(int, input().split()))\\ng = gcd(a, b)\\na, b = a // g, b // g\\nk = min(n // a, m // b)\\na, b = k * a, k * b\\n\\nx1, x2 = x - (a - a // 2), x + a // 2\\ny1, y2 = y - (b - b // 2), y + b // 2\\nd = max(0, 0 - x1)\\nx1, x2 = x1 + d, x2 + d\\nd = max(0, x2 - n)\\nx1, x2 = x1 - d, x2 - d\\nd = max(0, 0 - y1)\\ny1, y2 = y1 + d, y2 + d\\nd = max(0, y2 - m)\\ny1, y2 = y1 - d, y2 - d\\nprint((\\\" \\\".join(map(str, [x1, y1, x2, y2]))));\\n\", \"from fractions import gcd\\n\\nn, m, x, y, a, b = map(int, input().split())\\nr = gcd(a, b)\\na, b = a // r, b // r\\nr = min(n // a, m // b)\\na, b = a * r, b * r\\ncx, cy = (a + 1) // 2, (b + 1) // 2\\ndx, dy = min(n - a, max(cx, x) - cx), min(m - b, max(cy, y) - cy)\\nprint(dx, dy, a + dx, b + dy)\", \"from fractions import gcd\\n\\n\\n\\nn, m, x, y, a, b = list(map(int, input().split()))\\n\\nr = gcd(a, b)\\n\\na, b = a // r, b // r\\n\\nr = min(n // a, m // b)\\n\\na, b = a * r, b * r\\n\\ncx, cy = (a + 1) // 2, (b + 1) // 2\\n\\ndx, dy = min(n - a, max(cx, x) - cx), min(m - b, max(cy, y) - cy)\\n\\nprint(dx, dy, a + dx, b + dy)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"import math\\nn, m, x, y, a, b = map(int, input().split())\\ngcd = math.gcd(a, b)\\na //= gcd\\nb //= gcd\\nmax_ratio = min(n // a, m // b)\\na *= max_ratio\\nb *= max_ratio\\nx1 = max(0, min(x - (a + 1) // 2, n - a))\\ny1 = max(0, min(y - (b + 1) // 2, m - b))\\nprint(x1, y1, x1 + a, y1 + b)\"]",
    "test": "{\n  \"inputs\": [\n    \"9 9 5 5 2 1\\n\",\n    \"100 100 52 50 46 56\\n\",\n    \"100 100 16 60 42 75\\n\",\n    \"100 100 28 22 47 50\\n\",\n    \"100 100 44 36 96 21\\n\",\n    \"100 100 56 46 1 47\\n\",\n    \"100 100 20 53 6 22\\n\",\n    \"100 100 32 63 2 41\\n\",\n    \"100 100 48 73 63 16\\n\",\n    \"100 100 13 59 14 20\\n\",\n    \"36830763 28058366 30827357 20792295 11047103 20670351\\n\",\n    \"87453374 60940601 74141787 32143714 78082907 33553425\\n\",\n    \"71265727 62692710 12444778 3479306 21442685 5463351\\n\",\n    \"48445042 43730155 14655564 6244917 43454856 2866363\\n\",\n    \"85759276 82316701 8242517 1957176 10225118 547026\\n\",\n    \"64748258 21983760 9107246 2437546 11247507 8924750\\n\",\n    \"6561833 24532010 2773123 457562 6225818 23724637\\n\",\n    \"33417574 19362112 17938303 4013355 10231192 2596692\\n\",\n    \"98540143 28776614 12080542 1456439 96484500 3125739\\n\",\n    \"75549175 99860242 42423626 6574859 73199290 26030615\\n\",\n    \"4309493 76088457 2523467 46484812 909115 53662610\\n\",\n    \"99373741 10548319 82293354 9865357 58059929 5328757\\n\",\n    \"81460 7041354 53032 1297536 41496 5748697\\n\",\n    \"5664399 63519726 1914884 13554302 2435218 44439020\\n\",\n    \"19213492 76256257 10302871 19808004 19174729 55280126\\n\",\n    \"61430678 95017800 11901852 27772249 25202227 87778634\\n\",\n    \"1063740 2675928 277215 2022291 204933 298547\\n\",\n    \"71580569 68590917 4383746 13851161 9868376 8579752\\n\",\n    \"17818532 82586436 8482338 54895799 12444902 11112345\\n\",\n    \"63651025 50179036 16141802 24793214 28944209 13993078\\n\",\n    \"11996821 42550832 8901163 19214381 3510233 20406511\\n\",\n    \"27048166 72584165 4785744 2001800 24615554 27645416\\n\",\n    \"47001271 53942737 7275347 1652337 33989593 48660013\\n\",\n    \"51396415 50182729 20810973 38206844 17823753 2905275\\n\",\n    \"27087649 52123970 20327636 19640608 8481031 14569965\\n\",\n    \"41635044 16614992 36335190 11150551 30440245 13728274\\n\",\n    \"97253692 35192249 21833856 26094161 41611668 32149284\\n\",\n    \"60300478 3471217 11842517 3192374 27980820 507119\\n\",\n    \"69914272 30947694 58532705 25740028 30431847 27728130\\n\",\n    \"83973381 91192149 19059738 26429459 49573749 78006738\\n\",\n    \"1000000000 1000000000 286536427 579261823 230782719 575570138\\n\",\n    \"1000000000 1000000000 42362139 725664533 91213476 617352813\\n\",\n    \"1000000000 1000000000 503220555 167034539 244352073 511651840\\n\",\n    \"1000000000 1000000000 259046267 313437250 252266478 848401810\\n\",\n    \"1000000000 1000000000 867388331 312356312 405405075 887925029\\n\",\n    \"1000000000 1000000000 623214043 753726318 970868535 929707704\\n\",\n    \"1000000000 1000000000 84072459 754904836 124007132 824006731\\n\",\n    \"1000000000 1000000000 839898171 196274842 131921537 865789406\\n\",\n    \"1000000000 1000000000 448240235 342677552 992352294 907572080\\n\",\n    \"1000000000 1000000000 837887296 643696230 478881476 45404539\\n\",\n    \"1000000000 500 1000 400 11 122\\n\",\n    \"1000000000 1000000000 1000000000 1000000000 1 1\\n\",\n    \"1000000000 1000000000 1000000000 1000000000 1000000000 1\\n\",\n    \"1000000000 999999999 1000 1000 1000000000 999999999\\n\",\n    \"70 10 20 5 5 3\\n\",\n    \"1000000000 1000000000 500000000 500000000 500000000 500000001\\n\"\n  ],\n  \"outputs\": [\n    \"1 3 9 7\\n\",\n    \"17 8 86 92\\n\",\n    \"0 0 56 100\\n\",\n    \"0 0 94 100\\n\",\n    \"0 25 96 46\\n\",\n    \"55 0 57 94\\n\",\n    \"6 1 33 100\\n\",\n    \"30 18 34 100\\n\",\n    \"16 65 79 81\\n\",\n    \"0 0 70 100\\n\",\n    \"25303805 7388015 36350908 28058366\\n\",\n    \"9370467 15367001 87453374 48920426\\n\",\n    \"0 0 64328055 16390053\\n\",\n    \"0 4811735 43454856 7678098\\n\",\n    \"0 0 81800944 4376208\\n\",\n    \"0 0 22495014 17849500\\n\",\n    \"0 0 6225818 23724637\\n\",\n    \"166200 0 33417574 8439249\\n\",\n    \"0 0 96484500 3125739\\n\",\n    \"2349885 0 75549175 26030615\\n\",\n    \"1887086 960803 3159847 76088457\\n\",\n    \"41313812 5219562 99373741 10548319\\n\",\n    \"27916 0 78148 6958949\\n\",\n    \"697275 0 3132493 44439020\\n\",\n    \"38763 0 19213492 55280126\\n\",\n    \"0 0 25202227 87778634\\n\",\n    \"0 1183193 1024665 2675928\\n\",\n    \"0 0 71545726 62203202\\n\",\n    \"2259887 49339626 14704789 60451971\\n\",\n    \"0 10800136 57888418 38786292\\n\",\n    \"4976355 0 11996821 40813022\\n\",\n    \"0 0 24615554 27645416\\n\",\n    \"0 0 33989593 48660013\\n\",\n    \"0 34333144 47530008 42080544\\n\",\n    \"1644556 0 27087649 43709895\\n\",\n    \"11194799 2886718 41635044 16614992\\n\",\n    \"0 363858 45079307 35192249\\n\",\n    \"0 2456979 55961640 3471217\\n\",\n    \"39482425 3219564 69914272 30947694\\n\",\n    \"0 0 49573749 78006738\\n\",\n    \"171145067 291476754 401927786 867046892\\n\",\n    \"0 176862916 121617968 1000000000\\n\",\n    \"276322201 0 730118908 950210560\\n\",\n    \"132913028 0 385179506 848401810\\n\",\n    \"594594925 0 1000000000 887925029\\n\",\n    \"29131465 70292296 1000000000 1000000000\\n\",\n    \"22068893 175993269 146076025 1000000000\\n\",\n    \"773937402 0 905858939 865789406\\n\",\n    \"0 0 992352294 907572080\\n\",\n    \"42237048 598291691 1000000000 689100769\\n\",\n    \"978 12 1022 500\\n\",\n    \"0 0 1000000000 1000000000\\n\",\n    \"0 999999999 1000000000 1000000000\\n\",\n    \"0 0 1000000000 999999999\\n\",\n    \"12 0 27 9\\n\",\n    \"250000000 249999999 750000000 750000000\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}