{
    "problem": "You are an expert Python programmer, and here is your task: Little Petya likes permutations a lot. Recently his mom has presented him permutation q_1, q_2, ..., q_{n} of length n.\n\nA permutation a of length n is a sequence of integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 n), all integers there are distinct. \n\nThere is only one thing Petya likes more than permutations: playing with little Masha. As it turns out, Masha also has a permutation of length n. Petya decided to get the same permutation, whatever the cost may be. For that, he devised a game with the following rules:  Before the beginning of the game Petya writes permutation 1, 2, ..., n on the blackboard. After that Petya makes exactly k moves, which are described below.  During a move Petya tosses a coin. If the coin shows heads, he performs point 1, if the coin shows tails, he performs point 2.  Let's assume that the board contains permutation p_1, p_2, ..., p_{n} at the given moment. Then Petya removes the written permutation p from the board and writes another one instead: p_{q}_1, p_{q}_2, ..., p_{q}_{n}. In other words, Petya applies permutation q (which he has got from his mother) to permutation p.  All actions are similar to point 1, except that Petya writes permutation t on the board, such that: t_{q}_{i} = p_{i} for all i from 1 to n. In other words, Petya applies a permutation that is inverse to q to permutation p. \n\nWe know that after the k-th move the board contained Masha's permutation s_1, s_2, ..., s_{n}. Besides, we know that throughout the game process Masha's permutation never occurred on the board before the k-th move. Note that the game has exactly k moves, that is, throughout the game the coin was tossed exactly k times.\n\nYour task is to determine whether the described situation is possible or else state that Petya was mistaken somewhere. See samples and notes to them for a better understanding.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 100). The second line contains n space-separated integers q_1, q_2, ..., q_{n} (1 \u2264 q_{i} \u2264 n) \u2014 the permutation that Petya's got as a present. The third line contains Masha's permutation s, in the similar format.\n\nIt is guaranteed that the given sequences q and s are correct permutations.\n\n\n-----Output-----\n\nIf the situation that is described in the statement is possible, print \"YES\" (without the quotes), otherwise print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 1\n2 3 4 1\n1 2 3 4\n\nOutput\nNO\n\nInput\n4 1\n4 3 1 2\n3 4 2 1\n\nOutput\nYES\n\nInput\n4 3\n4 3 1 2\n3 4 2 1\n\nOutput\nYES\n\nInput\n4 2\n4 3 1 2\n2 1 4 3\n\nOutput\nYES\n\nInput\n4 1\n4 3 1 2\n2 1 4 3\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample Masha's permutation coincides with the permutation that was written on the board before the beginning of the game. Consequently, that violates the condition that Masha's permutation never occurred on the board before k moves were performed.\n\nIn the second sample the described situation is possible, in case if after we toss a coin, we get tails.\n\nIn the third sample the possible coin tossing sequence is: heads-tails-tails.\n\nIn the fourth sample the possible coin tossing sequence is: heads-heads.",
    "solution": "[\"import sys\\nfrom math import *\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn list(map(int, minp().split()))\\n\\nn, k = mints()\\nq = list(mints())\\nfor i in range(n):\\n\\tq[i] -= 1\\ns = list(mints())\\na = [i for i in range(1,n+1)]\\nd = [0]*n\\nb = [False]*(k+1)\\nc = [False]*(k+1)\\ne = [10000]*2\\nf = [10000]*2\\nfor i in range(k+1):\\n\\t#print(a)\\n\\tb[i] = (a == s)\\n\\tif b[i]:\\n\\t\\te[i%2] = min(e[i%2], i)\\n\\tfor j in range(n):\\n\\t\\td[j] = a[q[j]]\\n\\ta,d = d,a\\n#print('====')\\na = [i for i in range(1,n+1)]\\nfor i in range(k+1):\\n\\t#print(a)\\n\\tc[i] = (a == s)\\n\\tif c[i]:\\n\\t\\tf[i%2] = min(f[i%2], i)\\n\\tfor j in range(n):\\n\\t\\td[q[j]] = a[j]\\n\\ta,d = d,a\\n#print('====')\\n#print(e)\\n#print(f)\\nif e[0] == 0:\\n\\tprint('NO')\\nelif e[1] == 1:\\n\\tif f[1] == 1 and k > 1:\\n\\t\\tprint('NO')\\n\\telif k%2 == 1 or f[k%2] <= k:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelif f[1] == 1:\\n\\tif k%2 == 1 or e[k%2] <= k:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\nelse:\\n\\tif e[k%2] <= k or f[k%2] <= k:\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tprint('NO')\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"4 1\\n2 3 4 1\\n1 2 3 4\\n\",\n    \"4 1\\n4 3 1 2\\n3 4 2 1\\n\",\n    \"4 3\\n4 3 1 2\\n3 4 2 1\\n\",\n    \"4 2\\n4 3 1 2\\n2 1 4 3\\n\",\n    \"4 1\\n4 3 1 2\\n2 1 4 3\\n\",\n    \"4 3\\n4 3 1 2\\n2 1 4 3\\n\",\n    \"4 3\\n2 1 4 3\\n4 3 1 2\\n\",\n    \"4 1\\n2 1 4 3\\n2 1 4 3\\n\",\n    \"4 2\\n2 1 4 3\\n2 1 4 3\\n\",\n    \"4 2\\n2 3 4 1\\n1 2 3 4\\n\",\n    \"5 3\\n2 1 4 3 5\\n2 1 4 3 5\\n\",\n    \"9 10\\n2 3 1 5 6 7 8 9 4\\n2 3 1 4 5 6 7 8 9\\n\",\n    \"8 10\\n2 3 1 5 6 7 8 4\\n2 3 1 4 5 6 7 8\\n\",\n    \"8 9\\n2 3 1 5 6 7 8 4\\n2 3 1 4 5 6 7 8\\n\",\n    \"10 10\\n2 3 1 5 6 7 8 4 10 9\\n2 3 1 4 5 6 7 8 10 9\\n\",\n    \"10 9\\n2 3 1 5 6 7 8 4 10 9\\n2 3 1 4 5 6 7 8 10 9\\n\",\n    \"10 100\\n2 3 1 5 6 7 8 4 10 9\\n2 3 1 4 5 6 7 8 10 9\\n\",\n    \"10 99\\n2 3 1 5 6 7 8 4 10 9\\n2 3 1 4 5 6 7 8 10 9\\n\",\n    \"9 100\\n2 3 1 5 6 7 8 9 4\\n2 3 1 4 5 6 7 8 9\\n\",\n    \"5 99\\n2 1 4 3 5\\n2 1 4 3 5\\n\",\n    \"5 1\\n2 1 4 3 5\\n2 1 4 3 5\\n\",\n    \"55 30\\n51 43 20 22 50 48 35 6 49 7 52 29 34 45 9 55 47 36 41 54 1 4 39 46 25 26 12 28 14 3 33 23 11 2 53 8 40 32 13 37 19 16 18 42 27 31 17 44 30 24 15 38 10 21 5\\n30 31 51 22 43 32 10 38 54 53 44 12 24 14 20 34 47 11 41 15 49 4 5 36 25 26 27 28 29 1 6 55 48 46 7 52 40 16 50 37 19 13 33 39 45 8 17 23 21 18 3 42 35 9 2\\n\",\n    \"55 30\\n32 37 9 26 13 6 44 1 2 38 11 12 36 49 10 46 5 21 43 24 28 31 15 51 55 27 29 18 41 17 20 8 45 16 52 30 39 53 3 35 19 33 50 54 47 34 48 14 4 42 22 40 23 25 7\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\\n\",\n    \"55 28\\n25 13 15 37 5 7 42 9 50 8 14 21 3 30 29 38 1 51 52 20 16 27 6 41 48 4 49 32 2 44 55 10 33 34 54 23 40 26 12 31 39 28 43 46 53 19 22 35 36 47 24 17 11 45 18\\n17 29 13 26 5 23 6 10 8 32 53 39 2 11 3 21 52 55 46 20 12 47 36 51 1 38 22 42 15 14 40 28 33 34 48 49 4 16 41 37 24 7 43 30 54 44 50 25 27 9 18 19 45 35 31\\n\",\n    \"55 28\\n34 11 18 6 16 43 12 25 48 27 35 17 19 14 33 30 7 53 52 2 15 10 44 1 37 28 22 49 46 8 45 39 21 47 40 20 41 51 13 24 42 55 23 4 36 38 50 31 3 9 54 32 5 29 26\\n34 11 18 6 16 43 12 25 48 27 35 17 19 14 33 30 7 53 52 2 15 10 44 1 37 28 22 49 46 8 45 39 21 47 40 20 41 51 13 24 42 55 23 4 36 38 50 31 3 9 54 32 5 29 26\\n\",\n    \"55 28\\n35 33 46 8 11 13 14 26 42 38 1 7 34 5 2 21 17 45 54 43 4 18 27 50 25 10 29 48 6 16 22 28 55 53 49 41 39 23 40 47 51 37 36 19 9 32 52 12 24 3 20 15 30 44 31\\n5 52 24 16 7 27 48 21 18 8 14 28 29 12 47 53 17 31 54 41 30 55 10 35 25 4 38 46 23 34 33 3 15 6 11 20 9 26 42 37 43 45 51 19 22 50 39 32 1 49 36 40 13 44 2\\n\",\n    \"1 1\\n1\\n1\\n\",\n    \"1 2\\n1\\n1\\n\",\n    \"2 3\\n2 1\\n2 1\\n\",\n    \"3 100\\n2 3 1\\n2 3 1\\n\",\n    \"6 3\\n2 3 4 5 6 1\\n2 3 4 5 6 1\\n\",\n    \"13 2\\n2 3 4 5 6 7 8 9 10 11 12 13 1\\n3 4 5 6 7 8 9 10 11 12 13 1 2\\n\",\n    \"2 99\\n2 1\\n2 1\\n\",\n    \"4 3\\n2 1 4 3\\n2 1 4 3\\n\",\n    \"4 50\\n2 3 4 1\\n3 4 1 2\\n\",\n    \"3 99\\n2 3 1\\n2 3 1\\n\",\n    \"2 2\\n2 1\\n1 2\\n\",\n    \"10 29\\n2 1 4 5 3 7 8 9 10 6\\n2 1 5 3 4 8 9 10 6 7\\n\",\n    \"4 11\\n2 3 4 1\\n2 3 4 1\\n\",\n    \"9 3\\n2 3 4 5 6 7 8 9 1\\n3 4 5 6 7 8 9 1 2\\n\"\n  ],\n  \"outputs\": [\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}