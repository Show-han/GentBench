{
    "problem": "You are an expert Python programmer, and here is your task: Tanechka is shopping in the toy shop. There are exactly $n$ toys in the shop for sale, the cost of the $i$-th toy is $i$ burles. She wants to choose two toys in such a way that their total cost is $k$ burles. How many ways to do that does she have?\n\nEach toy appears in the shop exactly once. Pairs $(a, b)$ and $(b, a)$ are considered equal. Pairs $(a, b)$, where $a=b$, are not allowed.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$, $k$ ($1 \\le n, k \\le 10^{14}$) \u2014 the number of toys and the expected total cost of the pair of toys.\n\n\n-----Output-----\n\nPrint the number of ways to choose the pair of toys satisfying the condition above. Print 0, if Tanechka can choose no pair of toys in such a way that their total cost is $k$ burles.\n\n\n-----Examples-----\nInput\n8 5\n\nOutput\n2\n\nInput\n8 15\n\nOutput\n1\n\nInput\n7 20\n\nOutput\n0\n\nInput\n1000000000000 1000000000001\n\nOutput\n500000000000\n\n\n\n-----Note-----\n\nIn the first example Tanechka can choose the pair of toys ($1, 4$) or the pair of toys ($2, 3$).\n\nIn the second example Tanechka can choose only the pair of toys ($7, 8$).\n\nIn the third example choosing any pair of toys will lead to the total cost less than $20$. So the answer is 0.\n\nIn the fourth example she can choose the following pairs: $(1, 1000000000000)$, $(2, 999999999999)$, $(3, 999999999998)$, ..., $(500000000000, 500000000001)$. The number of such pairs is exactly $500000000000$.",
    "solution": "[\"#!/usr/bin/env python3\\nn, k = list(map(int, input().split()))\\nans = max(0, min(n, k - 1) - k // 2)\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\nm = k // 2 + 1\\nl = m - 1\\nif k % 2 == 0:\\n    l -= 1\\nprint(max(0, min(l, n - m + 1)))\\n\", \"n, k = list(map(int, input().split()))\\nif k == 1 or n == 1:\\n\\tprint(0)\\n\\treturn\\nif k > 2 * n - 1:\\n\\tprint(0)\\nelse:\\n\\tleft, right = 0, min(n - 1, k - 1)\\n\\twhile left != right - 1:\\n\\t\\tmid = (left + right) // 2\\n\\t\\tif k - mid <= n:\\n\\t\\t\\tright = mid\\n\\t\\telse:\\n\\t\\t\\tleft = mid\\n\\tprint(max(0, (min(n, k - 1) - right + 1)) // 2)\\n\", \"a, b = list(map(int, input().split()))\\n\\nnum = (b - 1) // 2\\nif a < b - 1:\\n    num -= (b - 1) - a\\nprint(max(0, num))\\n\", \"def ii():\\n    return int(input())\\ndef mi():\\n    return list(map(int, input().split()))\\ndef li():\\n    return list(mi())\\n\\nn, k = mi()\\n\\ny = min(n, k - 1)\\nx = k - y\\nans = 0\\nif x < y:\\n    dif = y - x\\n    ans = (dif + 1) // 2\\nprint(ans)\\n\", \"n, m = list(map(int, input().split()))\\nprint(max(min((m + 1) // 2 - 1, n - m // 2), 0))\\n\", \"n, k = list(map(int, input().split()))\\nprint(max(0, min(n, (k - 1) // 2) - max(1, k - n) + 1))\\n\", \"n,m=list(map(int,input().strip().split()))\\nif (n>=m):\\n\\tif (m%2==0):\\n\\t\\tprint((m-2)//2)\\n\\telse:\\n\\t\\tprint((m-1)//2)\\nelse:\\n\\tif (m%2==0):\\n\\t\\tl1=((m-2)//2)\\n\\t\\tl1=l1-(m-n-1)\\n\\telse:\\n\\t\\tl1=((m-1)//2)\\n\\t\\tl1=l1-(m-n-1)\\n\\tif (l1<=0):\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint (l1)\\n\", \"3\\n\\nn, k = list(map(int, input().split()))\\n\\nif 2 * n + 1 < k:\\n    print(0)\\nelse:\\n    print(min(n, k - 1) - (k + 2) // 2 + 1)\\n\", \"n, k = map(int, input().split())\\n\\nif k > n+n-1:\\n    print(0)\\n    return\\n\\nif k <= n:\\n    print((k-1)//2)\\n    return\\n\\nprint((n+n-k+1)//2)\", \"USE_STDIO = False\\n\\nif not USE_STDIO:\\n    try: import mypc\\n    except: pass\\n\\ndef main():\\n    n, k = list(map(int, input().split(' ')))\\n    minx = max(1, k - n)\\n    maxx = min(n, (k-1)//2)\\n    if minx > maxx:\\n        print(0)\\n    else:\\n        print(maxx - minx + 1)\\n\\ndef __starting_point():\\n    main()\\n\\n\\n\\n\\n__starting_point()\", \"n,k=map(int,input().split())\\nori=k\\nif n==1 or k<=2:\\n    print(0)\\n    return\\nif k%2==0: k-=1\\nfirst=k//2\\nsecond=ori-first\\nif second>n:\\n    print(0)\\n    return\\nprint(min(first,n-second+1))\", \"n,m=list(map(int,input().split()))\\nb=m//2\\nif m%2==0:\\n    a=b\\nelse:\\n    a=b+1\\nif a ==b:\\n    a+=1\\n    b-=1\\n\\nans=min(n,m-1)-a+1\\nif ans<=0:\\n    print(0)\\nelse:\\n    print(ans)\\n\", \"#!/bin/python3\\n\\na, b = list(map(int, input().split()))\\n\\nmaxval = min(b - 1, a)\\nminval = b - maxval\\n\\n\\nd = maxval - minval + 1\\nif d < 0:\\n\\td = 0\\n\\nerg = d // 2\\nprint(erg)\\n\", \"from sys import stdin, stdout\\nfrom collections import deque\\n\\nn, k = map(int, stdin.readline().split())\\nn = min(n, k - 1)\\n\\nl, r = 0, n + 1\\nwhile r - l > 1:\\n    m = (l + r) >> 1\\n    \\n    if k - m <= n:\\n        r = m\\n    else:\\n        l = m\\n\\nans = n - r + 1\\n\\nif not (k & 1) and k // 2 <= n:\\n    ans -= 1\\n\\nans //= 2\\nstdout.write(str(ans))\", \"n, k = list(map(int, input().split()))\\nif n >= k:\\n    print((k - 1) // 2)\\nelse:\\n    if n - k // 2 >= 0:\\n        print(n - k // 2)\\n    else:\\n        print(0)\\n\", \"n,k=map(int,input().split())\\nif k%2==0:\\n    k=k//2\\n    if n-k<k-1:\\n        if n-k<0:\\n            print(0)\\n        else:\\n            \\n            print(n-k)\\n    else:\\n        if k-1<0:\\n            print(0)\\n        else:\\n            print(k-1)\\nelse:\\n    k=k//2\\n    if k<n-k:\\n        if k<0:\\n            print(0)\\n        else:\\n            print(k)\\n    else:\\n        if n-k<0:\\n            print(0)\\n        else:\\n            print(n-k)\", \"n, k = list(map(int, input().split()))\\nif k <= n:\\n    print((k - 1) // 2)\\nelse:\\n    print(max(0, (k - 1) // 2 - (k - n) + 1))\\n\\n\", \"n, k = (int(x) for x in input().split())\\n\\nif n >= k - 1:\\n    print((k - 1) // 2)\\n    quit()\\nelse:\\n    if k % 2 == 0:\\n        if n <= k // 2:\\n            print(0)\\n            quit()\\n        else:\\n            print(n - k // 2)\\n            quit()\\n    else:\\n        if n <= k // 2:\\n            print(0)\\n            quit()\\n        else:\\n            print(n - k // 2)\\n            quit()\\n\", \"n, m = map(int, input().strip().split())\\nif m <= n:\\n    print((m - 1) // 2)\\nelif 2 * n <= m:\\n    print(0)\\nelse:\\n    print((2 * n - m + 1) // 2)\", \"def solve(n, k):\\n    first = max(1, k - n)\\n    last = min(k // 2, n)\\n\\n    return max(0, last - first + k % 2)\\n\\ndef brute(n, k):\\n    ans = 0\\n    for a in range(1, n + 1):\\n        b = k - a\\n        if a < b and b <= n:\\n            ans += 1\\n\\n    return ans\\n\\n# a < k - a\\n# 2a < k\\n# a < n\\n# k - a <= n\\n# k - n <= a\\n\\n# (1, k - 1), (2, k - 2), ... (k / 2, k / 2)\\nn, k = list(map(int, input().split()))\\nprint(solve(n, k))\\n\", \"n, k = list(map(int, input().split()))\\n\\nif k % 2 == 0:\\n    # Gu Su\\n    down = int(k / 2 + 1)\\n    if down > n:\\n        print(0)\\n        return\\n    else:\\n        up = min(k-1, n)\\n        print(up - down + 1)\\nelse:\\n    # Ki Su\\n    down = int((k + 1) / 2)\\n    if down > n:\\n        print(0)\\n        return\\n    else:\\n        up = min(k-1, n)\\n        print(up - down + 1)\\n\\n# print(down)\\n# print(up)\\n\", \"n, k = map(int, input().split())\\nif n >= k - 1:\\n    print((k - 1) // 2)\\nelse:\\n    t = k - n\\n    print(max(0, (n - t + 1) // 2))\", \"n, k = map(int, input().split())\\nif 1 <= k and k <= n:\\n    print((k - 1) // 2)\\nelse:\\n    if n + n - 1 < k:\\n        print(0)\\n    else:\\n        print((n - (k - n) + 1) // 2)\", \"n, k = list(map(int, input().split()))\\n\\nif k <= n + 1:\\n    ans = (k - 1) // 2\\nelse:\\n    ans = (k - 1) // 2 - (k - n - 1)\\n\\nprint(max(0, ans))\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"8 5\\n\",\n    \"8 15\\n\",\n    \"7 20\\n\",\n    \"1000000000000 1000000000001\\n\",\n    \"1 1\\n\",\n    \"44999999999177 100000000000000\\n\",\n    \"100000000000000 100000000000000\\n\",\n    \"100000000000 130000000001\\n\",\n    \"99999999999999 65536\\n\",\n    \"1010101010 1010101010\\n\",\n    \"100000000000000 99999999999999\\n\",\n    \"1 2\\n\",\n    \"1 3\\n\",\n    \"1 4\\n\",\n    \"1 5\\n\",\n    \"1 6\\n\",\n    \"1 7\\n\",\n    \"1 8\\n\",\n    \"2 1\\n\",\n    \"2 2\\n\",\n    \"2 3\\n\",\n    \"2 4\\n\",\n    \"2 5\\n\",\n    \"2 6\\n\",\n    \"2 7\\n\",\n    \"2 8\\n\",\n    \"3 1\\n\",\n    \"3 2\\n\",\n    \"3 3\\n\",\n    \"3 4\\n\",\n    \"3 5\\n\",\n    \"3 6\\n\",\n    \"3 7\\n\",\n    \"3 8\\n\",\n    \"4 1\\n\",\n    \"4 2\\n\",\n    \"4 3\\n\",\n    \"4 4\\n\",\n    \"4 5\\n\",\n    \"4 6\\n\",\n    \"4 7\\n\",\n    \"4 8\\n\",\n    \"100000000000000 1\\n\",\n    \"100000000000000 2\\n\",\n    \"100000000000000 3\\n\",\n    \"100000000000000 4\\n\",\n    \"100000000000000 5\\n\",\n    \"100000000000000 6\\n\",\n    \"100000000000000 11\\n\",\n    \"100000000000000 100\\n\",\n    \"100000000000000 1023\\n\",\n    \"99999999999999 99999999999997\\n\",\n    \"99999999999999 99999999999998\\n\",\n    \"99999999999999 99999999999999\\n\",\n    \"99999999999998 100000000000000\\n\",\n    \"99999999999997 100000000000000\\n\",\n    \"99999999999996 100000000000000\\n\",\n    \"99999999999977 100000000000000\\n\",\n    \"69999999999177 100000000000000\\n\",\n    \"59999999999177 100000000000000\\n\",\n    \"49999999999996 100000000000000\\n\",\n    \"49999999999997 100000000000000\\n\",\n    \"49999999999998 100000000000000\\n\",\n    \"49999999999999 100000000000000\\n\",\n    \"50000000000000 100000000000000\\n\",\n    \"50000000000001 100000000000000\\n\",\n    \"50000000000002 100000000000000\\n\",\n    \"50000000000003 100000000000000\\n\",\n    \"49999999999996 99999999999999\\n\",\n    \"49999999999997 99999999999999\\n\",\n    \"49999999999998 99999999999999\\n\",\n    \"49999999999999 99999999999999\\n\",\n    \"50000000000000 99999999999999\\n\",\n    \"50000000000001 99999999999999\\n\",\n    \"50000000000002 99999999999999\\n\",\n    \"50000000000003 99999999999999\\n\",\n    \"100000000000 10000000000\\n\",\n    \"100000000000 100000000000\\n\",\n    \"100000000000 130000000000\\n\",\n    \"100000000000 100000000001\\n\",\n    \"100000000000000 99999999999998\\n\",\n    \"99999999999999 100000000000000\\n\",\n    \"1 100000000000000\\n\",\n    \"123456789 1\\n\",\n    \"1 123456789\\n\",\n    \"998244353 19260817\\n\",\n    \"3 6\\n\",\n    \"13324 13736\\n\",\n    \"6 8\\n\",\n    \"1 2\\n\",\n    \"8 14\\n\",\n    \"8 16\\n\",\n    \"2 1\\n\",\n    \"2 3\\n\",\n    \"41 66\\n\",\n    \"4 8\\n\",\n    \"2 4\\n\",\n    \"4827 5436\\n\",\n    \"3 3\\n\",\n    \"5 8\\n\",\n    \"38 74\\n\",\n    \"7 14\\n\",\n    \"7 8\\n\",\n    \"7 10\\n\",\n    \"3294967296 5\\n\",\n    \"4 6\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"500000000000\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"49999999999999\\n\",\n    \"35000000000\\n\",\n    \"32767\\n\",\n    \"505050504\\n\",\n    \"49999999999999\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"49\\n\",\n    \"511\\n\",\n    \"49999999999998\\n\",\n    \"49999999999998\\n\",\n    \"49999999999999\\n\",\n    \"49999999999998\\n\",\n    \"49999999999997\\n\",\n    \"49999999999996\\n\",\n    \"49999999999977\\n\",\n    \"19999999999177\\n\",\n    \"9999999999177\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"4999999999\\n\",\n    \"49999999999\\n\",\n    \"35000000000\\n\",\n    \"50000000000\\n\",\n    \"49999999999998\\n\",\n    \"49999999999999\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"9630408\\n\",\n    \"0\\n\",\n    \"6456\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"8\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2109\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}