{
    "problem": "You are an expert Python programmer, and here is your task: BigData Inc. is a corporation that has n data centers indexed from 1 to n that are located all over the world. These data centers provide storage for client data (you can figure out that client data is really big!).\n\nMain feature of services offered by BigData Inc. is the access availability guarantee even under the circumstances of any data center having an outage. Such a guarantee is ensured by using the two-way replication. Two-way replication is such an approach for data storage that any piece of data is represented by two identical copies that are stored in two different data centers.\n\nFor each of m company clients, let us denote indices of two different data centers storing this client data as c_{i}, 1 and c_{i}, 2.\n\nIn order to keep data centers operational and safe, the software running on data center computers is being updated regularly. Release cycle of BigData Inc. is one day meaning that the new version of software is being deployed to the data center computers each day.\n\nData center software update is a non-trivial long process, that is why there is a special hour-long time frame that is dedicated for data center maintenance. During the maintenance period, data center computers are installing software updates, and thus they may be unavailable. Consider the day to be exactly h hours long. For each data center there is an integer u_{j} (0 \u2264 u_{j} \u2264 h - 1) defining the index of an hour of day, such that during this hour data center j is unavailable due to maintenance.\n\nSumming up everything above, the condition u_{c}_{i}, 1 \u2260 u_{c}_{i}, 2 should hold for each client, or otherwise his data may be unaccessible while data centers that store it are under maintenance.\n\nDue to occasional timezone change in different cities all over the world, the maintenance time in some of the data centers may change by one hour sometimes. Company should be prepared for such situation, that is why they decided to conduct an experiment, choosing some non-empty subset of data centers, and shifting the maintenance time for them by an hour later (i.e. if u_{j} = h - 1, then the new maintenance hour would become 0, otherwise it would become u_{j} + 1). Nonetheless, such an experiment should not break the accessibility guarantees, meaning that data of any client should be still available during any hour of a day after the data center maintenance times are changed.\n\nSuch an experiment would provide useful insights, but changing update time is quite an expensive procedure, that is why the company asked you to find out the minimum number of data centers that have to be included in an experiment in order to keep the data accessibility guarantees.\n\n\n-----Input-----\n\nThe first line of input contains three integers n, m and h (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000, 2 \u2264 h \u2264 100 000), the number of company data centers, number of clients and the day length of day measured in hours. \n\nThe second line of input contains n integers u_1, u_2, ..., u_{n} (0 \u2264 u_{j} < h), j-th of these numbers is an index of a maintenance hour for data center j. \n\nEach of the next m lines contains two integers c_{i}, 1 and c_{i}, 2 (1 \u2264 c_{i}, 1, c_{i}, 2 \u2264 n, c_{i}, 1 \u2260 c_{i}, 2), defining the data center indices containing the data of client i.\n\nIt is guaranteed that the given maintenance schedule allows each client to access at least one copy of his data at any moment of day.\n\n\n-----Output-----\n\nIn the first line print the minimum possible number of data centers k (1 \u2264 k \u2264 n) that have to be included in an experiment in order to keep the data available for any client.\n\nIn the second line print k distinct integers x_1, x_2, ..., x_{k} (1 \u2264 x_{i} \u2264 n), the indices of data centers whose maintenance time will be shifted by one hour later. Data center indices may be printed in any order.\n\nIf there are several possible answers, it is allowed to print any of them. It is guaranteed that at there is at least one valid choice of data centers.\n\n\n-----Examples-----\nInput\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\nOutput\n1\n3 \nInput\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\nOutput\n4\n1 2 3 4 \n\n\n-----Note-----\n\nConsider the first sample test. The given answer is the only way to conduct an experiment involving the only data center. In such a scenario the third data center has a maintenance during the hour 1, and no two data centers storing the information of the same client have maintenance at the same hour.\n\nOn the other hand, for example, if we shift the maintenance time on hour later for the first data center, then the data of clients 1 and 3 will be unavailable during the hour 0.",
    "solution": "[\"import sys\\n\\n# sys.stind.readline lee datos el doble de\\n# r\\u00e1pido que la funcion por defecto input\\ninput = sys.stdin.readline\\nlength = len\\n\\n\\ndef get_input():\\n    n, m, h = [int(x) for x in input().split(' ')]\\n\\n    digraph = [[] for _ in range(n + 1)]\\n    transpose = [[] for _ in range(n + 1)]\\n    mantainence = [0] + [int(x) for x in input().split(' ')]\\n\\n    for _ in range(m):\\n        c1, c2 = [int(x) for x in input().split(' ')]\\n\\n        if (mantainence[c1] + 1) % h == mantainence[c2]:\\n            digraph[c1].append(c2)\\n            transpose[c2].append(c1)\\n        if (mantainence[c2] + 1) % h == mantainence[c1]:\\n            digraph[c2].append(c1)\\n            transpose[c1].append(c2)\\n\\n    return digraph, transpose\\n\\n\\ndef dfs_cc_1_visit(graph, node, color, finalization_stack):\\n    stack = [node]\\n\\n    while stack:\\n        current_node = stack[-1]\\n\\n        if color[current_node] != 'white':\\n            stack.pop()\\n            if color[current_node] == 'grey':\\n                finalization_stack.append(current_node)\\n                color[current_node] = 'black'\\n            continue\\n\\n        color[current_node] = 'grey'\\n        for adj in graph[current_node]:\\n            if color[adj] == 'white':\\n                stack.append(adj)\\n\\n\\ndef dfs_cc_1(graph):\\n    n = length(graph)\\n    finalization_stack = []\\n    color = ['white'] * n\\n    for i in range(1, n):\\n        if color[i] == 'white':\\n            dfs_cc_1_visit(graph, i, color, finalization_stack)    \\n    return finalization_stack\\n\\n\\ndef dfs_cc_2_visit(graph, node, color, scc, component):\\n    stack = [node]\\n\\n    while stack:\\n        current_node = stack[-1]\\n\\n        if color[current_node] != 'white':\\n            stack.pop()\\n            color[current_node] = 'black'\\n            scc[current_node] = component\\n            continue\\n\\n        color[current_node] = 'grey'\\n        for adj in graph[current_node]:\\n            if color[adj] == 'white':\\n                stack.append(adj)\\n\\n\\ndef dfs_cc_2(graph, stack_time):\\n    n = length(graph)\\n    color = ['white'] * n\\n    scc = [0] * n\\n    component = 0\\n    while stack_time:\\n        current_node = stack_time.pop()\\n        if color[current_node] == 'white':\\n            dfs_cc_2_visit(graph, current_node, color, scc, component)\\n            component += 1\\n\\n    return scc, component\\n\\n\\ndef strongly_connected_components(digraph, transpose):\\n    stack_time = dfs_cc_1(digraph)\\n    scc, max_component = dfs_cc_2(transpose, stack_time)\\n\\n    # create the components\\n    out_deg = [0] * max_component\\n    scc_nodes = [[] for _ in range(max_component)]\\n    for node in range(1, length(digraph)):\\n        scc_nodes[scc[node]].append(node)\\n        for adj in digraph[node]:\\n            if scc[node] != scc[adj]:\\n                out_deg[scc[node]] += 1\\n    \\n    # searching minimum strongly connectected component with out degree 0\\n    minimum_component = None\\n    for i, value in enumerate(out_deg):\\n        if value == 0 and (minimum_component is None or length(scc_nodes[i]) < length(scc_nodes[minimum_component])):\\n            minimum_component = i\\n    \\n    # return the size of the component and the nodes\\n    return length(scc_nodes[minimum_component]), scc_nodes[minimum_component]\\n\\n\\ndef __starting_point():\\n    digraph, transpose = get_input()\\n    count, nodes = strongly_connected_components(digraph, transpose)\\n    \\n    print(count)\\n    print(' '.join([str(x) for x in nodes]))\\n\\n__starting_point()\", \"import sys\\n\\n# sys.stind.readline lee datos el doble de\\n# r\\u00e1pido que la funcion por defecto input\\ninput = sys.stdin.readline\\n\\n\\n\\ndef get_input():\\n    n, m, h = [int(x) for x in input().split(' ')]\\n\\n    digraph = [[] for _ in range(n + 1)]\\n    transpose = [[] for _ in range(n + 1)]\\n    mantainence = [0] + [int(x) for x in input().split(' ')]\\n\\n    for _ in range(m):\\n        c1, c2 = [int(x) for x in input().split(' ')]\\n\\n        if (mantainence[c1] + 1) % h == mantainence[c2]:\\n            digraph[c1].append(c2)\\n            transpose[c2].append(c1)\\n        if (mantainence[c2] + 1) % h == mantainence[c1]:\\n            digraph[c2].append(c1)\\n            transpose[c1].append(c2)\\n\\n    return digraph, transpose\\n\\n\\ndef dfs_cc_1_visit(graph, node, color, finalization_stack):\\n    stack = [node]\\n\\n    while stack:\\n        current_node = stack[-1]\\n\\n        if color[current_node] != 'white':\\n            stack.pop()\\n            if color[current_node] == 'grey':\\n                finalization_stack.append(current_node)\\n                color[current_node] = 'black'\\n            continue\\n\\n        color[current_node] = 'grey'\\n        for adj in graph[current_node]:\\n            if color[adj] == 'white':\\n                stack.append(adj)\\n\\n\\ndef dfs_cc_1(graph):\\n    n = len(graph)\\n    finalization_stack = []\\n    color = ['white'] * n\\n    for i in range(1, n):\\n        if color[i] == 'white':\\n            dfs_cc_1_visit(graph, i, color, finalization_stack)    \\n    return finalization_stack\\n\\n\\ndef dfs_cc_2_visit(graph, node, color, scc, component):\\n    stack = [node]\\n\\n    while stack:\\n        current_node = stack[-1]\\n\\n        if color[current_node] != 'white':\\n            stack.pop()\\n            color[current_node] = 'black'\\n            scc[current_node] = component\\n            continue\\n\\n        color[current_node] = 'grey'\\n        for adj in graph[current_node]:\\n            if color[adj] == 'white':\\n                stack.append(adj)\\n\\n\\ndef dfs_cc_2(graph, stack_time):\\n    n = len(graph)\\n    color = ['white'] * n\\n    scc = [0] * n\\n    component = 0\\n    while stack_time:\\n        current_node = stack_time.pop()\\n        if color[current_node] == 'white':\\n            dfs_cc_2_visit(graph, current_node, color, scc, component)\\n            component += 1\\n\\n    return scc, component\\n\\n\\ndef strongly_connected_components(digraph, transpose):\\n    stack_time = dfs_cc_1(digraph)\\n    scc, max_component = dfs_cc_2(transpose, stack_time)\\n\\n    # create the components\\n    out_deg = [0] * max_component\\n    scc_nodes = [[] for _ in range(max_component)]\\n    for node in range(1, len(digraph)):\\n        scc_nodes[scc[node]].append(node)\\n        for adj in digraph[node]:\\n            if scc[node] != scc[adj]:\\n                out_deg[scc[node]] += 1\\n    \\n    # searching minimum strongly connectected component with out degree 0\\n    minimum_component = None\\n    for i, value in enumerate(out_deg):\\n        if value == 0 and (minimum_component is None or len(scc_nodes[i]) < len(scc_nodes[minimum_component])):\\n            minimum_component = i\\n    \\n    # return the size of the component and the nodes\\n    return len(scc_nodes[minimum_component]), scc_nodes[minimum_component]\\n\\n\\ndef __starting_point():\\n    digraph, transpose = get_input()\\n    count, nodes = strongly_connected_components(digraph, transpose)\\n    \\n    print(count)\\n    print(' '.join([str(x) for x in nodes]))\\n\\n__starting_point()\"]",
    "test": "{\n  \"inputs\": [\n    \"3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\\n\",\n    \"4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\\n\",\n    \"5 5 4\\n0 1 2 3 3\\n1 2\\n2 3\\n3 4\\n4 1\\n3 5\\n\",\n    \"2 1 2\\n1 0\\n1 2\\n\",\n    \"5 5 3\\n2 2 0 1 0\\n5 4\\n5 2\\n1 4\\n5 1\\n4 3\\n\",\n    \"10 10 5\\n3 3 3 4 4 1 3 0 2 4\\n7 5\\n10 8\\n10 8\\n5 8\\n2 10\\n9 2\\n7 4\\n3 4\\n7 5\\n4 8\\n\",\n    \"10 9 2\\n0 0 0 0 1 1 0 1 1 1\\n4 10\\n8 2\\n10 3\\n3 9\\n1 5\\n6 2\\n6 1\\n7 9\\n8 7\\n\",\n    \"10 20 5\\n2 2 1 4 0 3 0 4 1 3\\n6 1\\n8 5\\n2 10\\n3 5\\n1 9\\n4 6\\n9 7\\n2 3\\n7 4\\n10 8\\n4 9\\n2 5\\n4 10\\n2 8\\n10 3\\n1 8\\n8 10\\n6 7\\n5 1\\n10 3\\n\",\n    \"10 9 8\\n3 2 1 1 5 6 7 0 4 0\\n10 7\\n5 9\\n10 4\\n7 6\\n6 5\\n3 2\\n2 1\\n9 1\\n3 8\\n\",\n    \"10 9 2\\n1 1 0 1 1 1 1 1 1 1\\n3 10\\n3 8\\n3 6\\n3 7\\n3 5\\n3 4\\n3 1\\n3 9\\n3 2\\n\",\n    \"10 10 5\\n3 4 2 0 3 0 1 1 2 4\\n8 9\\n7 3\\n5 2\\n4 8\\n3 5\\n6 8\\n3 5\\n1 10\\n10 6\\n9 1\\n\",\n    \"10 30 7\\n5 4 2 3 3 2 5 0 1 6\\n7 2\\n2 4\\n9 3\\n3 5\\n5 2\\n7 10\\n6 5\\n10 1\\n9 8\\n10 8\\n3 4\\n10 4\\n4 2\\n7 6\\n2 8\\n1 10\\n5 10\\n5 6\\n5 6\\n6 2\\n6 5\\n9 10\\n8 6\\n2 4\\n9 7\\n1 9\\n10 4\\n6 10\\n9 3\\n2 7\\n\",\n    \"10 10 10\\n2 3 5 7 0 8 6 9 4 1\\n1 2\\n10 1\\n5 10\\n5 10\\n4 6\\n8 5\\n1 2\\n1 2\\n7 4\\n1 2\\n\",\n    \"10 20 3\\n2 2 1 1 2 0 0 1 2 2\\n7 5\\n7 10\\n2 7\\n10 4\\n10 8\\n1 7\\n3 7\\n9 7\\n3 10\\n6 3\\n4 1\\n4 1\\n8 6\\n3 7\\n10 3\\n2 7\\n8 5\\n2 7\\n1 4\\n2 6\\n\",\n    \"10 30 10\\n7 9 1 5 4 6 0 3 8 2\\n10 8\\n8 5\\n6 1\\n8 5\\n3 10\\n10 8\\n9 2\\n8 5\\n7 3\\n3 10\\n1 9\\n10 8\\n6 1\\n1 9\\n8 5\\n7 3\\n1 9\\n7 3\\n7 3\\n4 6\\n10 8\\n7 3\\n3 10\\n10 8\\n1 9\\n8 5\\n6 1\\n4 6\\n3 10\\n6 1\\n\",\n    \"10 10 2\\n1 1 1 0 1 0 0 0 0 1\\n4 10\\n10 7\\n7 1\\n5 6\\n6 3\\n1 8\\n2 9\\n5 4\\n3 8\\n2 9\\n\",\n    \"10 15 2\\n1 0 1 1 0 0 1 0 0 1\\n5 1\\n7 8\\n2 10\\n3 5\\n1 9\\n6 4\\n7 9\\n2 3\\n6 4\\n8 10\\n9 4\\n8 4\\n8 1\\n10 8\\n6 7\\n\",\n    \"9 10 3\\n0 2 2 1 0 0 1 2 1\\n4 6\\n2 6\\n5 7\\n4 8\\n9 2\\n9 1\\n3 5\\n8 1\\n3 7\\n6 2\\n\",\n    \"10 9 5\\n1 1 1 1 1 2 1 1 1 1\\n6 7\\n6 3\\n6 5\\n6 4\\n6 9\\n6 8\\n6 1\\n6 10\\n6 2\\n\",\n    \"10 9 5\\n0 0 0 0 0 0 0 0 0 4\\n10 3\\n10 7\\n10 5\\n10 8\\n10 9\\n10 1\\n10 4\\n10 6\\n10 2\\n\",\n    \"10 9 2\\n0 1 0 0 1 0 1 1 1 1\\n3 7\\n3 2\\n8 6\\n1 7\\n3 9\\n5 4\\n10 1\\n4 9\\n6 2\\n\",\n    \"10 9 5\\n0 4 1 0 1 2 1 0 4 4\\n8 7\\n4 3\\n1 5\\n2 4\\n6 5\\n10 8\\n9 1\\n6 7\\n6 3\\n\",\n    \"10 9 5\\n2 1 2 0 1 0 1 2 0 4\\n10 9\\n3 7\\n1 5\\n10 6\\n7 9\\n10 4\\n5 4\\n2 6\\n8 2\\n\",\n    \"7 8 3\\n0 0 1 2 2 0 1\\n1 5\\n4 3\\n7 5\\n1 7\\n3 2\\n2 4\\n6 7\\n6 5\\n\",\n    \"9 13 3\\n0 2 1 2 2 0 1 0 1\\n4 7\\n9 5\\n7 5\\n7 6\\n9 6\\n8 2\\n3 2\\n8 3\\n4 3\\n4 9\\n1 2\\n1 3\\n5 6\\n\",\n    \"6 7 3\\n0 1 2 0 1 2\\n1 2\\n2 3\\n3 1\\n3 4\\n4 5\\n5 6\\n6 4\\n\",\n    \"5 5 3\\n1 1 2 0 0\\n1 3\\n1 5\\n2 3\\n3 4\\n2 4\\n\",\n    \"6 3 3\\n0 1 2 0 1 2\\n4 5\\n5 6\\n4 6\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n3 \",\n    \"4\\n1 2 3 4 \",\n    \"1\\n5 \",\n    \"2\\n1 2 \",\n    \"3\\n1 4 5 \",\n    \"1\\n6 \",\n    \"10\\n1 5 6 2 8 7 9 3 10 4 \",\n    \"5\\n1 9 7 4 6 \",\n    \"1\\n4 \",\n    \"10\\n1 3 10 8 6 7 5 4 9 2 \",\n    \"1\\n2 \",\n    \"8\\n10 7 2 4 3 9 8 5 \",\n    \"1\\n9 \",\n    \"3\\n7 10 3 \",\n    \"1\\n5 \",\n    \"2\\n2 9 \",\n    \"10\\n1 5 3 2 10 8 7 9 4 6 \",\n    \"3\\n3 7 5 \",\n    \"1\\n6 \",\n    \"1\\n9 \",\n    \"10\\n1 7 3 2 6 8 9 4 5 10 \",\n    \"1\\n6 \",\n    \"1\\n3 \",\n    \"3\\n2 4 3 \",\n    \"1\\n4 \",\n    \"3\\n4 6 5 \",\n    \"3\\n3 2 4 \",\n    \"1\\n3 \"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}