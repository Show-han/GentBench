{
    "problem": "You are an expert Python programmer, and here is your task: Have you ever played Hanabi? If not, then you've got to try it out! This problem deals with a simplified version of the game.\n\nOverall, the game has 25 types of cards (5 distinct colors and 5 distinct values). Borya is holding n cards. The game is somewhat complicated by the fact that everybody sees Borya's cards except for Borya himself. Borya knows which cards he has but he knows nothing about the order they lie in. Note that Borya can have multiple identical cards (and for each of the 25 types of cards he knows exactly how many cards of this type he has).\n\nThe aim of the other players is to achieve the state when Borya knows the color and number value of each of his cards. For that, other players can give him hints. The hints can be of two types: color hints and value hints. \n\nA color hint goes like that: a player names some color and points at all the cards of this color. \n\nSimilarly goes the value hint. A player names some value and points at all the cards that contain the value.\n\nDetermine what minimum number of hints the other players should make for Borya to be certain about each card's color and value.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of Borya's cards. The next line contains the descriptions of n cards. The description of each card consists of exactly two characters. The first character shows the color (overall this position can contain five distinct letters \u2014 R, G, B, Y, W). The second character shows the card's value (a digit from 1 to 5). Borya doesn't know exact order of the cards they lie in.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum number of hints that the other players should make.\n\n\n-----Examples-----\nInput\n2\nG3 G3\n\nOutput\n0\n\nInput\n4\nG4 R4 R3 B3\n\nOutput\n2\n\nInput\n5\nB1 Y1 W1 G1 R1\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample Borya already knows for each card that it is a green three.\n\nIn the second sample we can show all fours and all red cards.\n\nIn the third sample you need to make hints about any four colors.",
    "solution": "[\"\\\"\\\"\\\"\\nCodeforces Round 253 Div 1 Problem A\\n\\nAuthor  : chaotic_iak\\nLanguage: Python 3.3.4\\n\\\"\\\"\\\"\\n\\ndef read(mode=2):\\n    # 0: String\\n    # 1: List of strings\\n    # 2: List of integers\\n    inputs = input().strip()\\n    if mode == 0:\\n        return inputs\\n    if mode == 1:\\n        return inputs.split()\\n    if mode == 2:\\n        return [int(x) for x in inputs.split()]\\n\\ndef write(s=\\\"\\\\n\\\"):\\n    if isinstance(s, list): s = \\\" \\\".join(map(str,s))\\n    s = str(s)\\n    print(s, end=\\\"\\\")\\n\\n################################################### SOLUTION\\nimport itertools\\ncovers = itertools.product([0,1], repeat=10)\\n\\nn, = read()\\ns = read(1)\\na = [0] * 25\\ncolors = \\\"RGBYW\\\"\\nfor i in s:\\n    a[colors.index(i[0]) * 5 + int(i[1])-1] |= 1\\n\\ndef check(cover):\\n    nonlocal a\\n    unknowns = [0] * 11\\n    for i in range(25):\\n        if not a[i]: continue\\n        id = -1\\n        if not cover[i%5]: id = 5+i//5\\n        if not cover[5+i//5]:\\n            if id == -1:\\n                id = i%5\\n            else:\\n                id = 10\\n        if id > -1:\\n            if unknowns[id]: return False\\n            unknowns[id] = 1\\n    return True\\n\\nmn = 99\\nfor i in covers:\\n    if check(i):\\n        mn = min(mn, sum(i))\\n\\nprint(mn)\", \"input()\\ncolour = {'R': 0, 'G': 1, 'B': 2, 'Y': 3, 'W': 4}\\ncards = {(colour[c], ord(v) - ord('1')) for c, v in input().split()}\\n\\ndef ok(cs, vs):\\n    return len({\\n            (c if (cs >> c) & 1 else -1, v if (vs >> v) & 1 else -1)\\n            for c, v in cards\\n        }) == len(cards)\\n\\nprint((min(bin(cs).count('1') + bin(vs).count('1')\\n    for cs in range(1<<5) for vs in range(1<<5)\\n    if ok(cs, vs)\\n)))\\n\", \"import itertools\\n\\n\\ninput()\\ncards = tuple(set(str.split(input())))\\nn = len(cards)\\n\\nif n == 1:\\n\\n    print(0)\\n    return\\n\\nsymbols = \\\"RGBYW12345\\\"\\nfor l in range(1, 10):\\n\\n    for comb in itertools.combinations(symbols, l):\\n\\n        positions = [cards] * n\\n        for symbol in comb:\\n\\n            for i in range(n):\\n\\n                if symbol in cards[i]:\\n\\n                    positions[i] = tuple([c for c in positions[i] if symbol in c])\\n\\n                else:\\n\\n                    positions[i] = tuple([c for c in positions[i] if symbol not in c])\\n\\n        if sum(map(len, positions)) == n:\\n\\n            print(l)\\n            return\\n\", \"input()\\ncolour = dict(list(zip('RGBYW', list(range(5)))))\\ncards = {(colour[c], ord(v) - ord('1')) for c, v in input().split()}\\n\\nprint((min(bin(cs).count('1') + bin(vs).count('1')\\n    for cs in range(1<<5) for vs in range(1<<5)\\n    if len({\\n        (c if (cs >> c) & 1 else -1, v if (vs >> v) & 1 else -1)\\n        for c, v in cards\\n    }) == len(cards)\\n)))\\n\", \"from itertools import *\\npower = lambda i: chain.from_iterable(combinations(i, r) for r in range(len(i) + 1))\\ninput()\\ncards = set(input().split())\\nprint((min(len(s) for s in power(\\\"RGBYW12345\\\") if\\n    len(set(str(set(s) & set(t)) for t in cards)) == len(cards)\\n)))\\n\", \"def check(hint, Card):\\n    for i in Card :\\n        for j in Card :\\n            if i == j : continue\\n            elif i[0] == j[0] :\\n                if i[1] not in hint and j[1] not in hint :\\n                    return False\\n            elif i[1] == j[1] :\\n                if i[0] not in hint and j[0] not in hint :\\n                    return False\\n            else :\\n                if i[0] not in hint and i[1] not in hint and j[0] not in hint and j[1] not in hint :\\n                    return False\\n    return True\\nHH = \\\"RGBYW12345\\\"\\nn = int(input())\\nCard = list(input().split(' '))\\nans = 20\\nfor i in range(1024):\\n    hint = \\\"\\\"\\n    cnt = 0\\n    for j in range(10) :\\n        if (2**j)&i > 0 :\\n            hint += HH[j]\\n            cnt+=1\\n    if check(hint, Card) :\\n        ans = min(ans, cnt)\\nprint(ans)        \", \"n = int(input())\\ncolour = dict(zip('RGBYW', range(5, 10)))\\ncards = list({2 ** colour[c] + 2 ** (ord(v) - ord('1')) for c, v in input().split()})\\nans = 10\\nn = len(cards)\\nif n > 1:\\n    for bit in range(2 ** 10):\\n        ok = True\\n        for i in range(n - 1):\\n            for j in range(i + 1, n):\\n                if cards[i] & cards[j] == 0:\\n                    if (cards[i] | cards[j]) & bit == 0:\\n                        ok = False\\n                        break\\n                elif cards[i] != cards[j]:\\n                    if (cards[i] ^ cards[j]) & bit == 0:\\n                        ok = False\\n                        break\\n            if not ok:\\n                break\\n        if ok:\\n            ans = min(bin(bit).count('1'), ans)\\n    print(ans)\\nelse:\\n    print(0)\", \"def Checker(hint,card):\\n    for a in card:\\n        for b in card:\\n            if a == b:\\n                continue\\n            elif a[0] == b[0]:\\n                if a[1] not in hint and b[1] not in hint:\\n                    return False\\n            elif a[1] == b[1]:\\n                if a[0] not in hint and b[0] not in hint:\\n                    return False\\n            elif a[0] not in hint and a[1] not in hint and b[0] not in hint and b[1] not in hint:\\n                return False\\n    return True\\n\\nuser_input=int(input())\\nuser_input = input()\\nCard=user_input.split(' ')\\npossible_chars=\\\"RGBYW12345\\\"\\n\\nfinal_answer=10\\n\\ncard_set=set(Card)\\nif len(card_set)==1:\\n    print (\\\"0\\\")\\n\\nelse:\\n\\n    for i in range(1024):\\n        hint=\\\"\\\"\\n        counter=0\\n        for j in range(9,-1,-1):\\n            if (i-(2**j))>0:\\n                hint+=possible_chars[j]\\n                i-=2**j\\n                counter+=1\\n\\n        if Checker(hint,card_set):\\n            final_answer=min(final_answer,counter)\\n\\n    print (final_answer)\\n\", \"from itertools import combinations\\nn = int(input())\\ncolors = {'R':0,'G':1,'B':2,'Y':3,'W':4}\\nletters = {'1':0,'2':1,'3':2,'4':3,'5':4}\\nl = list(set(list(input().split())))\\ndef checker(hint,cards):\\n    for i in cards:\\n        for j in cards:\\n            if i == j:\\n                continue\\n            if i[0] == j[0]:\\n                if i[1] not in hint and j[1] not in hint:\\n                    return False\\n            elif i[1] == j[1]:\\n                if i[0] not in hint and j[0] not in hint:\\n                    return False\\n            else:\\n                if i[0] not in hint and i[1] not in hint and j[0] not in hint and j[1] not in hint:\\n                    return False\\n    return True\\nresult = []\\nfor i in l:\\n    if i[0] not in result:\\n        result.append(i[0])\\n    if i[1] not in result:\\n        result.append(i[1])\\nall_hints = []\\nfor i in range(1,len(result)+1):\\n    comb = combinations(result,i)\\n    all_hints += comb\\nmin_hint = len(result)\\nif len(l) == 1:\\n    print(0)\\nelse:\\n    for i in all_hints:\\n        if checker(i,l):\\n            min_hint = min(len(i),min_hint)\\n    print (min_hint)\\n\\n\", \"input()\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\", \"input()\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\\n\", \"input()\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\\n\", \"input()\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\\n\", \"input()\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\\n\", \"input()\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\\n\", \"input()\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\\n\", \"input()\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\\n\", \"input()\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\\n\", \"from itertools import chain, combinations\\nfrom copy import deepcopy\\ndef powerset(iterable):\\n    s = list(iterable)\\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\\nn = int(input())\\nlocations = input().split()\\nmatrixG = [[0]*5 for i in range(5)]\\nfor i in locations:\\n    if i[0] == \\\"R\\\":\\n        matrixG[0][int(i[1])-1] += 1\\n    elif i[0] == \\\"G\\\":\\n        matrixG[1][int(i[1])-1] += 1\\n    elif i[0] == \\\"B\\\":\\n        matrixG[2][int(i[1])-1] += 1\\n    elif i[0] == \\\"Y\\\":\\n        matrixG[3][int(i[1])-1] += 1\\n    elif i[0] == \\\"W\\\":\\n        matrixG[4][int(i[1])-1] += 1\\n\\nfor i in list(powerset(list(range(10)))):\\n    matrix = deepcopy(matrixG)\\n    color = []\\n    value = []\\n    for j in i:\\n        if j <= 4:\\n            color.append(j)\\n        else:\\n            value.append(j)\\n    for v in value:\\n        for c in color:\\n            matrix[c][v-5] = 0\\n        ctr = 0\\n        for r in range(5):\\n            if matrix[r][v-5] == 0:\\n                ctr += 1\\n        if ctr == 4:\\n            for r in range(5):\\n                matrix[r][v-5] = 0\\n    for c in color:\\n        if matrix[c].count(0) == 4:\\n            matrix[c] = [0]*5\\n    ctr = 0\\n    for k in range(5):\\n        for j in range(5):\\n            if matrix[k][j] == 0:\\n                ctr += 1\\n    if ctr == 24:\\n        print(len(i))\\n        break\\n\", \"input()\\n\\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\\n\\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\\n\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"input()\\np={ (1<< 'RGBYW'.index(c)) + (1<<int(k)+4) for c, k in input().split()}\\nmn=20\\nres=90\\nfor i in range(1024):\\n    if len(p)==len(set(i&j for j in p)):\\n        mn=min(mn,bin(i).count('1'))\\nprint(mn)\"]",
    "test": "{\n  \"inputs\": [\n    \"2\\nG3 G3\\n\",\n    \"4\\nG4 R4 R3 B3\\n\",\n    \"5\\nB1 Y1 W1 G1 R1\\n\",\n    \"10\\nY4 B1 R3 G5 R5 W3 W5 W2 R1 Y1\\n\",\n    \"3\\nG4 G3 B4\\n\",\n    \"2\\nW3 Y5\\n\",\n    \"2\\nW5 Y5\\n\",\n    \"100\\nW4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5\\n\",\n    \"100\\nB5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2\\n\",\n    \"100\\nY3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1\\n\",\n    \"100\\nG3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3\\n\",\n    \"100\\nW5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5\\n\",\n    \"100\\nY5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5\\n\",\n    \"100\\nY3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3\\n\",\n    \"10\\nW1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3\\n\",\n    \"10\\nW2 R2 B5 W5 W2 B3 B2 R5 Y5 R2\\n\",\n    \"5\\nW3 Y5 W2 G3 Y3\\n\",\n    \"5\\nW5 G5 W2 Y5 G2\\n\",\n    \"5\\nW5 W3 Y3 Y5 W2\\n\",\n    \"5\\nY5 W3 W2 G5 W3\\n\",\n    \"5\\nG5 G3 G5 G5 W2\\n\",\n    \"5\\nW2 Y2 G3 G3 G3\\n\",\n    \"5\\nG3 Y5 Y2 Y5 W3\\n\",\n    \"5\\nW3 W5 Y3 W2 G5\\n\",\n    \"5\\nY3 Y2 Y3 Y5 Y5\\n\",\n    \"5\\nW5 Y3 W5 W5 Y5\\n\",\n    \"5\\nG3 Y3 G3 Y3 G3\\n\",\n    \"5\\nG4 W5 Y4 Y4 R5\\n\",\n    \"5\\nG3 R2 R5 B3 W4\\n\",\n    \"5\\nW2 G5 W3 R4 R4\\n\",\n    \"5\\nY3 Y3 G3 Y3 W3\\n\",\n    \"5\\nW5 W5 W3 Y3 Y5\\n\",\n    \"35\\nG5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3\\n\",\n    \"35\\nG3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2\\n\",\n    \"35\\nW2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5\\n\",\n    \"35\\nY2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2\\n\",\n    \"35\\nY5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5\\n\",\n    \"35\\nG3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3\\n\",\n    \"35\\nR2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4\\n\",\n    \"35\\nG2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4\\n\",\n    \"35\\nW4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2\\n\",\n    \"35\\nY3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3\\n\",\n    \"35\\nW3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3\\n\",\n    \"25\\nY3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5\\n\",\n    \"25\\nW5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2\\n\",\n    \"25\\nY1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4\\n\",\n    \"25\\nB3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1\\n\",\n    \"25\\nG4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3\\n\",\n    \"25\\nR1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5\\n\",\n    \"5\\nW3 B1 Y1 R3 Y5\\n\",\n    \"4\\nR1 R2 G1 Y5\\n\",\n    \"4\\nR1 R2 G1 B3\\n\",\n    \"15\\nY3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1\\n\",\n    \"4\\nG5 W5 W4 R3\\n\"\n  ],\n  \"outputs\": [\n    \"0\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"7\\n\",\n    \"7\\n\",\n    \"7\\n\",\n    \"7\\n\",\n    \"8\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"2\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}