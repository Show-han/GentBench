{
    "problem": "You are an expert Python programmer, and here is your task: Bash has set out on a journey to become the greatest Pokemon master. To get his first Pokemon, he went to Professor Zulu's Lab. Since Bash is Professor Zulu's favourite student, Zulu allows him to take as many Pokemon from his lab as he pleases.\n\nBut Zulu warns him that a group of k > 1 Pokemon with strengths {s_1, s_2, s_3, ..., s_{k}} tend to fight among each other if gcd(s_1, s_2, s_3, ..., s_{k}) = 1 (see notes for gcd definition).\n\nBash, being smart, does not want his Pokemon to fight among each other. However, he also wants to maximize the number of Pokemon he takes from the lab. Can you help Bash find out the maximum number of Pokemon he can take? \n\nNote: A Pokemon cannot fight with itself.\n\n\n-----Input-----\n\nThe input consists of two lines.\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5), the number of Pokemon in the lab.\n\nThe next line contains n space separated integers, where the i-th of them denotes s_{i} (1 \u2264 s_{i} \u2264 10^5), the strength of the i-th Pokemon.\n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 the maximum number of Pokemons Bash can take.\n\n\n-----Examples-----\nInput\n3\n2 3 4\n\nOutput\n2\n\nInput\n5\n2 3 4 6 7\n\nOutput\n3\n\n\n\n-----Note-----\n\ngcd (greatest common divisor) of positive integers set {a_1, a_2, ..., a_{n}} is the maximum positive integer that divides all the integers {a_1, a_2, ..., a_{n}}.\n\nIn the first sample, we can take Pokemons with strengths {2, 4} since gcd(2, 4) = 2.\n\nIn the second sample, we can take Pokemons with strengths {2, 4, 6}, and there is no larger group with gcd \u2260 1.",
    "solution": "[\"from collections import Counter\\nn = int(input())\\na = [int(_) for _ in input().split()]\\nf = Counter(a)\\nN = 10 ** 5 + 10\\np = [0 for i in range(N)]\\nans = Counter()\\nfor i in range(2, N):\\n    if p[i]:\\n        continue\\n    for j in range(i, N, i):\\n        p[j] = 1\\n        ans[i] += f[j]\\nprint(max(1, ans.most_common(1)[0][1]))\\n\", \"n = int(input().strip())\\na = [int(i) for i in input().strip().split()]\\nf = [0 for i in range(max(a)+1)]\\nl = len(f)\\n\\nfor i in a:\\n  f[i]+=1\\n\\nif f[1]:\\n  f[1]=1\\n\\nfor i in range(2,l):\\n  for j in range(2*i,l,i):\\n    f[i]+=f[j]\\n\\nprint(max(f))\\n\", \"import functools\\n\\n@functools.lru_cache(maxsize=10000)\\ndef factor(n):\\n    res = []\\n    d = 2\\n    while d * d <= n:\\n        if n % d == 0:\\n            res.append(d)\\n            n //= d\\n        else:\\n            d += 1\\n    if n > 1:\\n        res.append(n)\\n    return set(res)\\n\\nnum = int(input())\\n\\npoks = list(map(int, input().split()))[:num]\\n\\nc = dict()\\nfor p in poks:\\n    for d in factor(p):\\n        if d in c.keys():\\n            c[d] += 1\\n        else:\\n            c[d] = 1\\n            \\nif c:\\n    print(max(c.values()))\\nelse:\\n    print(1)\", \"n = int(input())\\ns = list(map(int, input().split()))\\n\\npf = [[] for _ in range(10 ** 5 + 1)]\\nfor i in range(2, 10 ** 5 + 1):\\n    if len(pf[i]) > 0:\\n        continue\\n    for j in range(i, 10 ** 5 + 1, i):\\n        pf[j].append(i)\\n\\nf = [0] * (10 ** 5 + 1)\\n\\nfor x in s:\\n    for i in pf[x]:\\n        f[i] += 1\\n\\nprint(max(1, max(f)))\\n\", \"dict = {}\\nans = {}\\nfor i in range(-1,100110): \\n\\tdict[i] = []\\n\\tans[i] = 0\\nfor i in range(2,100010): \\n\\tif dict[i] == []:\\n\\t\\tj = i+i\\n\\t\\twhile j <= 100010:\\n\\t\\t\\t#print(dict[j])\\n\\t\\t\\ttmp = dict[j]\\n\\t\\t\\ttmp += [i]\\n\\t\\t\\tdict[j] = tmp\\n\\t\\t\\t#print(dict[j])\\n\\t\\t\\tj += i\\n\\t\\tdict[i] = [i]\\nn = input()\\nn = input()\\nn = n.split(\\\" \\\")\\nbanyak = 0\\nfor i in n:\\n\\ttmp = int(i)\\n\\tfor j in dict[tmp] : \\n\\t\\tans[j] += 1\\n\\t\\tif ans[j] > banyak : banyak = ans[j]\\nif (banyak == 0) : banyak = 1\\nprint(banyak)\", \"n=int(input())\\nip=list(map(int,input().split()))\\nm=max(ip)\\narr=[0 for i in range(m+1)]\\nfor i in ip:\\n    arr[i]+=1\\nans=0\\nfor i in range(2,m+1):\\n    j=i\\n    count=0\\n    while j<=m:\\n        count+=arr[j]\\n        j+=i\\n    if count>ans:\\n        ans=count\\nprint(max(ans,1))\\n\", \"def solve(A):\\n    N = max(A)\\n    primediv = list(range(N+1))\\n    for p in range(2, int(N**0.5)+1):\\n        if primediv[p] == p:\\n            for i in range(2*p, N+1, p):\\n                primediv[i] = p\\n\\n    count = [0] * (N+1)\\n    for n in A:\\n        while n != 1:\\n            p = primediv[n]\\n            count[p] += 1\\n            while primediv[n] == p:\\n                n //= p\\n\\n    return max(1, max(count))\\n    \\nn = int(input())\\nA = [int(x) for x in input().split()]\\nprint(solve(A))\\n        \\n\", \"def isPrime(n):\\n  for i in range(2, int(n ** 0.5) + 1):\\n    if n % i == 0:\\n      return False\\n  return True\\n    \\nprimes = set()    \\n    \\nfor i in range(2, 100000):\\n  if isPrime(i):\\n    primes.add(i)\\n\\nc = [1] + [0] * 100000\\nn = input()\\n\\ns = list(map(int, input().split()))\\n\\nx = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313]\\nfor i in s:\\n  for p in x:\\n    if i in primes:\\n      c[i] += 1\\n      break\\n    if p**2 > i:\\n      break\\n    if i % p == 0:\\n      c[p] += 1\\n      while i and i % p == 0:\\n        i //= p\\n    \\n  #if i != 1:\\n  #  c[i] +=1\\n\\nm = max(c)\\nprint(m)\", \"\\nM = 10 ** 5\\n\\nn = int(input())\\nss = [int(s) for s in input().split()]\\n\\nprime_factor = {i: set() for i in range(1, M + 1)}\\n\\nfor p in range(2, M + 1):\\n    if prime_factor[p] != set():\\n        continue\\n    else:\\n        for i in range(p, M + 1, p):\\n            prime_factor[i].add(p)\\n\\ncnt = [0] * (M + 1)\\n\\nfor s in ss:\\n    for p in prime_factor[s]:\\n        cnt[p] += 1\\n\\nprint(max(1, max(cnt)))\", \"\\nM = 10 ** 5\\n\\nn = int(input())\\nss = [int(s) for s in input().split()]\\n\\nprime_factor = [set() for i in range(M + 1)]\\n\\nfor p in range(2, M + 1):\\n    if prime_factor[p] != set():\\n        continue\\n    else:\\n        for i in range(p, M + 1, p):\\n            prime_factor[i].add(p)\\n\\ncnt = [0] * (M + 1)\\n\\nfor s in ss:\\n    for p in prime_factor[s]:\\n        cnt[p] += 1\\n\\nprint(max(1, max(cnt)))\", \"n = int(input())\\ns = [int(i) for i in input().split()]\\n\\nans = 1\\np = [0] * 100002\\n\\nfor i in s:\\n    p[i] += 1\\n\\nfor i in range(2, 100002):\\n    c = 0\\n    for j in range(i, 100002, i):\\n        c += p[j]\\n    ans = max(ans, c)\\nprint(ans)\", \"input()\\ncount = {}\\nfor x in map(int, input().split()):\\n    d = 2\\n    while d * d <= x:\\n        if x % d == 0:\\n            count[d] = count.get(d, 0) + 1\\n            while x % d == 0:\\n                x //= d\\n        else:\\n            d += 1\\n    if x > 1:\\n        count[x] = count.get(x, 0) + 1\\nprint(max([1] + list(count.values())))\\n\\n\", \"n=int(input())\\na=list(map(int,input().split(\\\" \\\")))\\nt=max(a)\\nk=[0]*(t+2)\\nfor el in a:\\n    k[el]+=1\\nif k[1]:\\n    k[1]=1\\nfor j in range(2,t+2):\\n    for i in range(2*j,t+2,j):\\n            k[j]+=k[i]\\nprint(max(k))\", \"n = int(input().strip())\\na = [int(i) for i in input().strip().split()]\\nf = [0 for i in range(max(a)+1)]\\nl = len(f)\\n\\nfor i in a:\\n  f[i]+=1\\n\\nif f[1]:\\n  f[1]=1\\n\\nfor i in range(2,l):\\n  for j in range(2*i,l,i):\\n    f[i]+=f[j]\\n\\nprint(max(f))\", \"def main():\\n\\tn = input()\\n\\tL = [int(x) for x in input().split()]\\n\\tprint(solver(L))\\n\\ndef solver(L):\\n\\tn = max(L)\\n\\tnums = [0] * (n + 1)\\n\\tfor x in L:\\n\\t\\tnums[x] += 1\\n\\thighestCount = 1\\n\\tfor i in range(2, n + 1):\\n\\t\\tcount = sum(nums[i:n+1:i])\\n\\t\\thighestCount = max(highestCount, count)\\n\\treturn highestCount\\n\\t\\t#for j in range(i, n + 1, i):\\n\\t\\t#\\tcount += \\n\\n\\n\\n\\t# n = max(L)\\n\\t# primes = makePrimes(n)\\n\\t# highestCount = maxCount(L)\\n\\t# for prime in primes:\\n\\t# \\tif prime > n**0.5:\\n\\t# \\t\\tbreak \\n\\t# \\tcount = len([x for x in L if x % prime == 0])\\n\\t# \\tif count > highestCount:\\n\\t# \\t\\thighestCount = count\\n\\t# return highestCount\\n\\ndef maxCount(L):\\n\\td = dict()\\n\\tfor x in L:\\n\\t\\tif x in d:\\n\\t\\t\\td[x] += 1\\n\\t\\telse:\\n\\t\\t\\td[x] = 1\\n\\td[1] = 1\\n\\treturn max([d[x] for x in d])\\n\\n# print(solver([2, 3, 4]))\\n# print(solver([3, 9]))\\n# print(solver([2, 3, 4, 6, 7]))\\n# print(solver([12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 15, 1, 18, 28, 20, 6, 31, 16, 5, 23, 21, 38, 3, 11, 18, 11, 3, 25, 33]))\\n# print(solver([1, 1, 1]))\\n# print(solver([1, 3, 6]))\\n\\nmain()\\n\", \"def main():\\n\\tn = input()\\n\\tL = [int(x) for x in input().split()]\\n\\tprint(solver(L))\\n\\ndef solver(L):\\n\\tn = max(L)\\n\\tnums = [0] * (n + 1)\\n\\tfor x in L:\\n\\t\\tnums[x] += 1\\n\\thighestCount = 1\\n\\tfor i in range(2, n + 1):\\n\\t\\tcount = 0 \\n\\t\\tfor j in range(i, n + 1, i):\\n\\t\\t\\tcount += nums[j]\\n\\t\\t#count = sum(nums[i:n+1:i])\\n\\t\\thighestCount = max(highestCount, count)\\n\\treturn highestCount\\n\\t\\t#for j in range(i, n + 1, i):\\n\\t\\t#\\tcount += \\n\\n\\n\\n\\t# n = max(L)\\n\\t# primes = makePrimes(n)\\n\\t# highestCount = maxCount(L)\\n\\t# for prime in primes:\\n\\t# \\tif prime > n**0.5:\\n\\t# \\t\\tbreak \\n\\t# \\tcount = len([x for x in L if x % prime == 0])\\n\\t# \\tif count > highestCount:\\n\\t# \\t\\thighestCount = count\\n\\t# return highestCount\\n\\ndef maxCount(L):\\n\\td = dict()\\n\\tfor x in L:\\n\\t\\tif x in d:\\n\\t\\t\\td[x] += 1\\n\\t\\telse:\\n\\t\\t\\td[x] = 1\\n\\td[1] = 1\\n\\treturn max([d[x] for x in d])\\n\\n# print(solver([2, 3, 4]))\\n# print(solver([3, 9]))\\n# print(solver([2, 3, 4, 6, 7]))\\n# print(solver([12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 15, 1, 18, 28, 20, 6, 31, 16, 5, 23, 21, 38, 3, 11, 18, 11, 3, 25, 33]))\\n# print(solver([1, 1, 1]))\\n# print(solver([1, 3, 6]))\\n\\nmain()\\n\", \"\\n\\ndef __starting_point():\\n    N = int(input())\\n    lst2 = list(map(int, input().split()))\\n    M = max(lst2)\\n    N=M+100\\n\\n    lst = [True for _ in range(N)]\\n    lst[0] = False\\n    lst[1]= False\\n\\n    i = 2\\n    while i < N:\\n        if lst[i]:\\n            for j in range(2,1+(N-1)//i):\\n                lst[i*j]=False\\n        i += 1\\n\\n    primes=[i for i in range(N) if lst[i]]\\n    #print(len(re))\\n\\n\\n\\n\\n\\n\\n    auxlst = [0]*(M+1)\\n    for i in lst2:\\n        auxlst[i] += 1\\n\\n    result = [0]*(M+1)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    for p in primes:\\n        if p > M:\\n            break\\n        n=p\\n        for _ in range(M//p):\\n            result[p] += auxlst[n]\\n            n += p\\n\\n    result = max(1,max(result))\\n    print(result)\\n    # to make changes\\n\\n__starting_point()\", \"#!/usr/bin/env pypy3\\n# -*- coding: UTF-8 -*-\\n\\ndef prime_t(t):\\n    i=2\\n    while i**2<=t:\\n        if t%i==0:\\n            return 0\\n        i+=1\\n    return 1\\np=[]\\n\\nfor i in range(2,100001):\\n    if prime_t(i):\\n        p.append(i)\\n\\nn=int(input())\\nol=[int(i) for i in input().split()]\\nl=[i for i in ol if int(i)%2]\\nans=max(1,n-len(l))\\n\\npd={i:0 for i in p}\\nfor i in ol:\\n    if i in pd:\\n        pd[i]+=1\\n        ans=max(ans,pd[i])\\nl=[i for i in ol if i not in pd]\\n\\n\\nld={}\\nfor i in l:\\n    if i in ld:\\n        ld[i]+=1\\n    else:\\n        ld[i]=1\\nsetl=set(l)\\nmol=list(setl)\\nmol.sort()\\n\\nfor i in mol:\\n    so=i\\n    for j in p:\\n        tmp=1\\n        if j/2>so:\\n            break\\n        elif so%j==0:\\n            pd[j]+=ld[i]\\n            while so%j==0:\\n                so//=j\\n            ans=max(ans,pd[j],tmp)\\nprint(ans)\", \"import math\\n\\nN = int(input())\\n\\nS = [int(s) for s in input().split()]\\nmax_s = max(S)\\n\\nfactors = [set() for i in range(max_s + 1)]\\nfact_cnt = [0] * (max_s + 1)\\n\\nfor p in range(2, max_s + 1):\\n    if factors[p] != set():\\n        continue\\n    else:\\n        for i in range(p, max_s + 1, p):\\n            factors[i].add(p)\\n\\n# print(factors)\\n\\nfor s in S:\\n    for p in factors[s]:\\n        fact_cnt[p] += 1\\n\\nans = max(1, max(fact_cnt))\\n\\nprint(ans)\", \"import math\\n\\nN = int(input())\\n\\nS = [int(s) for s in input().split()]\\n\\nfactors = {}\\n\\nfor s in S:\\n    root_s = math.sqrt(s)\\n\\n    for i in range(2, math.ceil(root_s) + 1, 1):\\n        if s % i == 0:\\n            if i in factors:\\n                factors[i] += 1\\n            else:\\n                factors[i] = 1\\n\\n            while s % i == 0:\\n                s //= i\\n\\n    if s > 1 and s in factors:\\n        factors[s] += 1\\n    elif s > 1 and s not in factors:\\n        factors[s] = 1\\n\\n# print(factors)\\n\\nif len(factors.values()) == 0:\\n    ans = 1\\nelse:\\n    ans = max(factors.values())\\n\\nprint(ans)\", \"import functools\\nimport sys\\ninput = lambda :sys.stdin.readline()\\n@functools.lru_cache(maxsize=10000)\\n\\ndef factor(n):\\n    res = []\\n    d = 2\\n\\n    while d*d <= n:\\n        if n % d == 0:\\n            res.append(d)\\n            n //= d\\n        else:\\n            d += 1\\n\\n    if n > 1:\\n        res.append(n)\\n\\n    # print(\\\"res\\\" ,res)\\n\\n    return set(res)\\n\\ndef Main(n):\\n    A = list(map(int, input().split()))[:n]\\n    # print(A)\\n    dic = dict()\\n    # print(factor(1))\\n\\n    for p in A:\\n        # print(factor(p))\\n        for d in factor(p):\\n            if d in dic.keys():\\n                dic[d] += 1\\n            else:\\n                dic[d] = 1\\n\\n            # print(dic)\\n\\n    if dic:\\n        print(max(dic.values()))\\n    else:\\n        print(1)\\n\\n\\n\\ndef __starting_point():\\n    n = int(input())\\n    Main(n)\\n__starting_point()\", \"the_len = int(input())\\ns2 = input()\\nimport math\\nnums = s2.split(' ')\\n\\ngroups = [0] * 100001\\nmax = 1\\n\\nfor n in nums:\\n    groups[int(n)] += 1\\n\\nfor i in range(2,100001):\\n    res = 0\\n    for j in range(i,100001,i):\\n        res += groups[j]\\n    if res > max :\\n        max = res\\n\\nprint (max)\", \"the_len = int(input())\\ns2 = input()\\nimport math\\nnums = s2.split(' ')\\n\\ngroups = [0] * 100001\\nmax = 1\\n\\nfor n in nums:\\n    groups[int(n)] += 1\\n\\nfor i in range(2,100001):\\n    res = 0\\n    for j in range(i,100001,i):\\n        res += groups[j]\\n    if res > max :\\n        max = res\\n\\nprint (max)\", \"def function1(n,s):\\n    if n==1:\\n        return 1\\n    pokemonj=0\\n    pokecage=[0 for i in range(100001)]\\n    for i in range(n):\\n        pokecage[s[i]]+=1\\n    maxyincage=min(pokecage[1],1)\\n    a = [i for i in range(100001)]\\n    a[1] = 0\\n\\n    i = 2\\n\\n    while i <= 100000:\\n        if a[i] != 0:\\n\\n            pokemonj=0\\n            for j in range(i, 100001, i):\\n                a[j] = 0\\n                pokemonj+=pokecage[j]\\n            if pokemonj>maxyincage:\\n                maxyincage=pokemonj\\n\\n        i += 1\\n\\n    return(maxyincage)\\n\\n\\n\\ndef main():\\n    n=int(input())\\n    s=list(map(int,input().split()))\\n    print(function1(n,s))\\ndef __starting_point():\\n    main()\\n\\n\\n\\n__starting_point()\", \"def function1(n,s):\\n    if n==1:\\n        return 1\\n    sn=max(s)\\n    pokemonj=0\\n    pokecage=[0 for i in range(sn+1)]\\n    for i in range(n):\\n        pokecage[s[i]]+=1\\n    maxyincage=min(pokecage[1],1)\\n    a = [i for i in range(sn+1)]\\n    a[1] = 0\\n\\n    i = 2\\n\\n    while i <= sn:\\n        if a[i] != 0:\\n\\n            pokemonj=pokecage[i]\\n            for j in range(i*2, sn+1, i):\\n                a[j] = 0\\n                pokemonj+=pokecage[j]\\n            if pokemonj>maxyincage:\\n                maxyincage=pokemonj\\n\\n        i += 1\\n\\n    return(maxyincage)\\n\\n\\n\\ndef main():\\n    n=int(input())\\n    s=list(map(int,input().split()))\\n    print(function1(n,s))\\ndef __starting_point():\\n    main()\\n\\n\\n\\n__starting_point()\"]",
    "test": "{\n  \"inputs\": [\n    \"3\\n2 3 4\\n\",\n    \"5\\n2 3 4 6 7\\n\",\n    \"3\\n5 6 4\\n\",\n    \"8\\n41 74 4 27 85 39 100 36\\n\",\n    \"6\\n89 20 86 81 62 23\\n\",\n    \"71\\n23 84 98 8 14 4 42 56 83 87 28 22 32 50 5 96 90 1 59 74 77 88 71 38 62 36 85 97 99 6 81 20 49 57 66 9 45 41 29 68 35 19 27 76 78 72 55 25 46 48 26 53 39 31 94 34 63 37 64 16 79 24 82 17 12 3 89 61 80 30 10\\n\",\n    \"95\\n72 38 75 62 87 30 11 65 35 16 73 23 18 48 19 4 22 42 14 60 49 83 59 15 51 27 80 97 37 100 64 81 54 71 52 20 5 98 78 86 26 55 25 57 36 3 8 74 82 21 29 1 76 2 79 61 39 9 89 77 70 63 56 28 92 53 31 45 93 47 67 99 58 12 84 44 32 34 69 40 13 7 66 68 17 85 6 90 33 91 94 24 46 10 50\\n\",\n    \"44\\n39706 21317 26213 55086 10799 31825 29024 6565 96535 11412 14642 91901 41932 24538 81351 53861 63403 34199 82286 32594 29684 42753 16857 73821 71085 36306 70080 11233 21023 8551 85406 95390 92375 52675 77938 46265 74855 5229 5856 66713 65730 24525 84078 20684\\n\",\n    \"35\\n45633 86983 46174 48399 33926 51395 76300 6387 48852 82808 28694 79864 4482 35982 21956 76522 19656 74518 28480 71481 25700 46815 14170 95705 8535 96993 29029 8898 97637 62710 14615 22864 69849 27068 68557\\n\",\n    \"1\\n1\\n\",\n    \"10\\n10 7 9 8 3 3 10 7 3 3\\n\",\n    \"9\\n10 10 6 10 9 1 8 3 5\\n\",\n    \"7\\n9 4 2 3 3 9 8\\n\",\n    \"1\\n4\\n\",\n    \"6\\n1623 45906 37856 34727 27156 12598\\n\",\n    \"30\\n83172 59163 67334 83980 5932 8773 77649 41428 62789 28159 17183 10199 41496 59500 14614 10468 54886 64679 42382 57021 50499 95643 77239 61434 16181 30505 59152 55972 18265 70566\\n\",\n    \"23\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 22 16 2 13 16\\n\",\n    \"46\\n12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 12553 15 1 18 28 20 6 31 16 5 23 21 38 3 11 18 11 3 25 33\\n\",\n    \"43\\n8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8831 8 23 40 33 11 5 21 16 19 15 41 30 28 31 5 32 16 5 38 11 21 34\\n\",\n    \"25\\n58427 26687 48857 46477 7039 25423 58757 48119 38113 40637 22391 48337 4157 10597 8167 19031 64613 70913 69313 18047 17159 77491 13499 70949 24107\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1 1\\n\",\n    \"2\\n3 6\\n\",\n    \"5\\n1 1 1 1 1\\n\",\n    \"5\\n3 3 3 3 3\\n\",\n    \"3\\n1 1 1\\n\",\n    \"2\\n541 541\\n\",\n    \"2\\n1 1\\n\",\n    \"2\\n99989 99989\\n\",\n    \"3\\n3 9 27\\n\",\n    \"2\\n1009 1009\\n\",\n    \"4\\n1 1 1 1\\n\",\n    \"6\\n2 10 20 5 15 25\\n\",\n    \"3\\n3 3 6\\n\",\n    \"3\\n457 457 457\\n\",\n    \"2\\n34 17\\n\",\n    \"3\\n12 24 3\\n\",\n    \"10\\n99991 99991 99991 99991 99991 99991 99991 99991 99991 99991\\n\",\n    \"2\\n1009 2018\\n\",\n    \"3\\n3 3 3\\n\",\n    \"7\\n6 9 12 15 21 27 33\\n\",\n    \"3\\n2 1 1\\n\",\n    \"2\\n557 557\\n\",\n    \"3\\n1 1 2\\n\",\n    \"5\\n2 2 101 101 101\\n\",\n    \"2\\n122 3721\\n\",\n    \"2\\n49201 98402\\n\",\n    \"2\\n88258 44129\\n\",\n    \"2\\n7919 47514\\n\",\n    \"5\\n1 2 1 1 1\\n\",\n    \"2\\n2 2\\n\",\n    \"5\\n1 1 1 1 2\\n\",\n    \"3\\n10007 20014 30021\\n\",\n    \"4\\n10 10 5 5\\n\",\n    \"2\\n6 9\\n\",\n    \"3\\n6 12 9\\n\",\n    \"2\\n14 7\\n\",\n    \"2\\n199 199\\n\",\n    \"3\\n49999 49999 99998\\n\",\n    \"5\\n1009 1009 1009 1009 1009\\n\",\n    \"3\\n17 17 17\\n\",\n    \"2\\n503 1509\\n\",\n    \"3\\n49999 99998 99998\\n\",\n    \"2\\n28657 28657\\n\",\n    \"3\\n121 22 33\\n\",\n    \"2\\n10079 20158\\n\",\n    \"2\\n6 15\\n\",\n    \"4\\n6 6 6 3\\n\",\n    \"2\\n991 1982\\n\",\n    \"3\\n20362 30543 50905\\n\",\n    \"2\\n443 886\\n\",\n    \"4\\n3 7 7 21\\n\",\n    \"3\\n3 6 9\\n\",\n    \"2\\n217 31\\n\",\n    \"6\\n10 10 10 5 5 5\\n\",\n    \"4\\n49441 25225 9081 4036\\n\",\n    \"2\\n4 9\\n\",\n    \"2\\n18 27\\n\",\n    \"2\\n13 26\\n\",\n    \"4\\n6 6 6 15\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"38\\n\",\n    \"48\\n\",\n    \"19\\n\",\n    \"20\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"15\\n\",\n    \"22\\n\",\n    \"27\\n\",\n    \"21\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"10\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"4\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}