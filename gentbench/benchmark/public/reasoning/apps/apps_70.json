{
    "problem": "You are an expert Python programmer, and here is your task: An integer sequence is called beautiful if the difference between any two consecutive numbers is equal to $1$. More formally, a sequence $s_1, s_2, \\ldots, s_{n}$ is beautiful if $|s_i - s_{i+1}| = 1$ for all $1 \\leq i \\leq n - 1$.\n\nTrans has $a$ numbers $0$, $b$ numbers $1$, $c$ numbers $2$ and $d$ numbers $3$. He wants to construct a beautiful sequence using all of these $a + b + c + d$ numbers.\n\nHowever, it turns out to be a non-trivial task, and Trans was not able to do it. Could you please help Trans?\n\n\n-----Input-----\n\nThe only input line contains four non-negative integers $a$, $b$, $c$ and $d$ ($0 < a+b+c+d \\leq 10^5$).\n\n\n-----Output-----\n\nIf it is impossible to construct a beautiful sequence satisfying the above constraints, print \"NO\" (without quotes) in one line.\n\nOtherwise, print \"YES\" (without quotes) in the first line. Then in the second line print $a + b + c + d$ integers, separated by spaces\u00a0\u2014 a beautiful sequence. There should be $a$ numbers equal to $0$, $b$ numbers equal to $1$, $c$ numbers equal to $2$ and $d$ numbers equal to $3$.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n2 2 2 1\n\nOutput\nYES\n0 1 0 1 2 3 2\n\nInput\n1 2 3 4\n\nOutput\nNO\n\nInput\n2 2 2 3\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first test, it is easy to see, that the sequence is beautiful because the difference between any two consecutive numbers is equal to $1$. Also, there are exactly two numbers, equal to $0$, $1$, $2$ and exactly one number, equal to $3$.\n\nIt can be proved, that it is impossible to construct beautiful sequences in the second and third tests.",
    "solution": "[\"def solve(a, e):\\n\\tif not a[e]:\\n\\t\\treturn False, []\\n\\ta = list(a[::])\\n\\tans = [e]\\n\\ta[e] -= 1\\n\\tfor i in range(sum(a)):\\n\\t\\tif ans[-1] - 1 >= 0 and a[ans[-1] - 1] > 0:\\n\\t\\t\\tv = ans[-1] - 1\\n\\t\\t\\tans.append(v)\\n\\t\\t\\ta[v] -= 1\\n\\t\\telif ans[-1] + 1 <= 3 and a[ans[-1] + 1] > 0:\\n\\t\\t\\tv = ans[-1] + 1\\n\\t\\t\\tans.append(v)\\n\\t\\t\\ta[v] -= 1\\n\\t\\telse:\\n\\t\\t\\treturn False, []\\n\\treturn True, ans\\n\\ndef main():\\n\\ta = list(map(int, input().split()))\\n\\tfor i in range(4):\\n\\t\\tr, b = solve(a, i)\\n\\t\\tif r:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\tprint(*b)\\n\\t\\t\\treturn\\n\\tprint('NO')\\n\\nmain()\\n\", \"a, b, c, d = list(map(int, input().split()))\\ntry:\\n    assert abs(a - b + c - d) < 2\\n    ans = []\\n    if not d:\\n        ans = [1, 0] * a + [1, 2] * c\\n        if a + c < b:\\n            ans.append(1)\\n        if a + c > b:\\n            ans.pop(0)\\n    elif not a:\\n        ans = [2, 3] * d + [2, 1] * b\\n        if d + b < c:\\n            ans.append(2)\\n        if d + b > c:\\n            ans.pop(0)\\n    elif a + c > b + d:\\n        while a:\\n            ans.append(0)\\n            ans.append(1)\\n            a -= 1\\n            b -= 1\\n        assert b >= 0\\n        while b:\\n            ans.append(2)\\n            ans.append(1)\\n            b -= 1\\n            c -= 1\\n        assert c >= 0\\n        while c:\\n            ans.append(2)\\n            ans.append(3)\\n            c -= 1\\n            d -= 1\\n        ans.pop()\\n    else:\\n        while d:\\n            ans.append(3)\\n            ans.append(2)\\n            c -= 1\\n            d -= 1\\n        assert c >= 0\\n        while c:\\n            ans.append(1)\\n            ans.append(2)\\n            b -= 1\\n            c -= 1\\n        assert b >= 0\\n        while b:\\n            ans.append(1)\\n            ans.append(0)\\n            a -= 1\\n            b -= 1\\n        if a:\\n            ans.pop()\\n    print(\\\"YES\\\")\\n    print(*ans)\\nexcept AssertionError:\\n    print(\\\"NO\\\")\\n\", \"3\\n\\nimport os\\nimport sys\\n\\n\\ndef main():\\n    A, B, C, D = read_ints()\\n    ans = solve(A, B, C, D)\\n    if ans:\\n        print('YES')\\n        print(*ans)\\n    else:\\n        print('NO')\\n\\n\\ndef solve(A, B, C, D):\\n    S = A + B + C + D\\n    for l in range(4):\\n        for r in range(4):\\n            ans = build([A, B, C, D], S, l, r)\\n            if ans:\\n                return ans\\n\\n    return None\\n\\n\\ndef build(A, S, l, r):\\n    #dprint('l', l, 'r', r)\\n    if A[l] == 0:\\n        return None\\n    ans = [l]\\n    A[l] -= 1\\n    i = l\\n    S -= 1\\n    while S > 0:\\n        #dprint(ans)\\n        if i == 0:\\n            j = 1\\n        elif i == 1:\\n            if A[0] == 0:\\n                j = 2\\n            elif A[2] == 0:\\n                j = 0\\n            elif r <= 1:\\n                j = 2\\n            else:\\n                j = 0\\n        elif i == 2:\\n            if A[3] == 0:\\n                j = 1\\n            elif A[1] == 0:\\n                j = 3\\n            elif r >= 2:\\n                j = 1\\n            else:\\n                j = 3\\n        else:\\n            j = 2\\n\\n        A[j] -= 1\\n        S -= 1\\n        ans.append(j)\\n        if A[j] < 0:\\n            return None\\n        i = j\\n\\n    return ans\\n\\n\\n###############################################################################\\n\\nDEBUG = 'DEBUG' in os.environ\\n\\n\\ndef inp():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef read_int():\\n    return int(inp())\\n\\n\\ndef read_ints():\\n    return [int(e) for e in inp().split()]\\n\\n\\ndef dprint(*value, sep=' ', end='\\\\n'):\\n    if DEBUG:\\n        print(*value, sep=sep, end=end)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\ninput = sys.stdin.readline\\n\\na,b,c,d=list(map(int,input().split()))\\n\\nfor start in range(4):\\n    ANS=[]\\n    now=start\\n    A=[a,b,c,d]\\n\\n    if A[now]==0:\\n        continue\\n\\n    while True:\\n        A[now]-=1\\n        ANS.append(now)\\n\\n        if now==0:\\n            if A[1]!=0:\\n                now=1\\n            else:\\n                break\\n\\n        elif now==1:\\n            if A[0]!=0:\\n                now=0\\n            elif A[2]!=0:\\n                now=2\\n            else:\\n                break\\n\\n        elif now==2:\\n            if A[3]!=0:\\n                now=3\\n            elif A[1]!=0:\\n                now=1\\n            else:\\n                break\\n        else:\\n            if A[2]!=0:\\n                now=2\\n            else:\\n                break\\n\\n    if max(A)==0:\\n        print(\\\"YES\\\")\\n        print(*ANS)\\n        return\\nprint(\\\"NO\\\")\\n        \\n\", \"a = list(map(int, input().split()))\\ns = a[0] + a[1] + a[2] + a[3]\\nout = []\\nif s == 1:\\n    for i in range(4):\\n        if a[i] > 0:\\n            print('YES')\\n            print(i)\\n            return\\n\\nfor i in range(3):\\n    fst, snd = i, i+1\\n    if a[fst] == a[snd]:\\n        check = True\\n        for j in range(4):\\n            if j != fst and j != snd:\\n                if a[j] != 0:\\n                    check = False\\n        if check:\\n            out = [i, i+1] * a[fst]\\n            print('YES')\\n            print(' '.join(list(map(str, out))))\\n            return\\n    if a[fst] == a[snd] + 1:\\n        check = True\\n        for j in range(4):\\n            if j != fst and j != snd:\\n                if a[j] != 0:\\n                    check = False\\n        if check:\\n            out = [i, i+1] * a[snd] + [i]\\n            print('YES')\\n            print(' '.join(list(map(str, out))))\\n            return\\n    if a[fst] + 1 == a[snd]:\\n        check = True\\n        for j in range(4):\\n            if j != fst and j != snd:\\n                if a[j] != 0:\\n                    check = False\\n        if check:\\n            out = [i+1] + [i, i+1] * a[fst]\\n            print('YES')\\n            print(' '.join(list(map(str, out))))\\n            return\\nif a[1] < a[0]:\\n    print('NO')\\n    return\\nif a[2] < a[3]:\\n    print('NO')\\n    return\\n\\nleft = [0,1] * a[0]\\nright = [2,3] * a[3]\\n\\na[1] -= a[0]\\na[2] -= a[3]\\n\\nif a[1] == a[2] + 1:\\n    out = [1] + left + [2,1] * a[2] + right\\n    print('YES')\\n    print(' '.join(list(map(str, out))))\\n    return\\nif a[1] == a[2]:\\n    out = left + [2,1] * a[1] + right\\n    print('YES')\\n    print(' '.join(list(map(str, out))))\\n    return\\nif a[1] + 1 == a[2]:\\n    out = left + [2,1] * a[1] + right + [2]\\n    print('YES')\\n    print(' '.join(list(map(str, out))))\\n    return\\nprint('NO')\\nreturn\\n\", \"import sys\\nreadline = sys.stdin.readline\\n \\ndef check(A, B, C, D):\\n    N = A+B+C+D\\n    if not (A+C == N//2 or A+C == -(-N//2)):\\n        return False\\n    even = [2]*C + [0]*A\\n    odd = [3]*D + [1]*B\\n    ans = [None]*N\\n    flag = (B+D == -(-N//2))\\n    for i in range(N):\\n        if (i%2 == 0) == flag:\\n            ans[i] = odd[i//2]\\n        else:\\n            ans[i] = even[i//2]\\n    if all(abs(a2-a1) == 1 for a1, a2 in zip(ans, ans[1:])):\\n        return ans\\n    return False\\n    \\nA, B, C, D = map(int, readline().split())\\nans = check(A, B, C, D)\\nif ans == False:\\n    print('NO')\\nelse:\\n    print('YES')\\n    print(*ans) \"]",
    "test": "{\"inputs\": [\"2 2 2 1\\n\", \"1 2 3 4\\n\", \"2 2 2 3\\n\", \"3436 3436 46563 46564\\n\", \"15039 15038 34961 34961\\n\", \"26 25 24 26\\n\", \"67 66 33 34\\n\", \"145 145 105 107\\n\", \"211 209 91 91\\n\", \"119 146 31 2\\n\", \"197 280 249 164\\n\", \"1 0 0 1\\n\", \"0 0 1 2\\n\", \"1 0 0 0\\n\", \"104 182 94 18\\n\", \"119 333 231 19\\n\", \"0 1 1 1\\n\", \"1 1 0 0\\n\", \"0 1 1 0\\n\", \"0 0 1 1\\n\", \"1 1 1 0\\n\", \"1 0 1 1\\n\", \"1 1 0 1\\n\", \"1 1 1 1\\n\", \"2 0 0 0\\n\", \"0 1 0 0\\n\", \"0 2 0 0\\n\", \"0 0 1 0\\n\", \"0 0 2 0\\n\", \"0 0 0 1\\n\", \"0 0 0 2\\n\", \"100000 0 0 0\\n\", \"0 100000 0 0\\n\", \"0 0 100000 0\\n\", \"0 0 0 100000\\n\", \"0 1 0 1\\n\", \"0 2 0 1\\n\", \"1 0 1 0\\n\", \"2 0 1 0\\n\", \"20000 39998 20000 0\\n\", \"20000 40002 20000 0\\n\", \"0 20000 39998 20000\\n\", \"0 20000 40002 20000\\n\", \"50 55 5 1\\n\", \"1 72 110 39\\n\", \"1032 1032 1968 1969\\n\", \"1789 1788 1712 1712\\n\", \"18317 8251 31682 41748\\n\", \"8116 8114 41884 41885\\n\", \"35775 35774 14224 14225\\n\", \"44884 44883 5115 5115\\n\", \"21548 21547 28451 28452\\n\", \"29058 27056 20941 22944\\n\", \"44884 46652 5115 3345\\n\", \"26539 36816 23458 13183\\n\", \"35775 35775 14224 14226\\n\", \"40470 40468 9531 9531\\n\", \"21548 40483 28451 9518\\n\", \"20199 23486 29802 26513\\n\", \"2 1 0 0\\n\", \"0 1 2 0\\n\", \"0 2 1 0\\n\", \"1 2 0 0\\n\", \"0 0 2 1\\n\", \"1 2 1 0\\n\", \"0 1 2 1\\n\", \"40000 40002 0 0\\n\", \"0 40000 40002 0\\n\", \"0 0 40000 40002\\n\", \"0 2 2 0\\n\", \"1 1 1 3\\n\", \"1 3 1 0\\n\", \"0 0 2 1\\n\"], \"outputs\": [\"YES\\n0 1 0 1 2 3 2\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n3 2 3\\n\", \"YES\\n0\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n1 2 3\\n\", \"YES\\n0 1\\n\", \"YES\\n1 2\\n\", \"YES\\n2 3\\n\", \"YES\\n0 1 2\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n0 1 2 3\\n\", \"NO\\n\", \"YES\\n1\\n\", \"NO\\n\", \"YES\\n2\\n\", \"NO\\n\", \"YES\\n3\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 2 1 2 1 2 1 2 1 2 3\\n\", \"YES\\n0 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n0 1 0\\n\", \"YES\\n2 1 2\\n\", \"YES\\n1 2 1\\n\", \"YES\\n1 0 1\\n\", \"YES\\n2 3 2\\n\", \"YES\\n0 1 2 1\\n\", \"YES\\n1 2 3 2\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n1 2 1 2\\n\", \"NO\\n\", \"YES\\n1 0 1 2 1\\n\", \"YES\\n2 3 2\\n\"]}",
    "tags": [
        "reasoning/coding"
    ]
}