{
    "problem": "You are an expert Python programmer, and here is your task: In the evening Polycarp decided to analyze his today's travel expenses on public transport.\n\nThe bus system in the capital of Berland is arranged in such a way that each bus runs along the route between two stops. Each bus has no intermediate stops. So each of the buses continuously runs along the route from one stop to the other and back. There is at most one bus running between a pair of stops.\n\nPolycarp made n trips on buses. About each trip the stop where he started the trip and the the stop where he finished are known. The trips follow in the chronological order in Polycarp's notes.\n\nIt is known that one trip on any bus costs a burles. In case when passenger makes a transshipment the cost of trip decreases to b burles (b < a). A passenger makes a transshipment if the stop on which he boards the bus coincides with the stop where he left the previous bus. Obviously, the first trip can not be made with transshipment.\n\nFor example, if Polycarp made three consecutive trips: \"BerBank\" $\\rightarrow$ \"University\", \"University\" $\\rightarrow$ \"BerMall\", \"University\" $\\rightarrow$ \"BerBank\", then he payed a + b + a = 2a + b burles. From the BerBank he arrived to the University, where he made transshipment to the other bus and departed to the BerMall. Then he walked to the University and returned to the BerBank by bus.\n\nAlso Polycarp can buy no more than k travel cards. Each travel card costs f burles. The travel card for a single bus route makes free of charge any trip by this route (in both directions). Once purchased, a travel card can be used any number of times in any direction.\n\nWhat is the smallest amount of money Polycarp could have spent today if he can buy no more than k travel cards?\n\n\n-----Input-----\n\nThe first line contains five integers n, a, b, k, f (1 \u2264 n \u2264 300, 1 \u2264 b < a \u2264 100, 0 \u2264 k \u2264 300, 1 \u2264 f \u2264 1000) where:  n \u2014 the number of Polycarp trips,  a \u2014 the cost of a regualar single trip,  b \u2014 the cost of a trip after a transshipment,  k \u2014 the maximum number of travel cards Polycarp can buy,  f \u2014 the cost of a single travel card. \n\nThe following n lines describe the trips in the chronological order. Each line contains exactly two different words separated by a single space \u2014 the name of the start stop and the name of the finish stop of the trip. All names consist of uppercase and lowercase English letters and have lengths between 1 to 20 letters inclusive. Uppercase and lowercase letters should be considered different.\n\n\n-----Output-----\n\nPrint the smallest amount of money Polycarp could have spent today, if he can purchase no more than k travel cards.\n\n\n-----Examples-----\nInput\n3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n\nOutput\n11\n\nInput\n4 2 1 300 1000\na A\nA aa\naa AA\nAA a\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first example Polycarp can buy travel card for the route \"BerBank $\\leftrightarrow$ University\" and spend 8 burles. Note that his second trip \"University\" $\\rightarrow$ \"BerMall\" was made after transshipment, so for this trip Polycarp payed 3 burles. So the minimum total sum equals to 8 + 3 = 11 burles.\n\nIn the second example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.",
    "solution": "[\"def main():\\n  trips, reg, cheap, cards, card_cost = list(map(int, input().split()))\\n\\n  costs = []\\n  indexes = {}\\n  total = 0\\n  last = \\\"\\\"\\n\\n  for i in range(trips):\\n    a, b = input().split()\\n    pair = (min(a, b), max(a, b))\\n\\n    if pair in indexes:\\n      index = indexes[pair]\\n    else:\\n      costs.append(0)\\n      indexes[pair] = len(costs) - 1\\n      index = len(costs) - 1\\n\\n    total += (cheap if a == last else reg)\\n    costs[index] += (cheap if a == last else reg)\\n    last = b\\n\\n  costs = sorted(costs, reverse = True)\\n\\n  for c in costs:\\n    if c < card_cost or cards <= 0:\\n      break\\n    total -= c\\n    total += card_cost\\n    cards -= 1\\n\\n  print(total)\\n\\nmain()\\n\", \"n,a,b,k,f = [int(i) for i in input().split()]\\npred = \\\"_\\\"\\nd = dict()\\nfor i in range(n):\\n    s1, s2 = [i for i in input().split()]\\n    pr = a\\n    if s1 == pred:\\n        pr = b\\n\\n    if (s1, s2) in list(d.keys()):\\n        d[(s1, s2)] += pr\\n    elif (s2, s1) in list(d.keys()):\\n        d[(s2, s1)] += pr\\n    else:\\n        d[(s1, s2)] = pr\\n\\n    pred = s2\\n    \\ncn = k\\nans = sum(d.values())\\nfor i in sorted(list(d.values()), reverse = True):\\n    if cn == 0 or i <= f:\\n        break\\n    ans = ans - i + f\\n    cn -= 1\\n\\nprint(ans)\\n    \\n\", \"n, a, b, k, f = map(int, input().split())\\n\\nslov = dict()\\ntemp = input().split()\\nslov[frozenset(temp)] = a\\n\\nfor i in range(1, n):\\n    temp2 = input().split()\\n    try:\\n        if temp2[0] == temp[1]:\\n            slov[frozenset(temp2)] += b\\n        else:\\n            slov[frozenset(temp2)] += a\\n    except KeyError:\\n        if temp2[0] == temp[1]:\\n            slov[frozenset(temp2)] = b\\n        else:\\n            slov[frozenset(temp2)] = a\\n    temp = temp2\\n\\ncosts = sorted(list(slov.values()), reverse=True)\\n\\nfor i in range(min(k, len(costs))):\\n    if costs[i] > f:\\n        costs[i] = f\\n    else:\\n        break\\n\\nprint(sum(costs))\", \"n, a, b, k, f = [int(i) for i in input().split()]\\nstops = dict()\\nprev = \\\"\\\"\\nans = 0\\nfor i in range(n):\\n    x, y = [i for i in input().split()]\\n    price = a\\n    if x == prev:\\n        price = b\\n    prev = y\\n    p, q = (min(x,y), max(x,y))\\n    if (p, q) in stops:\\n        stops[(p,q)] += price\\n    else:\\n        stops[(p,q)] = price\\n    ans += price\\nedge_cost = sorted([stops[key] for key in stops], reverse = True)\\nfor i in edge_cost:\\n    if k > 0 and f < i:\\n        ans  = ans - i + f\\n    else:\\n        break\\n    k -= 1\\nprint(ans)\\n\", \"import heapq\\nimport sys\\n\\nnum_trips, a, b, k, f = sys.stdin.readline().strip().split(\\\" \\\")\\na, b, k, f = int(a), int(b), int(k), int(f)\\n#print(a, b, k, f)\\ntrips = []\\nfor line in sys.stdin:\\n  trips.append(line.strip().split(\\\" \\\"))\\n  \\n\\\"\\\"\\\"\\na = 5\\nb = 3\\nk = 1\\nf = 8\\n\\ntrips = [[\\\"BerBank\\\", \\\"University\\\"],\\n[\\\"University\\\", \\\"BerMall\\\"],\\n[\\\"University\\\", \\\"BerBank\\\"],\\n[\\\"University\\\", \\\"BerBank\\\"]]\\n\\n\\\"\\\"\\\"\\n\\nmy_dict = dict()\\nfor i in range(0, len(trips)):\\n  trip = trips[i]\\n  cost = 0\\n  if(i - 1 >= 0 and trips[i - 1][1] == trip[0]):\\n    cost = b;\\n  else:\\n    cost = a\\n  if (str(sorted(trip)) in my_dict):\\n    my_dict[str(sorted(trip))] += cost\\n  else:\\n    my_dict[str(sorted(trip))] = cost\\n    \\nheap = [(-1 * my_dict[x], x) for x in my_dict]\\nheapq.heapify(heap)\\n\\n#print(heap)\\ntotal = sum(int(my_dict[x]) for x in my_dict)\\nfor i in range(0, k):\\n  if(len(heap) > 0):\\n    cur_max = int(heapq.heappop(heap)[0]) * -1\\n    if (cur_max > f):\\n      total = total - (cur_max - f)\\n\\nprint(total)\\n\", \"n, a, b, k, f = list(map(int, input().split()))\\ntotalCost = {}\\nlastStop = ''\\ntotal = 0\\nfor i in range(n):\\n    s1, s2 = input().split()\\n    cost = a if lastStop != s1 else b\\n    key = (min(s1, s2), max(s1, s2))\\n    if key not in totalCost:\\n        totalCost[key] = cost\\n    else:\\n        totalCost[key] += cost\\n    total += cost\\n    lastStop = s2\\n\\nsortedTotalCost = [(totalCost[key], key[0], key[1]) for key in totalCost]\\nsortedTotalCost.sort(reverse=True)\\n\\ni = 0\\nwhile i < len(sortedTotalCost) and k > 0 and sortedTotalCost[i][0] > f:\\n    total -= sortedTotalCost[i][0]\\n    total += f\\n    k -= 1\\n    i += 1\\nprint(total)\\n\"]",
    "test": "{\n  \"inputs\": [\n    \"3 5 3 1 8\\nBerBank University\\nUniversity BerMall\\nUniversity BerBank\\n\",\n    \"4 2 1 300 1000\\na A\\nA aa\\naa AA\\nAA a\\n\",\n    \"2 2 1 0 1\\naca BCBA\\nBCBA aca\\n\",\n    \"2 2 1 2 1\\nBDDB C\\nC BDDB\\n\",\n    \"2 3 1 1 9\\nbacAB aAdb\\nbacAB aAdb\\n\",\n    \"2 3 1 4 6\\nAaCdC CdD\\naBACc CdD\\n\",\n    \"1 2 1 2 1\\nC BA\\n\",\n    \"1 3 1 1 4\\nbCCCC BC\\n\",\n    \"1 4 3 1 1\\nC bC\\n\",\n    \"1 3 2 1 1\\nBBC B\\n\",\n    \"3 2 1 5 1\\nBCA cBBBd\\ncBBBd CdC\\nCdC bbdAb\\n\",\n    \"5 3 2 1 1\\nC CB\\nCB C\\nC d\\nCB d\\nCB C\\n\",\n    \"3 3 1 0 1\\ncbcC A\\nA aA\\nA cbcC\\n\",\n    \"3 3 1 4 3\\nc CADC\\nCADC ABaD\\nABaD c\\n\",\n    \"8 2 1 11 1\\ndacdD cdDAA\\ncdDAA dacdD\\ndacdD bcCA\\nbcCA B\\nDDAA B\\nDDAA daC\\nAbCAc B\\ndacdD daC\\n\",\n    \"12 4 1 2 8\\nDA b\\nDA dC\\ndC b\\nb DA\\nb dC\\nDA b\\ndC b\\nb dC\\ndC DA\\nDA dC\\nDA b\\nb dC\\n\",\n    \"27 8 1 0 1\\nBcd A\\nA b\\nb BcDc\\ndc dbaC\\ndbaC dcCB\\nB d\\nd BbAc\\nCBC b\\nDBDca d\\ncAbb AA\\nAA Ba\\ncAccb DBDca\\ncb DdaB\\nAAcBc Ba\\nBa dc\\ndc DDCd\\nbcBDA da\\nbDD ADD\\nAA b\\nb cb\\ncb CCBbd\\nCCBbd bcDdb\\nbcDdb ddc\\nddc C\\nC Adc\\nAdc BbAc\\nBbAc DD\\n\",\n    \"22 85 1 36 1\\ncdAd cBbCa\\ncBbCa abBBc\\nabBBc dddb\\ndddb BBDA\\nBBDA abBBc\\nabBBc ADCad\\naDaC cdAd\\ncdAd D\\nD acCbD\\nAd DB\\nDB C\\nACb ca\\nca ACb\\nACb D\\nD BBDA\\nBBDA d\\nd C\\nC A\\nA B\\nB Ad\\nAd cDD\\ncDD ACb\\n\",\n    \"8 8 2 4 5\\naBBba C\\nCc CcBd\\nd C\\ndD dDba\\ndDba c\\nCc d\\nd dD\\ndD dDba\\n\",\n    \"4 10 6 2 7\\nbbCc c\\nd Bdccd\\nBdccd c\\nc Bdccd\\n\",\n    \"10 3 2 6 2\\nbCbA a\\naDA Bba\\nbCbA aDA\\nBba caa\\nbCbA Bba\\ncaa aDA\\naDA bCbA\\nbCbA dBba\\ndBba bCbA\\ndBba a\\n\",\n    \"7 5 4 3 2\\nDBBCa BdC\\nCDBcb BdC\\ncA BdC\\nBD CDBcb\\nBD BdC\\nDDd cacD\\nBdC cA\\n\",\n    \"9 10 5 4 3\\nDcAaa caCBc\\ncaCBc B\\nB b\\nb cdddb\\ncdddb aDBAb\\naDBAb B\\nB aDBAb\\naDBAb cdddb\\ncdddb aDCda\\n\",\n    \"10 20 10 0 11\\nudgbkX Xe\\nXe udgbkX\\nudgbkX Xe\\nXe udgbkX\\nudgbkX Xe\\nXe udgbkX\\nudgbkX Xe\\nXe udgbkX\\nudgbkX Xe\\nXe udgbkX\\n\",\n    \"10 20 10 1 11\\nkeJKdQ HS\\nHS keJKdQ\\nkeJKdQ HS\\nHS keJKdQ\\nkeJKdQ HS\\nHS keJKdQ\\nkeJKdQ HS\\nHS keJKdQ\\nkeJKdQ HS\\nHS keJKdQ\\n\"\n  ],\n  \"outputs\": [\n    \"11\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"22\\n\",\n    \"111\\n\",\n    \"21\\n\",\n    \"32\\n\",\n    \"24\\n\",\n    \"18\\n\",\n    \"21\\n\",\n    \"27\\n\",\n    \"110\\n\",\n    \"11\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}