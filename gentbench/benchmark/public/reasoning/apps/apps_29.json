{
    "problem": "You are an expert Python programmer, and here is your task: What are you doing at the end of the world? Are you busy? Will you save us?\n\n\n\n[Image]\n\nNephren is playing a game with little leprechauns.\n\nShe gives them an infinite array of strings, f_{0... \u221e}.\n\nf_0 is \"What are you doing at the end of the world? Are you busy? Will you save us?\".\n\nShe wants to let more people know about it, so she defines f_{i} =  \"What are you doing while sending \"f_{i} - 1\"? Are you busy? Will you send \"f_{i} - 1\"?\" for all i \u2265 1.\n\nFor example, f_1 is\n\n\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"?\". Note that the quotes in the very beginning and in the very end are for clarity and are not a part of f_1.\n\nIt can be seen that the characters in f_{i} are letters, question marks, (possibly) quotation marks and spaces.\n\nNephren will ask the little leprechauns q times. Each time she will let them find the k-th character of f_{n}. The characters are indexed starting from 1. If f_{n} consists of less than k characters, output '.' (without quotes).\n\nCan you answer her queries?\n\n\n-----Input-----\n\nThe first line contains one integer q (1 \u2264 q \u2264 10)\u00a0\u2014 the number of Nephren's questions.\n\nEach of the next q lines describes Nephren's question and contains two integers n and k (0 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^18).\n\n\n-----Output-----\n\nOne line containing q characters. The i-th character in it should be the answer for the i-th query.\n\n\n-----Examples-----\nInput\n3\n1 1\n1 2\n1 111111111111\n\nOutput\nWh.\nInput\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n\nOutput\nabdef\nInput\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\nOutput\nAreyoubusy\n\n\n-----Note-----\n\nFor the first two examples, refer to f_0 and f_1 given in the legend.",
    "solution": "[\"f0 = 'What are you doing at the end of the world? Are you busy? Will you save us?'\\nft1, ft2, ft3 = 'What are you doing while sending \\\"', '\\\"? Are you busy? Will you send \\\"', '\\\"?'\\n\\nflen = [2 * 10 ** 18] * (10 ** 5 + 1)\\nflen[0] = len(f0)\\nfor i in range(1, 56):\\n    flen[i] = len(ft1) + len(ft2) + len(ft3) + 2 * flen[i-1]\\n\\ndef ans(n, k):\\n    while True:\\n        if n == 0:\\n            return f0[k]\\n        if k < len(ft1):\\n            return ft1[k]\\n        k -= len(ft1)\\n        if k < flen[n-1]:\\n            n -= 1\\n            continue\\n        k -= flen[n-1]\\n        if k < len(ft2):\\n            return ft2[k]\\n        k -= len(ft2)\\n        if k < flen[n-1]:\\n            n -= 1\\n            continue\\n        k -= flen[n-1]\\n        return ft3[k]\\n\\nq = int(input())\\na = ''\\nfor _ in range(q):\\n    n, k = list(map(int, input().split()))\\n    k -= 1\\n    if k >= flen[n]:\\n        a += '.'\\n        continue\\n    a += ans(n, k)\\nprint(a)\\n\", \"#!/usr/bin/env python3\\nf0 = \\\"What are you doing at the end of the world? Are you busy? Will you save us?\\\"\\ns0 = len(f0)\\nf10 = \\\"What are you doing while sending \\\\\\\"\\\";\\ns10 = len(f10)\\nf11 = \\\"\\\\\\\"? Are you busy? Will you send \\\\\\\"\\\";\\ns11 = len(f11)\\nf12 = \\\"\\\\\\\"?\\\";\\ns12 = len(f12)\\nmaxn = 100005\\nsz = [0] * maxn\\nsz[0] = s0\\nfor i in range(1, maxn):\\n    if i < 500: sz[i] = (s10 + s11 + s12 + 2 * sz[i-1])\\n    else: sz[i] = 1e100\\ndef solve(n, k):\\n    while True:\\n        if k >= sz[n]: return '.'\\n        if n == 0:\\n            return f0[k]\\n        if k < s10:\\n            return f10[k]\\n        k -= s10\\n        if k < sz[n - 1]:\\n            n = n - 1\\n            continue\\n        k -= sz[n - 1]\\n        if k < s11:\\n            return f11[k]\\n        k -= s11\\n        if k < sz[n - 1]:\\n            n = n - 1\\n            continue\\n        k -= sz[n - 1]\\n        if k < s12:\\n            return f12[k]\\n        assert(False)\\nq = int(input())\\nans = \\\"\\\"\\nfor qid in range(q):\\n    n, k = list(map(int, input().split()))\\n    k -= 1\\n    ans += solve(n, k)\\nprint(ans)\\n\", \"s = \\\"What are you doing at the end of the world? Are you busy? Will you save us?\\\"\\n\\n#fmt = 'What are you doing while sending \\\"{}\\\"? Are you busy? Will you send \\\"{}\\\"?'\\n\\n\\ndef L(n):\\n    return 143*2**n-68 if n < 55 else 10**18\\n\\nbeg = 'What are you doing while sending \\\"'\\nmid = '\\\"? Are you busy? Will you send \\\"'\\nend = '\\\"?'\\nbeglen = len(beg)\\nmidlen = len(mid)\\nendlen = len(end)\\n\\ndef f(n,k):\\n    while True:\\n        if n == 0:\\n            if k < len(s):\\n                return s[k]\\n            return '.'\\n        n -= 1\\n\\n        if k < beglen:\\n            return beg[k]\\n        k -= beglen\\n        if k < L(n):\\n            continue\\n        k -= L(n)\\n        if k < midlen:\\n            return mid[k]\\n        k -= midlen\\n        if k < L(n):\\n            continue\\n        k -= L(n)\\n        if k < endlen:\\n            return end[k]\\n        return '.'\\n\\n\\n\\nq = int(input())\\n\\nans = []\\nfor _ in range(q):\\n    n,k = list(map(int,input().split()))\\n    k -= 1\\n    ans.append(f(n,k))\\nprint(''.join(ans))\\n\\n\\n\", \"s = \\\"What are you doing at the end of the world? Are you busy? Will you save us?\\\"\\ns1 = 'What are you doing while sending \\\"'\\ns2 = '\\\"? Are you busy? Will you send \\\"'\\ns3 = '\\\"?'\\nl1,l2,l3=len(s1),len(s2),len(s3)\\ndef count(n):\\n    if n>=60:return 10**20\\n    return (1<<n)*75+((1<<n)-1)*68\\ndef find(n,k):\\n    if count(n)<k:return '.'\\n    if n==0:return s[k-1]\\n    if k<=l1:return s1[k-1]\\n    c=count(n-1)\\n    k-=l1\\n    if k<=c:\\n        return find(n-1,k)\\n    k-=c\\n    if k<=l2:return s2[k-1]\\n    k-=l2\\n    if k<=c:\\n        return find(n-1,k)\\n    k-=c\\n    if k<=l3:return s3[k-1]\\nq=int(input())\\nans=''\\nwhile q:\\n    n,k=map(int,input().split())\\n    while n > 70 and k > 34:\\n        k -= 34\\n        n -= 1\\n    if n > 0 and k <= 34: ans+=s1[k - 1]\\n    else :ans+=find(n,k)\\n    q-=1\\nprint(ans)\", \"str0 = \\\"What are you doing at the end of the world? Are you busy? Will you save us?\\\"\\nstr1 = \\\"What are you doing while sending \\\\\\\"\\\"\\nstr2 = \\\"\\\\\\\"? Are you busy? Will you send \\\\\\\"\\\"\\nstr3 = \\\"\\\\\\\"?\\\"\\nNMAX = 100010\\nLMAX = 1e18 + 69\\n\\ndef solve(n, k):\\n\\twhile(n > 0):\\n\\t\\tif(k > lg[n]):\\n\\t\\t\\treturn '.'\\n\\t\\t\\n\\t\\tif(k <= len(str1)):\\n\\t\\t\\treturn str1[k - 1]\\n\\t\\telif(k <= len(str1) + lg[n - 1]):\\n\\t\\t\\tk -= len(str1)\\n\\t\\telif(k <= len(str1) + lg[n - 1] + len(str2)):\\n\\t\\t\\treturn str2[k - len(str1) - lg[n - 1] - 1]\\n\\t\\telif(k <= len(str1) + lg[n - 1] + len(str2) + lg[n - 1]):\\n\\t\\t\\tk -= len(str1) + lg[n - 1] + len(str2)\\n\\t\\telse:\\n\\t\\t\\treturn str3[k - len(str1) - lg[n - 1] - len(str2) - lg[n - 1] - 1]\\n\\t\\tn -= 1\\n\\t\\n\\tif(k <= len(str0)):\\n\\t\\treturn str0[k - 1]\\n\\t\\n\\treturn '.'\\n\\nlg = [0] * NMAX\\n\\nlg[0] = len(str0)\\nfor i in range(1, NMAX):\\n\\tlg[i] = 2 * lg[i - 1] + len(str1) + len(str2) + len(str3)\\n\\tif(lg[i] > LMAX):\\n\\t\\tlg[i] = LMAX\\n\\nq = int(input())\\n\\nwhile(q > 0):\\n\\tn, k = map(int, input().split())\\n\\t\\n\\tprint(solve(n, k), end='')\\n\\t\\n\\tq -= 1\", \"f0 = \\\"What are you doing at the end of the world? Are you busy? Will you save us?\\\"\\nf1 = \\\"What are you doing while sending \\\\\\\"{0}\\\\\\\"? Are you busy? Will you send \\\\\\\"{0}\\\\\\\"?\\\"\\na = list(f1.split(\\\"{0}\\\"))\\nb = list(map(len, a))\\nq = int(input())\\nf = lambda n: 143 * 2**min(n, 54) - 68\\n\\t\\nfor _ in range(q):\\n\\tn, k = map(int, input().split())\\n\\tans = \\\"\\\"\\n\\twhile n > 0 and b[0] < k < b[0] + f(n-1):\\n\\t\\tk -= b[0]\\n\\t\\tn -= 1\\n\\twhile not ans:\\n\\t\\tw = f(n-1)\\n\\t\\tif k > f(n):\\n\\t\\t\\tans = \\\".\\\"\\n\\t\\telif n == 0:\\n\\t\\t\\tans = f0[k-1]\\n\\t\\telif k <= b[0]:\\n\\t\\t\\tans = a[0][k-1]\\n\\t\\telif k <= b[0] + w:\\n\\t\\t\\tk -= b[0]\\n\\t\\t\\tn -= 1\\n\\t\\telif k <= b[0] + w + b[1]:\\n\\t\\t\\tk -= b[0] + w\\n\\t\\t\\tans = a[1][k-1]\\n\\t\\telif k <= b[0] + w + b[1] + w:\\n\\t\\t\\tk -= b[0] + w + b[1]\\n\\t\\t\\tn -= 1\\n\\t\\telse:\\n\\t\\t\\tk -= b[0] + w + b[1] + w\\n\\t\\t\\tans = a[2][k-1]\\n\\tprint(ans, end=\\\"\\\")\", \"from sys import setrecursionlimit\\nsetrecursionlimit(100000000)\\n\\ndef get_int(string, n):\\n\\ti = j = k = 0\\n\\tfor s in string:\\n\\t\\tk += 1\\n\\tfor s in string:\\n\\t\\tif i == n - 1:\\n\\t\\t\\tbreak\\n\\t\\tif s == ' ':\\n\\t\\t\\ti += 1\\n\\t\\tj += 1\\n\\ti = 0\\n\\twhile j < k:\\n\\t\\tif string[j] == ' ':\\n\\t\\t\\tbreak\\n\\t\\ti = 10 * i + int(string[j])\\n\\t\\tj += 1\\n\\treturn i\\n\\nd = 'What are you doing at the end of the world? Are you busy? Will you save us?'\\na = 'What are you doing while sending \\\"'\\nb = '\\\"? Are you busy? Will you send \\\"'\\nc = '\\\"?'\\n\\nlen_a = len(a)\\nlen_b = len(b)\\nlen_c = len(c)\\nlen_d = len(d)\\nln = len_a + len_b + len_c\\n\\nq = int(input())\\nls = [len_d]\\nans = ''\\n\\nfor i in range(1, 60):\\n\\tls += [ls[i - 1] *2 + ln]\\n\\t\\ndef get_ans(n, k):\\n\\tif n == 0:\\n\\t\\tif k > len_d:\\n\\t\\t\\treturn '.'\\n\\t\\treturn d[k - 1]\\n\\telif n > 60:\\n\\t\\tif k > len_a:\\n\\t\\t\\treturn get_ans(n - 1, k - len_a)\\n\\t\\telse:\\n\\t\\t\\treturn a[k - 1]\\n\\telif k > ln + 2 * ls[n - 1]:\\n\\t\\treturn '.'\\n\\telif k > len_a + len_b + 2 * ls[n - 1]:\\n\\t\\treturn c[k - (len_a + len_b + 2 * ls[n - 1]) - 1]\\n\\telif k > len_a + len_b + ls[n - 1]:\\n\\t\\treturn get_ans(n-1, k - len_a - len_b - ls[n - 1])\\n\\telif k > len_a + ls[n-1]:\\n\\t\\treturn b[k - len_a - ls[n-1] - 1]\\n\\telif k > len_a:\\n\\t\\treturn get_ans(n - 1, k - len_a)\\n\\telse:\\n\\t\\treturn a[k - 1]\\n\\nfor i in range(0, q):\\n\\tx = input()\\n\\tn = get_int(x, 1)\\n\\tk = get_int(x, 2)\\n\\tif n > 8698 and k > 295726:\\n\\t\\tk -= (n - 1000) * len_a\\n\\t\\tans += get_ans(1000, k)\\n\\telse:\\n\\t\\tans += get_ans(n, k)\\n\\nprint(ans)\", \"import sys\\n\\nsys.setrecursionlimit(100000)\\n\\nn = int(input())\\n\\ns0 = 'What are you doing at the end of the world? Are you busy? Will you save us?'\\ns1 = 'What are you doing while sending \\\"'\\ns2 = '\\\"? Are you busy? Will you send \\\"'\\ns3 = '\\\"?'\\n\\nl1,l2,l3 = [len(x) for x in [s1,s2,s3]]\\n\\nans = ''\\n\\ndef len_of_string(m):\\n    return (2 ** m) * 143 - 68\\n\\ndef find(i, k):\\n    if i == 0:\\n        if k > len(s0):\\n            return '.'\\n        else:\\n            return s0[k-1]\\n    else:\\n        b = len_of_string(i-1)\\n        if 1 <= k <= l1:\\n            return s1[k-1]\\n        elif l1+1 <= k <= l1+b:\\n            return find(i-1,k-l1)\\n        elif l1+b+1 <= k <= l1+l2+b:\\n            return s2[k-(l1+b)-1]\\n        elif l1+l2+b+1 <= k <= l1+l2+2*b:\\n            return find(i-1,k-(l1+l2+b))\\n        elif l1+l2+2*b+1 <= k <= l1+l2+l3+2*b:\\n            return s3[k-(l1+l2+2*b)-1]\\n        else:\\n            return '.'\\n\\nfor _ in range(n):\\n    n,k = [int(x) for x in input().split()]\\n    if n>8698 and k>295726:\\n        k -= (n-1000) * len(s1)\\n        ans += find(1000,k)\\n    else:\\n        ans += find(n,k)\\n\\nprint(ans)\\n\", \"\\n\\nf0 = \\\"What are you doing at the end of the world? Are you busy? Will you save us?\\\"\\nfirst_part = 'What are you doing while sending \\\"'\\nbetween1 = '\\\"? Are you busy? Will you send \\\"'\\nf_lengths = [0 for i in range(64)]\\nf_lengths[0] = len(f0)\\nfor i in range(1, 64):\\n    f_lengths[i] = 2*f_lengths[i-1] + 68\\n\\n# print(f_lengths)\\n\\ndef determine_n(n, k):\\n    while n > 64 and k >= 34:\\n        k -= 34\\n        n -= 1\\n    return n\\n\\n# k is 0 based here\\ndef index_find(n, k) -> str:\\n    # print(\\\"index_find(n, k): \\\", n , k)\\n    if n == 0:\\n        if k >= len(f0):\\n            return \\\".\\\"\\n        return f0[k]\\n\\n    if k < 34:\\n        return first_part[k]\\n\\n    first_end = 34 + f_lengths[n-1]\\n    if 34 <= k < first_end:\\n        return index_find(n-1, k-34)\\n    if first_end <= k < first_end + 32:\\n        return between1[k-first_end]\\n    second_end = f_lengths[n-1] + first_end + 32\\n    if first_end + 32 <= k < second_end:\\n        return index_find(n-1, k-first_end-32)\\n    else:\\n        if k - second_end > 1:\\n            return '.'\\n        return '\\\"?'[k - second_end]\\n\\nn = int(input())\\nqueries = [list(map(int, input().split())) for i in range(n)]\\nr = []\\n\\nfor n, k in queries:\\n    # print(k, n)\\n\\n    if n > 64:\\n        new_n = determine_n(n, k-1)\\n        prefix = (n - new_n) * 34\\n        r.append(index_find(new_n, k-1-prefix))\\n    else:\\n        r.append(index_find(n, k-1))\\n\\nprint(\\\"\\\".join(r))\\n\\n\\n\\n\\n\", \"f0 = \\\"What are you doing at the end of the world? Are you busy? Will you save us?\\\"\\n\\nf1 = \\\"What are you doing while sending \\\\\\\"{0}\\\\\\\"? Are you busy? Will you send \\\\\\\"{0}\\\\\\\"?\\\"\\n\\na = list(f1.split(\\\"{0}\\\"))\\n\\nb = list(map(len, a))\\n\\nq = int(input())\\n\\nf = lambda n: 143 * 2**min(n, 54) - 68\\n\\n\\t\\n\\nfor _ in range(q):\\n\\n\\tn, k = map(int, input().split())\\n\\n\\tans = \\\"\\\"\\n\\n\\twhile n > 0 and b[0] < k < b[0] + f(n-1):\\n\\n\\t\\tk -= b[0]\\n\\n\\t\\tn -= 1\\n\\n\\twhile not ans:\\n\\n\\t\\tw = f(n-1)\\n\\n\\t\\tif k > f(n):\\n\\n\\t\\t\\tans = \\\".\\\"\\n\\n\\t\\telif n == 0:\\n\\n\\t\\t\\tans = f0[k-1]\\n\\n\\t\\telif k <= b[0]:\\n\\n\\t\\t\\tans = a[0][k-1]\\n\\n\\t\\telif k <= b[0] + w:\\n\\n\\t\\t\\tk -= b[0]\\n\\n\\t\\t\\tn -= 1\\n\\n\\t\\telif k <= b[0] + w + b[1]:\\n\\n\\t\\t\\tk -= b[0] + w\\n\\n\\t\\t\\tans = a[1][k-1]\\n\\n\\t\\telif k <= b[0] + w + b[1] + w:\\n\\n\\t\\t\\tk -= b[0] + w + b[1]\\n\\n\\t\\t\\tn -= 1\\n\\n\\t\\telse:\\n\\n\\t\\t\\tk -= b[0] + w + b[1] + w\\n\\n\\t\\t\\tans = a[2][k-1]\\n\\n\\tprint(ans, end=\\\"\\\")\\n\\n\\n\\n# Made By Mostafa_Khaled\", \"s0 = 'What are you doing at the end of the world? Are you busy? Will you save us?'\\ns1 = 'What are you doing while sending \\\"'\\ns2 = '\\\"? Are you busy? Will you send \\\"'\\nl0 = len(s0)\\nl1 = len(s1)\\nl2 = len(s2)\\ndef get(h): \\n    if h > 55: return 10**20\\n    return (l0 + l1 + l2 + 2 << h) - l1 - l2 - 2\\n    \\ndef solve(n, k):\\n    if get(n) <= k: return '.'\\n    while True:\\n        if n == 0: return s0[k]\\n        if k < l1: return s1[k]\\n        k -= l1\\n        if k < get(n-1): \\n            n -= 1\\n            continue\\n        k -= get(n-1)\\n        if k < l2: return s2[k]\\n        k -= l2\\n        if k < get(n-1): n -=1\\n        else: return '\\\"?'[k - get(n - 1)]\\n\\nq = int(input())\\nfor i in range(q):\\n    n,k=list(map(int,input().split()))\\n    print(solve(n,k-1),end='')\\n\", \"s0 = 'What are you doing at the end of the world? Are you busy? Will you save us?'\\ns1 = 'What are you doing while sending \\\"'\\ns2 = '\\\"? Are you busy? Will you send \\\"'\\ndef get(h): \\n    if h > 55: return 1<<99\\n    return (143 << h) - 68\\ndef solve(n, k):\\n    if get(n) <= k: return '.'\\n    while True:\\n        if n == 0: return s0[k]\\n        if k < 34: return s1[k]\\n        k -= 34\\n        if k < get(n-1): \\n          n -= 1\\n          continue\\n        k -= get(n-1)\\n        if k < 32: return s2[k]\\n        k -= 32\\n        if k < get(n-1): n -=1\\n        else: return '\\\"?'[k - get(n - 1)]\\nfor i in range(int(input())):\\n    n,k=list(map(int,input().split()))\\n    print(solve(n,k-1),end='')\\n    \", \"q = int(input())\\nq1 = 'What are you doing at the end of the world? Are you busy? Will you save us?'\\nq2 = 'What are you doing while sending \\\"\\\"? Are you busy? Will you send \\\"\\\"?'\\nq3 = 'What are you doing while sending \\\"'\\nq4 = '\\\"? Are you busy? Will you send \\\"'\\nq5 = '\\\"?'\\nlq1 = len(q1)\\nlq2 = len(q2)\\nlq3 = len(q3)\\nlq4 = len(q4)\\nlq5 = len(q5)\\nlengths = [75]\\nfor i in range(100):\\n    lengths.append(lengths[-1]*2+68)\\n    #if lengths[-1]>1000000000000000000:\\n    #    break\\n#print(lengths[-1])\\n#print(len(lengths))\\n#print(lengths[53])\\n\\ndef recurse(x, y):\\n    if y<1:\\n        return q3[int(y%34)-1]\\n        #return 'A'\\n    if y>lengths[x]:\\n        return '.'\\n    if x==0:\\n        return q1[int(y-1)]\\n    if y<=34:\\n        return q3[int(y)-1]\\n    #if y<=int(lengths[x]/2):\\n    if y<=lengths[x-1]+34:\\n        return recurse(x-1, y-34)\\n    #if y<=int(lengths[x]/2)+32:\\n    if y<=lengths[x-1]+66:\\n        return q4[y-lengths[x-1]-35]\\n        #return q4[y-int(lengths[x]/2)-1]\\n    if y<=lengths[x]-2:\\n        return recurse(x-1, y-lengths[x-1]-66)\\n        return recurse(x-1, y-int(lengths[x]/2)-32)\\n    return q5[lengths[x]-y-1]\\n    \\n\\nfor i in range(q):\\n    nk = [int(x) for x in input().split()]\\n    n = nk[0]\\n    k = nk[1]\\n    #for j in range(1, lengths[n]+1):\\n    #    print(recurse(n, j), end='')\\n    #break\\n    '''\\n    if n==999:\\n        print(\\\"?\\\", end='')\\n        break\\n    elif n==72939:\\n        print(\\\"?usaglrnyh\\\", end='')\\n        break\\n    elif n==74:\\n        print(\\\"h... .. d.\\\", end='')\\n        break\\n    elif k==873326525630182716:\\n        print(\\\"o  W  rlot\\\", end='')\\n        break\\n    elif n==100000:\\n        print(\\\"o u lugW? \\\", end='')\\n        break\\n    elif n==94455:\\n        print(\\\"youni iiee\\\", end='')\\n        break\\n    elif n==50 and k==1:\\n        print('W\\\"W?\\\"\\\"W?\\\"?', end='')\\n        break\\n    elif n==52 and k==1:\\n        print('W\\\"W?\\\"\\\"W?\\\"?', end='')\\n        break\\n    elif n==54986 and k==859285936548585889:\\n        print('oru A\\\" de\\\"', end='')\\n        break\\n    elif n>65:\\n        factor = n-65\\n        print(recurse(65, k-(factor*34)), end='')\\n        #print(q3[k%34-1], end='')\\n    '''\\n    if n>65:\\n        factor = n-65\\n        print(recurse(65, k-(factor*34)), end='')\\n        #print(q3[k%34-1], end='')\\n    else:\\n        print(recurse(n, k), end='')\", \"import sys\\nsys.setrecursionlimit(1500)\\n\\ns1 = \\\"What are you doing at the end of the world? Are you busy? Will you save us?\\\"\\na = \\\"What are you doing while sending \\\\\\\"\\\"\\nb = \\\"\\\\\\\"? Are you busy? Will you send \\\\\\\"\\\"\\nc = \\\"\\\\\\\"?\\\"\\nans = \\\"\\\"\\n\\n\\ndef solve(n, k):\\n    if n == 0:\\n        if k >= len(s1):\\n            return \\\".\\\"\\n        else:\\n            return s1[k]\\n    if k < len(a):\\n        return a[k]\\n    k -= len(a)\\n    prev_len = (2 ** (n - 1) - 1) * (len(a) + len(b) + len(c)) + (2 ** (n - 1)) * len(s1)\\n    if k < prev_len:\\n        return solve(n - 1, k)\\n    k -= prev_len\\n    if k < len(b):\\n        return b[k]\\n    k -= len(b)\\n    if k < prev_len:\\n        return solve(n - 1, k)\\n    k -= prev_len\\n    if k < len(c):\\n        return c[k]\\n    else:\\n        return \\\".\\\"\\n\\n\\nfor _ in range(int(input())):\\n    n, k = list(map(int, input().split()))\\n    k -= 1\\n    if n > 65:\\n        m = n - 65\\n        if k < len(a) * m:\\n            ans += a[k % len(a)]\\n            continue\\n        k -= len(a) * m\\n        n = n - m\\n    ans += solve(n, k)\\n\\nprint(ans)\\n\"]",
    "test": "{\"inputs\": [\"3\\n1 1\\n1 2\\n1 111111111111\\n\", \"5\\n0 69\\n1 194\\n1 139\\n0 47\\n1 66\\n\", \"10\\n4 1825\\n3 75\\n3 530\\n4 1829\\n4 1651\\n3 187\\n4 584\\n4 255\\n4 774\\n2 474\\n\", \"1\\n0 1\\n\", \"1\\n999 1000000000000000000\\n\", \"10\\n1 8\\n1 8\\n9 5\\n0 1\\n8 1\\n7 3\\n5 2\\n0 9\\n4 6\\n9 4\\n\", \"10\\n72939 670999605706502447\\n67498 428341803949410086\\n62539 938370976591475035\\n58889 657471364021290792\\n11809 145226347556228466\\n77111 294430864855433173\\n29099 912050147755964704\\n27793 196249143894732547\\n118 154392540400153863\\n62843 63234003203996349\\n\", \"10\\n74 752400948436334811\\n22 75900251524550494\\n48 106700456127359025\\n20 623493261724933249\\n90 642991963097110817\\n42 47750435275360941\\n24 297055789449373682\\n65 514620361483452045\\n99 833434466044716497\\n0 928523848526511085\\n\", \"10\\n26302 2898997\\n2168 31686909\\n56241 27404733\\n9550 44513376\\n70116 90169838\\n14419 95334944\\n61553 16593205\\n85883 42147334\\n55209 74676056\\n57866 68603505\\n\", \"9\\n50 161003686678495163\\n50 161003686678495164\\n50 161003686678495165\\n51 322007373356990395\\n51 322007373356990396\\n51 322007373356990397\\n52 644014746713980859\\n52 644014746713980860\\n52 644014746713980861\\n\", \"10\\n100000 1000000000000000000\\n99999 999999999999998683\\n99998 999999999999997366\\n99997 999999999999996049\\n99996 999999999999994732\\n99995 999999999999993415\\n99994 999999999999992098\\n99993 999999999999990781\\n99992 999999999999989464\\n99991 999999999999988147\\n\", \"10\\n94455 839022536766957828\\n98640 878267599238035211\\n90388 54356607570140506\\n93536 261222577013066170\\n91362 421089574363407592\\n95907 561235487589345620\\n91888 938806156011561508\\n90820 141726323964466814\\n97856 461989202234320135\\n92518 602709074380260370\\n\", \"10\\n100000 873326525630182716\\n100000 620513733919162415\\n100000 482953375281256917\\n100000 485328193417229962\\n100000 353549227094721271\\n100000 367447590857326107\\n100000 627193846053528323\\n100000 243833127760837417\\n100000 287297493528203749\\n100000 70867563577617188\\n\", \"10\\n1 1\\n1 34\\n1 35\\n1 109\\n1 110\\n1 141\\n1 142\\n1 216\\n1 217\\n1 218\\n\", \"10\\n5 1\\n5 34\\n5 35\\n5 2254\\n5 2255\\n5 2286\\n5 2287\\n5 4506\\n5 4507\\n5 4508\\n\", \"10\\n10 1\\n10 34\\n10 35\\n10 73182\\n10 73183\\n10 73214\\n10 73215\\n10 146362\\n10 146363\\n10 146364\\n\", \"10\\n15 1\\n15 34\\n15 35\\n15 2342878\\n15 2342879\\n15 2342910\\n15 2342911\\n15 4685754\\n15 4685755\\n15 4685756\\n\", \"10\\n35 1\\n35 34\\n35 35\\n35 2456721293278\\n35 2456721293279\\n35 2456721293310\\n35 2456721293311\\n35 4913442586554\\n35 4913442586555\\n35 4913442586556\\n\", \"10\\n47 1\\n47 34\\n47 35\\n47 10062730417405918\\n47 10062730417405919\\n47 10062730417405950\\n47 10062730417405951\\n47 20125460834811834\\n47 20125460834811835\\n47 20125460834811836\\n\", \"10\\n50 1\\n50 34\\n50 35\\n50 80501843339247582\\n50 80501843339247583\\n50 80501843339247614\\n50 80501843339247615\\n50 161003686678495162\\n50 161003686678495163\\n50 161003686678495164\\n\", \"10\\n52 1\\n52 34\\n52 35\\n52 322007373356990430\\n52 322007373356990431\\n52 322007373356990462\\n52 322007373356990463\\n52 644014746713980858\\n52 644014746713980859\\n52 644014746713980860\\n\", \"10\\n54986 859285936548585889\\n49540 198101079999865795\\n96121 658386311981208488\\n27027 787731514451843966\\n60674 736617460878411577\\n57761 569094390437687993\\n93877 230086639196124716\\n75612 765187050118682698\\n75690 960915623784157529\\n1788 121643460920471434\\n\", \"10\\n13599 295514896417102030\\n70868 206213281730527977\\n99964 675362501525687265\\n8545 202563221795027954\\n62885 775051601455683055\\n44196 552672589494215033\\n38017 996305706075726957\\n82157 778541544539864990\\n13148 755735956771594947\\n66133 739544460375378867\\n\", \"10\\n23519 731743847695683578\\n67849 214325487756157455\\n39048 468966654215390234\\n30476 617394929138211942\\n40748 813485737737987237\\n30632 759622821110550585\\n30851 539152740395520686\\n23942 567423516617312907\\n93605 75958684925842506\\n24977 610678262374451619\\n\", \"10\\n66613 890998077399614704\\n59059 389024292752123693\\n10265 813853582068134597\\n71434 128404685079108014\\n76180 582880920044162144\\n1123 411409570241705915\\n9032 611954441092300071\\n78951 57503725302368508\\n32102 824738435154619172\\n44951 53991552354407935\\n\", \"10\\n96988 938722606709261427\\n97034 794402579184858837\\n96440 476737696947281053\\n96913 651380108479508367\\n99570 535723325634376015\\n97425 180427887538234591\\n97817 142113098762476646\\n96432 446510004868669235\\n98788 476529766139390976\\n96231 263034481360542586\\n\", \"10\\n99440 374951566577777567\\n98662 802514785210488315\\n97117 493713886491759829\\n97252 66211820117659651\\n98298 574157457621712902\\n99067 164006086594761631\\n99577 684960128787303079\\n96999 12019940091341344\\n97772 796752494293638534\\n96958 134168283359615339\\n\", \"10\\n95365 811180517856359115\\n97710 810626986941150496\\n98426 510690080331205902\\n99117 481043523165876343\\n95501 612591593904017084\\n96340 370956318211097183\\n96335 451179199961872617\\n95409 800901907873821965\\n97650 893603181298142989\\n96159 781930052798879580\\n\", \"10\\n96759 970434747560290241\\n95684 985325796232084031\\n99418 855577012478917561\\n98767 992053283401739711\\n99232 381986776210191990\\n97804 22743067342252513\\n95150 523980900658652001\\n98478 290982116558877566\\n98012 642382931526919655\\n96374 448615375338644407\\n\", \"10\\n27314 39\\n71465 12\\n29327 53\\n33250 85\\n52608 41\\n19454 55\\n72760 12\\n83873 90\\n67859 78\\n91505 73\\n\", \"10\\n76311 57\\n79978 83\\n34607 89\\n62441 98\\n28700 35\\n54426 67\\n66596 15\\n30889 21\\n68793 7\\n29916 71\\n\"], \"outputs\": [\"Wh.\", \"abdef\", \"Areyoubusy\", \"W\", \"?\", \"ee WWah at\", \"?usaglrnyh\", \"h... .. d.\", \"donts ly o\", \"\\\"?.\\\"?.\\\"?.\", \"o u lugW? \", \"youni iiee\", \"o  W  rlot\", \"W\\\"W?\\\"\\\"W?\\\"?\", \"W\\\"W?\\\"\\\"W?\\\"?\", \"W\\\"W?\\\"\\\"W?\\\"?\", \"W\\\"W?\\\"\\\"W?\\\"?\", \"W\\\"W?\\\"\\\"W?\\\"?\", \"W\\\"W?\\\"\\\"W?\\\"?\", \"W\\\"W?\\\"\\\"W?\\\"?\", \"W\\\"W?\\\"\\\"W?\\\"?\", \"oru A\\\" de\\\"\", \"t?W y  wnr\", \"WonreeuhAn\", \"i  oio u? \", \"eunWwdtnA \", \"idrd? o nl\", \"oisv\\\"sb ta\", \" e\\\"atdW? e\", \" u nrhuiy \", \"lohiW ohra\"]}",
    "tags": [
        "reasoning/coding"
    ]
}