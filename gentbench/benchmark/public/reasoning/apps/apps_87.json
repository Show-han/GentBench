{
    "problem": "You are an expert Python programmer, and here is your task: Jeff got 2n real numbers a_1, a_2, ..., a_2n as a birthday present. The boy hates non-integer numbers, so he decided to slightly \"adjust\" the numbers he's got. Namely, Jeff consecutively executes n operations, each of them goes as follows:  choose indexes i and j (i \u2260 j) that haven't been chosen yet;  round element a_{i} to the nearest integer that isn't more than a_{i} (assign to a_{i}: \u230a a_{i}\u00a0\u230b);  round element a_{j} to the nearest integer that isn't less than a_{j} (assign to a_{j}: \u2308 a_{j}\u00a0\u2309). \n\nNevertheless, Jeff doesn't want to hurt the feelings of the person who gave him the sequence. That's why the boy wants to perform the operations so as to make the absolute value of the difference between the sum of elements before performing the operations and the sum of elements after performing the operations as small as possible. Help Jeff find the minimum absolute value of the difference.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2000). The next line contains 2n real numbers a_1, a_2, ..., a_2n (0 \u2264 a_{i} \u2264 10000), given with exactly three digits after the decimal point. The numbers are separated by spaces.\n\n\n-----Output-----\n\nIn a single line print a single real number \u2014 the required difference with exactly three digits after the decimal point.\n\n\n-----Examples-----\nInput\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n\nOutput\n0.250\n\nInput\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n\nOutput\n0.279\n\n\n\n-----Note-----\n\nIn the first test case you need to perform the operations as follows: (i = 1, j = 4), (i = 2, j = 3), (i = 5, j = 6). In this case, the difference will equal |(0 + 0.5 + 0.75 + 1 + 2 + 3) - (0 + 0 + 1 + 1 + 2 + 3)| = 0.25.",
    "solution": "[\"k = 0\\nans = 0\\nn = int(input())\\na = input().split()\\nfor i in range(2 * n):\\n    s = float(a[i])\\n    if s != int(s):\\n        k+=1\\n        ans += (int(s) + 1 - s)\\n\\nif ans - int(ans) > 0.5:\\n    p = int(ans) + 1\\nelse:\\n    p = int(ans)\\nif p > n:\\n    p = n\\nif (p + n >= k):\\n    print('%.3f'% abs(ans - p))\\nelse:\\n    print('%.3f'% abs(ans - k + n))\\n\", \"from sys import *\\n\\ns1=stdin.readline().strip()\\nn=int(s1)\\ns1=stdin.readline().strip()\\na=list(map(float,s1.split()))\\n\\n\\nb=[]\\nfor i in range (2*n):\\n    if int(a[i])!=a[i]:\\n        b.append(round(1000*(a[i]-int(a[i]))))\\nm=len(b)\\nr=0\\nfor i in range (m):\\n    r=r+b[i]\\nif m<=n:\\n    if r>=1000*m:\\n        r=r-1000*m\\n    else:\\n        r=min(r-1000*(r//1000),1000-r+1000*(r//1000))\\nelse:\\n    if r>=n*1000:\\n        r=r-1000*n\\n    else:\\n        if r<=1000*(m-n):\\n            r=1000*(m-n)-r\\n        else:\\n            r=min(r-1000*(r//1000),1000-r+1000*(r//1000))\\nr=r/1000\\nprint(\\\"%.3f\\\"%r)\\n\", \"n = int(input())\\nAs = list(map(float, input().split()))\\n\\nB = list(x - int(x) for x in As if x - int(x) > 0.000)\\nl = len(B)\\nif l == 0:\\n\\tprint('{:.3f}'.format(0))\\n\\treturn\\n\\nS = sum(x for x in B)\\n\\n\\nll = l if l % 2 == 0 else l + 1\\nans = 1e10\\nfor i in range(max(0, l - n), (n if l > n else l) + 1):\\n\\tans = min(ans, abs(i - S))\\n\\nprint('{:.3f}'.format(ans))\\n\", \"n = int(input())\\nAs = list(map(float, input().split()))\\n\\nB = list(x - int(x) for x in As if x - int(x) > 0.000)\\nl = len(B)\\nif l == 0:\\n\\tprint('{:.3f}'.format(0))\\n\\treturn\\n\\nS = sum(x for x in B)\\n\\nans = 1e10\\nfor i in range(max(0, l - n), min(l,n) + 1):\\n\\tans = min(ans, abs(i - S))\\n\\nprint('{:.3f}'.format(ans))\\n\", \"n, k, s = int(input()), 0, 0\\nfor i in input().split():\\n    j = int(i[-3: ])\\n    if j == 0: k += 1\\n    else: s += j\\nc = s // 1000 + int(s % 1000 > 500)\\na, b = max(0, n - k), min(2 * n - k, n)\\nif a <= c <= b: s = abs(c * 1000 - s)\\nelse: s = min(abs(a * 1000 - s), abs(b * 1000 - s))\\nprint(str(s // 1000) + '.' + str(s % 1000).zfill(3))\", \"n, t = int(input()), [int(i[-3: ]) for i in input().split()]\\nk, s = t.count(0), sum(t)\\nc = s // 1000 + int(s % 1000 > 500)\\na, b = max(0, n - k), min(2 * n - k, n)\\nif a <= c <= b: s = abs(c * 1000 - s)\\nelse: s = min(abs(a * 1000 - s), abs(b * 1000 - s))\\nprint(str(s // 1000) + '.' + str(s % 1000).zfill(3))\", \"N=int(input())\\nn=N\\nA=list(map(float,input().strip().split(' ')))\\nz=0\\nfor i in range(len(A)):\\n    A[i]=round(A[i],3)-int(A[i])\\n    if A[i]==0:\\n        z+=1\\n#print(A)        \\nANS=sum(A)\\n#print(ANS)\\nans=10**10\\nfor j in range(n-z,n+1):\\n    ans=min(ans,abs(ANS-j))\\n    \\nprint(\\\"%.3f\\\"%ans)\", \"from sys import *\\nimport math\\ndef numline(f = int):\\n  return map(f, input().split())\\n    \\nn = int(input())\\na = list(filter(lambda x: x != 0, numline(lambda s: int(s.split('.')[1]))))\\n# print(' '.join(map(str, a)))\\nc0 = min(2 * n - len(a), len(a))\\ns = sum(a) - 1000 * min(n, len(a))\\nans = abs(s)\\nfor i in range(c0):\\n  s += 1000\\n  ans = min(ans, abs(s))\\n\\nprint('{}.{:0>3}'.format(ans // 1000, ans % 1000))\", \"n = int(input())\\nl = list(map(float, input().split()))\\nl = sorted([x - int(x) for x in l if x - int(x) != 0])\\no = 2*n - len(l)\\nsu = sum(l)\\nans = 0xFFFFFFFFFFFFFFF\\nfor i in range(n + 1):\\n    if i + o >= n:\\n        ans = min(ans, abs(i-su))\\nprint(\\\"%.3f\\\" % ans)\", \"n = int(input())\\n\\nl = list(map(float, input().split()))\\n\\nl = sorted([x - int(x) for x in l if x - int(x) != 0])\\n\\no = 2*n - len(l)\\n\\nsu = sum(l)\\n\\nans = 0xFFFFFFFFFFFFFFF\\n\\nfor i in range(n + 1):\\n\\n    if i + o >= n:\\n\\n        ans = min(ans, abs(i-su))\\n\\nprint(\\\"%.3f\\\" % ans)\"]",
    "test": "{\n  \"inputs\": [\n    \"3\\n0.000 0.500 0.750 1.000 2.000 3.000\\n\",\n    \"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\\n\",\n    \"3\\n673.674 9263.142 6780.000 9801.000 4640.000 8244.000\\n\",\n    \"3\\n6470.649 8295.000 8486.000 9855.000 223.000 579.549\\n\",\n    \"7\\n2341.538 9232.119 6646.930 9316.834 5684.000 9078.705 7773.000 3823.674 6357.022 9866.925 310.271 6554.778 8341.098 8407.987\\n\",\n    \"9\\n5528.000 205.031 5245.169 8832.592 385.656 7126.360 3988.000 9542.000 3044.042 5288.351 9342.000 9979.021 7096.000 5159.200 9400.000 4996.735 1698.000 5403.939\\n\",\n    \"5\\n4103.000 6413.459 1796.000 3486.000 9011.000 5564.000 9044.000 5922.539 3350.039 3746.000\\n\",\n    \"7\\n223.999 322.000 677.000 3852.477 2568.390 2410.000 3202.511 2122.870 1566.000 8841.000 8176.424 74.586 3834.000 6847.427\\n\",\n    \"10\\n8003.867 4368.000 2243.000 3340.287 5384.000 1036.456 3506.000 4463.000 1477.000 2420.314 9391.000 1696.000 5857.833 244.000 8220.000 5879.000 5424.482 2631.197 7111.000 9157.536\\n\",\n    \"1\\n6418.000 157.986\\n\",\n    \"2\\n950.000 8019.170 3179.479 9482.963\\n\",\n    \"3\\n4469.437 6526.605 4864.154 9356.383 7490.717 995.896\\n\",\n    \"3\\n673.674 9263.142 6780.000 9801.000 4640.000 8244.000\\n\",\n    \"3\\n6470.649 8295.806 8486.730 9855.351 223.102 579.000\\n\",\n    \"7\\n2341.538 9232.119 6646.930 9316.834 5684.640 9078.705 7773.000 3823.674 6357.022 9866.925 310.271 6554.778 8341.098 8407.000\\n\",\n    \"9\\n5528.947 205.031 5245.169 8832.592 385.656 7126.360 3988.000 9542.000 3044.042 5288.000 9342.837 9979.021 7096.022 5159.200 9400.485 4996.735 1698.000 5403.939\\n\",\n    \"5\\n4103.000 6413.459 1796.000 3486.799 9011.590 5564.000 9044.473 5922.000 3350.039 3746.000\\n\",\n    \"7\\n223.000 322.652 677.700 3852.000 2568.390 2410.713 3202.511 2122.870 1566.689 8841.790 8176.424 74.586 3834.000 6847.000\\n\",\n    \"10\\n8003.867 4368.000 2243.298 3340.000 5384.489 1036.000 3506.115 4463.317 1477.000 2420.314 9391.186 1696.000 5857.833 244.314 8220.000 5879.647 5424.482 2631.000 7111.130 9157.536\\n\",\n    \"1\\n6418.669 157.986\\n\",\n    \"2\\n950.335 8019.000 3179.000 9482.000\\n\",\n    \"3\\n4469.000 6526.000 4864.000 9356.000 7490.000 995.000\\n\",\n    \"3\\n673.000 9263.000 6780.254 9801.548 4640.663 8244.038\\n\",\n    \"3\\n6470.000 8295.000 8486.000 9855.000 223.000 579.549\\n\",\n    \"7\\n2341.000 9232.000 6646.000 9316.000 5684.000 9078.000 7773.978 3823.000 6357.000 9866.000 310.000 6554.000 8341.000 8407.987\\n\",\n    \"9\\n5528.000 205.000 5245.000 8832.000 385.000 7126.000 3988.538 9542.484 3044.000 5288.351 9342.000 9979.000 7096.000 5159.000 9400.000 4996.000 1698.000 5403.000\\n\",\n    \"5\\n4103.449 6413.000 1796.581 3486.000 9011.000 5564.010 9044.000 5922.539 3350.000 3746.191\\n\",\n    \"7\\n223.999 322.000 677.000 3852.477 2568.000 2410.000 3202.000 2122.000 1566.000 8841.000 8176.000 74.000 3834.286 6847.427\\n\",\n    \"10\\n8003.000 4368.194 2243.000 3340.287 5384.000 1036.456 3506.000 4463.000 1477.787 2420.000 9391.000 1696.913 5857.000 244.000 8220.322 5879.000 5424.000 2631.197 7111.000 9157.000\\n\",\n    \"1\\n6418.000 157.000\\n\",\n    \"4\\n0.999 0.999 0.999 0.999 0.999 0.999 0.000 0.000\\n\",\n    \"1\\n0.001 0.001\\n\",\n    \"1\\n0.900 0.900\\n\",\n    \"2\\n0.999 0.999 0.999 0.999\\n\",\n    \"2\\n0.001 0.001 0.001 0.001\\n\",\n    \"1\\n1.100 1.200\\n\",\n    \"10\\n0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900 0.900\\n\",\n    \"2\\n0.200 0.200 0.200 0.200\\n\",\n    \"3\\n0.900 0.900 0.900 0.900 0.900 0.000\\n\",\n    \"1\\n0.061 0.330\\n\",\n    \"2\\n0.100 0.100 0.100 0.100\\n\",\n    \"5\\n0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001\\n\"\n  ],\n  \"outputs\": [\n    \"0.250\\n\",\n    \"0.279\\n\",\n    \"0.184\\n\",\n    \"0.198\\n\",\n    \"0.119\\n\",\n    \"0.096\\n\",\n    \"0.037\\n\",\n    \"0.316\\n\",\n    \"0.028\\n\",\n    \"0.014\\n\",\n    \"0.388\\n\",\n    \"0.192\\n\",\n    \"0.184\\n\",\n    \"0.362\\n\",\n    \"0.466\\n\",\n    \"0.036\\n\",\n    \"0.360\\n\",\n    \"0.325\\n\",\n    \"0.472\\n\",\n    \"0.655\\n\",\n    \"0.335\\n\",\n    \"0.000\\n\",\n    \"0.497\\n\",\n    \"0.451\\n\",\n    \"0.035\\n\",\n    \"0.373\\n\",\n    \"0.230\\n\",\n    \"0.189\\n\",\n    \"0.156\\n\",\n    \"0.000\\n\",\n    \"1.994\\n\",\n    \"0.998\\n\",\n    \"0.800\\n\",\n    \"1.996\\n\",\n    \"1.996\\n\",\n    \"0.700\\n\",\n    \"8.000\\n\",\n    \"1.200\\n\",\n    \"1.500\\n\",\n    \"0.609\\n\",\n    \"1.600\\n\",\n    \"4.990\\n\"\n  ]\n}",
    "tags": [
        "reasoning/coding"
    ]
}